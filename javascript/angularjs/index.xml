<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AngularJS on My New Hugo Site</title>
    <link>http://example.org/javascript/angularjs/</link>
    <description>Recent content in AngularJS on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Apr 2017 14:41:31 +0100</lastBuildDate>
    
	<atom:link href="http://example.org/javascript/angularjs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AngularJS Promises Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-promises-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 14:41:31 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-promises-tutorial/</guid>
      <description>In this tutorial we&amp;rsquo;ll be looking at how to work with and define promises in AngularJS. For more information check out the official AngularJS Documentation
What are Promises in Javascript? Essentially when you create a promise, you are ensuring that a certain order is followed in the execution of your code. Javascript is asynchronous by nature and in the execution of a method it’s not guaranteed what part of it will finish execution first.</description>
    </item>
    
    <item>
      <title>Most Important Changes to AngularJS in 1.6</title>
      <link>http://example.org/javascript/angularjs/most-important-changes-angularjs-1-6/</link>
      <pubDate>Sat, 15 Apr 2017 14:31:36 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/most-important-changes-angularjs-1-6/</guid>
      <description>The changelog with the AngularJS 1.6 release notes can be found here: AngularJS 1.6-RC.0 After having a look at the AngularJS release notes for 1.6, I thought I’d compile my thoughts together as to the most important changes to the framework in the coming release.
Expression Sandbox Removal Expression Sandbox Removal Full Notes
The expression sandbox removal was essentially something that checked to see if your code was accidentally accessing arbitrary javascript and discourage you from placing any business logic inside your templates.</description>
    </item>
    
    <item>
      <title>AngularJS ng-model in ng-if Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-ng-model-in-ng-if-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:17:38 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-ng-model-in-ng-if-tutorial/</guid>
      <description>a quick tip for those trying to get the ng-model directive working in your angularjs application within ng-if.
ng-if Child Scopes If you are wanting to use an ng-model scope within an ng-if then you&#39;ll have to access that scope using $parent
Our html page will look something like so:
&amp;lt;html ng-app=&amp;#34;testApp&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;AngularJS ng-if child scopes example&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;#34;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body ng-controller=&amp;#34;testController&amp;#34;&amp;gt; &amp;lt;div ng-if=&amp;#34;isFalse&amp;#34;&amp;gt; {{$parent.name}} &amp;lt;/div&amp;gt; &amp;lt;p&amp;gt;{{name}}&amp;lt;/p&amp;gt; &amp;lt;div ng-if=&amp;#34;isTrue&amp;#34;&amp;gt; &amp;lt;p&amp;gt;{{$parent.</description>
    </item>
    
    <item>
      <title>AngularJS Data Binding Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-data-binding-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:16:16 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-data-binding-tutorial/</guid>
      <description>AngularJS Official Docs on Data Binding can be found here: AngularJS Data Binding
 Please note that the use of scope is somewhat frowned upon. Check out my article on Working with Components and how you should use one way data-binding.
 What is Data Binding? Data binding is incredibly useful due to the fact it automatically synchronizes the data in both our model and view components. Any changes made to something in the frontend will automatically be reflected in the backend and vice versa.</description>
    </item>
    
    <item>
      <title>AngularJS Controllers Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-controllers-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:10:12 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-controllers-tutorial/</guid>
      <description>AngularJS controllers are somewhat similar to classes in Object Oriented programming and as such you can define the functionality of your applications in these controllers. When a controller is attached to the DOM via the ng-controller directive it instantiates a new Controller object.
 Check out my article on Working with Components and see how you should use controllers within a component based system.
 Instantiating a Controller We’ll begin by creating a very simple controller that contains a function that we’ll call every time we click a button.</description>
    </item>
    
    <item>
      <title>AngularJS Templating Tutorial Using ng-view</title>
      <link>http://example.org/javascript/angularjs/angularjs-template-tutorial-using-ng-view/</link>
      <pubDate>Sat, 15 Apr 2017 09:09:12 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-template-tutorial-using-ng-view/</guid>
      <description>Templating is fantastic for reducing the amount of code you have to maintain, if you have a defined structure to all of your webapp&amp;rsquo;s pages then templating allows you to create one master page for this structure and then just replace pieces of the page with different content based on the url.
For instance, say we had a blog. If our blog had the same nav bar, the same header image, the same footer, then it makes sense to put this in one place instead of constantly repeating it throughout every page in your application.</description>
    </item>
    
    <item>
      <title>AngularJS Directives Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-directives-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:08:03 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-directives-tutorial/</guid>
      <description>The official documentation for AngularJS’s directives can be found here: AngularJS Directives
What Are Directives? Directives essentially allow you to attach behaviors to specific DOM elements. This means you can define your own custom html-like tags and attach all of the functionality you desire to that tag which is perfect for creating breaking up your applications into distinct modules which can be worked on simultaneously in teams of developers.
Directives are an essential part of the AngularJS framework and if you want a bit of background behind why you should define your own directives rather than use the ng-controller directive then check out this post by one of Paypal’s engineers - Lessons learned from rebuilding Paypal&#39;s checkout in AngularJS</description>
    </item>
    
    <item>
      <title>AngularJS Template Route Provider Tutorial</title>
      <link>http://example.org/javascript/angularjs/template-route-provider-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:04:56 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/template-route-provider-tutorial/</guid>
      <description>This tutorial covers how you can utilize AngularJS’s $routeProvider in order to create a multiple page application that features one master page. The official documentation for Routing and multiple views can be found here: https://docs.angularjs.org/tutorial/step_07 
Our Project The structure of our project for this tutorial is going to look a little something like this:
index.html scripts.js view/ -- home.html -- contact.html -- about.html With our index.html being our master page in which we define all javascript dependencies and styling for things like the nav bar and footer etc.</description>
    </item>
    
    <item>
      <title>Interacting With RESTful APIs Using $http in AngularJS</title>
      <link>http://example.org/javascript/angularjs/interacting-with-apis-using-http-angularjs/</link>
      <pubDate>Sat, 15 Apr 2017 09:03:47 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/interacting-with-apis-using-http-angularjs/</guid>
      <description>In this tutorial I will be showing you how we can create a frontend angularjs application that could interact with a RESTful API. In order for our Angular applications to be able to make API calls, we’ll have to use the $http service which gives us the ability to perform GET, POST, PUT and DELETE api calls, there are other types of calls but for now we’ll focus on these 4.</description>
    </item>
    
    <item>
      <title>AngularJS Filter Search Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-filter-search-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 08:59:44 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-filter-search-tutorial/</guid>
      <description>Links: Full Source Code: https://github.com/emforce/AngularFuzzySearch In this tutorial I’ll be showing you how you can create a tool which allows you to type in a search query in an input box and see all matches below that input box without having to reload the page and we’ll be leveraging AngularJS’s filter mechanic to do so.
To get us started we’ll start with mocking up what our page will look like, this is just going to be a basic no-frills design to get us started but feel free to modify it to suit.</description>
    </item>
    
    <item>
      <title>Setting a Default Value for Select Elements in AngularJS</title>
      <link>http://example.org/javascript/angularjs/setting-default-select-value-angularjs/</link>
      <pubDate>Sat, 15 Apr 2017 08:37:21 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/setting-default-select-value-angularjs/</guid>
      <description>This is just a quick code snippet for those of you facing this slight problem when developing your applications using AngularJS 1.5. This works for those of you &amp;lt;select ng-model=&amp;#34;selection&amp;#34; ng-init=&amp;#34;selection =&amp;#39;The First Default Option&amp;#39;&amp;#34;&amp;gt; &amp;lt;option&amp;gt;The First Default Option&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;The Second non-default option&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt;</description>
    </item>
    
    <item>
      <title>Using Hidden Input in a Form in AngularJS</title>
      <link>http://example.org/javascript/angularjs/hidden-input-form-angularjs/</link>
      <pubDate>Sat, 15 Apr 2017 08:35:56 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/hidden-input-form-angularjs/</guid>
      <description> This ended up being an interesting little problem for me during one of my programming sessions. Below you&#39;ll find a couple of different methods that you can use to pass hidden data to any form submission using AngularJS.
Method 1 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;someData&amp;#34; ng-model=&amp;#34;data&amp;#34; style=&amp;#34;display: none;&amp;#34; /&amp;gt;</description>
    </item>
    
    <item>
      <title>AngularJS Factory Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-factory-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:22:46 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-factory-tutorial/</guid>
      <description>What Are Factories Services are essentially ways we can share code across our AngularJS applications. Say for instance you have an application that interacts with a RESTful API, you would typically create a factory which would return an object that contains all the functions necessary to interact with that API.
By using a factory object, we can standardise the way we interact with the REST API and reduce the amount of duplicate code we have scattered around our application.</description>
    </item>
    
    <item>
      <title>AngularJS Filter Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-filter-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:22:03 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-filter-tutorial/</guid>
      <description>Introduction Filters allow us to perform a number of incredibly useful things on bindings in views within our AngularJS applications. By definition filters select a subset of items from an array and returns it as a new array.
By employing filters we are able to easily manipulate entire arrays in the front-end giving us far more power in the way we wish to display our data.
The Official Documentation for filters can be found here: AngularJS Filter Documentation</description>
    </item>
    
    <item>
      <title>AngularJS Form Validation Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-form-validation-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:20:37 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-form-validation-tutorial/</guid>
      <description>In this tutorial I’m going to be demonstrating how we can implement form validation using the AngularJS framework.
Form validation is a user experience designers best friend when ensuring application users are inputting the correct data into your form. If you had a web application that took in email addresses from prospective clients then you could employ form validation to ensure that they email addresses they are putting in look like standard email addresses.</description>
    </item>
    
    <item>
      <title>AngularJS Project Structure Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-project-structure-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:18:27 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-project-structure-tutorial/</guid>
      <description>Project organization is important for all angularjs applications. Having a well defined and easy to traverse project structure can be hugely beneficial further down the line when you have to deal with maintenance and enhancements.
I&amp;rsquo;m going to start off by showing you sub-optimal project structures and then move on to the most recommended way of structuring your angularjs projects.
Simple PoCs and Tiny Applications There are multiple ways we can structure applications and of course different structures are better suited for different applications.</description>
    </item>
    
    <item>
      <title>Automating Your AngularJS Workflow With Gulp</title>
      <link>http://example.org/javascript/angularjs/automating-your-angularjs-workflow-with-gulp/</link>
      <pubDate>Sun, 09 Apr 2017 21:17:41 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/automating-your-angularjs-workflow-with-gulp/</guid>
      <description>Automate the Repeatable Things Gulp is a task runner that allows you to define a series repeatable tasks that can be run any time you need. You can automate boring things like the minification and uglification of your javascript or whatever else you do in order to make your code production ready.
Setting Up Gulp Thankfully, Gulp is easily installable using npm.
npm install --global gulp-cli Once this has successfully run, type gulp into your command line and you should be presented with a list of different options if it was installed successfully.</description>
    </item>
    
    <item>
      <title>Working With AngularJS Component Based Applications</title>
      <link>http://example.org/javascript/angularjs/working-with-angularjs-component-applications/</link>
      <pubDate>Sun, 09 Apr 2017 21:15:58 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/working-with-angularjs-component-applications/</guid>
      <description>If you haven’t read my article on using a different architecture styles in your AngularJS applications then I recommend you check it out here: Structuring AngularJS Applications
In this article we will be having a look at the key features present in my AngularJS Admin Panel application. This application utilizes a component based architecture and follows some of the best practices outlined in Todd Motto’s Style Guide
Getting the Code If you have git installed on your local machine then getting the code is just a case of doing:</description>
    </item>
    
    <item>
      <title>Integrating Highcharts-ng into your AngularJS Applications</title>
      <link>http://example.org/javascript/angularjs/integrating-highcharts-ng-angularjs/</link>
      <pubDate>Sun, 09 Apr 2017 21:14:45 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/integrating-highcharts-ng-angularjs/</guid>
      <description>In this tutorial we’ll be having a look at how you can effectively implement highcharts.js into your angularjs applications. We’ll be following a component based architecture and enforcing things like one-way data-binding as is suggested in Todd Mottos AngularJS Style Guide.
If you already follow a component based architecture, then it should should be very easy to integrate the code in this tutorial straight into your application without too much fuss.</description>
    </item>
    
    <item>
      <title>AngularJS Event Handling Tutorial</title>
      <link>http://example.org/javascript/angularjs/angularjs-event-handling-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:13:59 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-event-handling-tutorial/</guid>
      <description>In this tutorial we’ll be looking at the different ways we can handle events in AngularJS. We’ll be exploring several of the event listening directives that AngularJS has on offer and how we can use these to create cool behaviours in our AngularJS Applications.
All code in this tutorial can be found in this github repo: Github Repo  Browser Events In most modern web browsers, every time something interesting happens in either the Document or the browser an event is generated.</description>
    </item>
    
    <item>
      <title>Passing Data Between Routes in AngularJS</title>
      <link>http://example.org/javascript/angularjs/passing-data-between-routes-angularjs/</link>
      <pubDate>Sun, 09 Apr 2017 21:13:23 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/passing-data-between-routes-angularjs/</guid>
      <description>In this tutorial we’ll be looking at how we can store or pass information between routes in an AngularJS application. This can be useful in a number of different applications and is actually quite simple.
This tutorial will be using the code from this github repo: AngularJS Fundamentals  If you want to see a working example of this then simply clone the repo to your local machine and run it.</description>
    </item>
    
    <item>
      <title>angularjs most important changes 1 6</title>
      <link>http://example.org/javascript/angularjs/angularjs-most-important-changes-1-6/</link>
      <pubDate>Sun, 09 Apr 2017 21:12:25 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-most-important-changes-1-6/</guid>
      <description>The changelog with the AngularJS 1.6 release notes can be found here: AngularJS 1.6-RC.0 After having a look at the AngularJS release notes for 1.6, I thought I’d compile my thoughts together as to the most important changes to the framework in the coming release.
Expression Sandbox Removal Expression Sandbox Removal Full Notes
The expression sandbox removal was essentially something that checked to see if your code was accidentally accessing arbitrary javascript and discourage you from placing any business logic inside your templates.</description>
    </item>
    
    <item>
      <title>How To Store Information in Cookies in AngularJS</title>
      <link>http://example.org/javascript/angularjs/angularjs-store-cookies-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:11:31 +0100</pubDate>
      
      <guid>http://example.org/javascript/angularjs/angularjs-store-cookies-tutorial/</guid>
      <description>In this tutorial we look at how you can store information in cookies in your AngularJS application.
A cookie is a small piece of data that’s typically sent from a website you may be viewing and stored by your web browser. We can use these cookies for a wide range of things, from storing the last viewed items of a visitor to authentication cookies. These cookies persist across requests and thus are advantageous over using parent components or services to store information between routes as is detailed here: Passing Information Between Routes using Services</description>
    </item>
    
    <item>
      <title>Removing Duplicate Entries from ng-repeat in AngularJS</title>
      <link>http://example.org/javascript/angularjs/removing-duplicates-from-ng-repeat/</link>
      <pubDate>Sun, 14 Feb 2016 16:11:58 +0530</pubDate>
      
      <guid>http://example.org/javascript/angularjs/removing-duplicates-from-ng-repeat/</guid>
      <description>This tutorial was built using Angular 1.6. Earlier or later versions of the code may not work as intended.
 This tutorial will show you how you can filter out duplicates when using the ng-repeat directive in AngularJS. We&amp;rsquo;ll be passing in an array of JSON Objects and filtering based on multiple different things within each object.
Implementing our Test Controller We’ll start off with a very simple angular controller that will have a list of item names, some of which are duplicates.</description>
    </item>
    
  </channel>
</rss>