<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo on CoTutorial</title>
    <link>https://cotutorial.github.io/series/hugo/</link>
    <description>Recent content in hugo on CoTutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-ID</language>
    <lastBuildDate>Mon, 12 Jun 2017 08:49:04 +0100</lastBuildDate>
    
	<atom:link href="https://cotutorial.github.io/series/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo Adding Images To Markdown Posts</title>
      <link>https://cotutorial.github.io/golang/hugo/hugo-adding-images-to-posts/</link>
      <pubDate>Mon, 12 Jun 2017 08:49:04 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/hugo/hugo-adding-images-to-posts/</guid>
      <description>In this quick tutorial we are going to look at the various ways you can add images to your markdown content in hugo.
Markdown Annotation The quickest and simplest way of adding images to your content would be to use markdown annotation. Place the image you want to display in your post within your static/ directory and then reference it in your markdown like so:
![image alt text](/my_image.png) Using HTML Tags In the situation where you need to add say a custom css class to the image then your second option is to simply use an &amp;lt;img/&amp;gt; tag within your markdown content.</description>
    </item>
    
    <item>
      <title>Hugo Deployment Workflow Tutorial</title>
      <link>https://cotutorial.github.io/golang/hugo/hugo-deployment-workflow-tutorial/</link>
      <pubDate>Mon, 12 Jun 2017 08:48:26 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/hugo/hugo-deployment-workflow-tutorial/</guid>
      <description>When developing websites with Hugo, having a solid automated deployment strategy can save you hundreds of hours of performing repetitive manual tasks. This site itself uses hugo and an automated deployment strategy in order to automatically deploy any changes made to it&amp;rsquo;s underlying git repo: elliotforbes/tutorialedge.net. Whenever I wish to make a change to any of the content on my site I follow these steps:
 Make the changes to a local version of hugo running on my laptop Verify the changes look good in my browser.</description>
    </item>
    
    <item>
      <title>Getting Started With Hugo</title>
      <link>https://cotutorial.github.io/golang/hugo/getting-started-with-hugo/</link>
      <pubDate>Sat, 27 May 2017 11:13:46 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/hugo/getting-started-with-hugo/</guid>
      <description>Hugo is an incredibly popular static site generator written primarily in Go and it is currently running this site. With Hugo you would typically define all of your content in the form of markdown files. These markdown files are then parsed and combined with a number of template files and you are left with a fully functioning html page that you can easily host anywhere. There are a number of key advantages to this approach such as:</description>
    </item>
    
  </channel>
</rss>