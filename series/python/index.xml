<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on My New Hugo Site</title>
    <link>http://example.org/series/python/</link>
    <description>Recent content in python on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Jan 2019 11:11:06 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/series/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started With Python</title>
      <link>http://example.org/python/getting-started-with-python/</link>
      <pubDate>Mon, 18 Sep 2017 19:47:29 +0100</pubDate>
      
      <guid>http://example.org/python/getting-started-with-python/</guid>
      <description>This tutorial uses Python version 3.6
 Introduction In this course we’ll be taking a look at the absolute basics of the Python programming language and cover everything you need to get up and running creating your own basic Python programs.
The full text version of this course can be found by clicking on the Python Programming Course card on the homepage of my site.
Installing Python Let’s dive in.</description>
    </item>
    
    <item>
      <title>Functions and Variables in Python</title>
      <link>http://example.org/python/python-functions-and-variables/</link>
      <pubDate>Mon, 18 Sep 2017 19:19:39 +0100</pubDate>
      
      <guid>http://example.org/python/python-functions-and-variables/</guid>
      <description>Variables in Python Let’s first have a look at variables. A variable is essentially a place where we can store the value of something for processing later on. Imagine you wanted to write a program that doubled a number for us, not the most exciting of programs I know but it is a good example.
We would first want to define a variable to store our number, double it and then print it out.</description>
    </item>
    
    <item>
      <title>Working with Lists in Python - Tutorial</title>
      <link>http://example.org/python/python-lists-tutorial/</link>
      <pubDate>Wed, 20 Dec 2017 19:22:48 +0000</pubDate>
      
      <guid>http://example.org/python/python-lists-tutorial/</guid>
      <description>This tutorial was built in Python 3.6
 A Simple List my_list = [1, 2, 3, 4] print(my_list) Reversing a List This quick and easy technique shows how you can access all the elements of a list in reverse order.
&amp;gt;&amp;gt;&amp;gt; my_list = [1,2,3,4,5] &amp;gt;&amp;gt;&amp;gt; my_list[::-1] [5, 4, 3, 2, 1] Try it Out my_list = [1, 2, 3, 4] print(my_list[::-1]) We can then treat our reversed list as an iterator and iterate through every element within this reversed list like so:</description>
    </item>
    
    <item>
      <title>Working With The File System in Python</title>
      <link>http://example.org/python/python-working-with-file-system/</link>
      <pubDate>Wed, 20 Dec 2017 18:41:30 +0000</pubDate>
      
      <guid>http://example.org/python/python-working-with-file-system/</guid>
      <description>This tutorial was written using Python 3.6
 Being able to work with the file system and do things like traverse directories or retrieve every file can be very handy in a number of different situations.
In this tutorial we&amp;rsquo;ll be taking a look at the various ways you can work with the file system in Python. Hopefully this will give you a decent grasp of some of the cool things you can do very quickly and succinctly using the Python programming language.</description>
    </item>
    
    <item>
      <title>Reading and Writing Files In Python</title>
      <link>http://example.org/python/python-reading-writing-files/</link>
      <pubDate>Sun, 10 Sep 2017 08:59:29 +0100</pubDate>
      
      <guid>http://example.org/python/python-reading-writing-files/</guid>
      <description>This tutorial was written using Python 3.6
 Being able to effectively work with the filesystem in any programming language is important as there will always be a need to do things such as import data from files or store data in local files. In this tutorial we&amp;rsquo;ll be looking at how you can create files, write to these newly created and then subsequently delete these files once we are done.</description>
    </item>
    
    <item>
      <title>Python Maps Tutorial</title>
      <link>http://example.org/python/python-maps-tutorial/</link>
      <pubDate>Wed, 24 May 2017 07:57:51 +0100</pubDate>
      
      <guid>http://example.org/python/python-maps-tutorial/</guid>
      <description>This tutorial was built using Python 3.6
 Maps in Python are syntactic sugar that allow you to very succinctly iterate through every element of an array and perform a function on it.
Imagine we started off with a list of values numbering from 2-6 like so:
values = [2,3,4,5,6] And we had a function which doubled said values:
def double(x): return x * 2 Without the use of maps we would have to do something like so in order to multiply every element:</description>
    </item>
    
    <item>
      <title>Debugging with the Python Debugger - PDB </title>
      <link>http://example.org/python/debugging-with-pdb-python/</link>
      <pubDate>Sat, 02 Sep 2017 13:35:28 +0100</pubDate>
      
      <guid>http://example.org/python/debugging-with-pdb-python/</guid>
      <description>In this tutorial we&amp;rsquo;ll be having a look at the Python Debugger, what it is and how you can use it to effectively debug your Python applications.
Knowing how to debug your code is an incredibly important tool in any programmers arsenal. Thankfully Python comes with the excellent PDB or Python DeBugger which allows us to step through our code and effectively work out what has gone wrong.
 The official documentation for the Python Debugger can be found here: Python Debugger</description>
    </item>
    
    <item>
      <title>Python Modules Tutorial</title>
      <link>http://example.org/python/python-modules-tutorial/</link>
      <pubDate>Mon, 28 Aug 2017 18:42:27 +0100</pubDate>
      
      <guid>http://example.org/python/python-modules-tutorial/</guid>
      <description>This tutorial was developed using Python version 3.6.
 Larger Python projects require larger degrees of order and sub-dividing your project up into logical blocks can greatly improve the readability of your codebase. In Python we can do this sub-division using a concept using modules.
Say for instance you have a program that bought and sold widgets on the stock market. This project does a number of things:</description>
    </item>
    
    <item>
      <title>Python Project Layout Best Practices</title>
      <link>http://example.org/python/python-project-layout/</link>
      <pubDate>Mon, 28 Aug 2017 18:47:50 +0100</pubDate>
      
      <guid>http://example.org/python/python-project-layout/</guid>
      <description>This tutorial was built using Python 3.6. It should also be noted that these are opinions and to be taken with a grain of salt.
 Structure is an incredibly important aspect of all projects and following a standard structure when it comes to designing your systems plays a huge part in making it more maintainable. By following standards you are essentially easing the job of new programmers coming on to a project as they&amp;rsquo;ll find it easier to navigate around and become comfortable with your systems.</description>
    </item>
    
    <item>
      <title>Python Logging Best Practices</title>
      <link>http://example.org/python/python-logging-best-practices/</link>
      <pubDate>Sun, 13 Aug 2017 17:06:57 +0100</pubDate>
      
      <guid>http://example.org/python/python-logging-best-practices/</guid>
      <description>In this tutorial we&amp;rsquo;ll be looking at some of the best practices that you should be following when it comes to implementing logging in your Python programs.
 This article was written against Python version 3.6
 Why Do We Need Logging? Logging is an incredibly important feature of any application as it gives both programmers and people supporting the application key insight into what their systems are doing. Without proper logging we have no real idea as to why our applications fail and no real recourse for fixing these applications.</description>
    </item>
    
    <item>
      <title>Python Decorators Tutorial</title>
      <link>http://example.org/python/python-decorators-tutorial/</link>
      <pubDate>Tue, 08 Aug 2017 18:55:48 +0100</pubDate>
      
      <guid>http://example.org/python/python-decorators-tutorial/</guid>
      <description>This Tutorial was written using Python 3.6
 In this tutorial, I am going to be demonstrating the wonderful concept that is Python decorators. We&amp;rsquo;ll look at the various attributes of Python that make writing your own decorators fairly simple and then we&amp;rsquo;ll cover some cool examples as to how you can use decorators to improve the performance of some types of applications.
Video Tutorial If you prefer, feel free to check out the video version of this course, like and subscribe to my channel for more Python related video content!</description>
    </item>
    
    <item>
      <title>Python Generators Tutorial</title>
      <link>http://example.org/python/python-generator-tutorial/</link>
      <pubDate>Mon, 12 Jun 2017 14:26:02 +0000</pubDate>
      
      <guid>http://example.org/python/python-generator-tutorial/</guid>
      <description>This tutorial was built using Python 3.6
 In this tutorial I&amp;rsquo;m aiming to help demystify this concept of generators within the Python programming language. We&amp;rsquo;ll look at what generators are and how we can utilize them within our python programs.
What Are Generators? Generators are functions that can return multiple values at different times. These are iterators that we can subsequently iterate over in a variety of different ways.</description>
    </item>
    
    <item>
      <title>Python Iterator Tutorial</title>
      <link>http://example.org/python/python-iterator-tutorial/</link>
      <pubDate>Sun, 03 Sep 2017 17:58:24 +0100</pubDate>
      
      <guid>http://example.org/python/python-iterator-tutorial/</guid>
      <description>This tutorial was built using Python 3.6
 In this tutorial we&amp;rsquo;ll be looking at what iterators are with Python. We&amp;rsquo;ll also be looking at how we can effectively work with them and improve our Python programs using them.
What Are Iterators? Iterators are cool in the sense that they allow us to step over every item in an array, object or file and perform work on each item.</description>
    </item>
    
    <item>
      <title>Getting Started With PyUnit Testing</title>
      <link>http://example.org/python/getting-started-with-pyunit-testing/</link>
      <pubDate>Sun, 19 Nov 2017 10:18:54 +0000</pubDate>
      
      <guid>http://example.org/python/getting-started-with-pyunit-testing/</guid>
      <description>This tutorial is currently under construction.
This tutorial was built using Python 3.6
 If you are starting to improve your Python development skills, the one aspect that must be up to scratch is your ability to test your code. Unit testing your code can help to improve the confidence you have whenever you are trying to make any patches, bug fixes or just changes in general.
If your tests adequately test that your code behaves the way you expect it to, whenever you make a change, you can retest and ensure that your code still behaves the way you expect it with your incorporated changes.</description>
    </item>
    
    <item>
      <title>Python Based Lambda Tutorial</title>
      <link>http://example.org/cloud/aws/python-based-lambda-tutorial/</link>
      <pubDate>Sat, 24 Feb 2018 10:23:36 +0000</pubDate>
      
      <guid>http://example.org/cloud/aws/python-based-lambda-tutorial/</guid>
      <description>If you&amp;rsquo;ve been following my Medium Blog recently, you&amp;rsquo;ll know that I&amp;rsquo;m a huge fan of Serverless and I genuinely believe that it will start to seriously take off in terms of popularity in the years to come.
In this tutorial, we are going to be writing a very simple Python based AWS Lambda function that we&amp;rsquo;ll then deploy using the serverless.com CLI.
Installing Serverless In order to install the serverless CLI you can do the following:</description>
    </item>
    
    <item>
      <title>Setting Up your Development Environment for Building a Genetic Adversarial Network</title>
      <link>http://example.org/python/data-science/setting-up-dev-environment-building-gan/</link>
      <pubDate>Sat, 19 Jan 2019 11:11:06 +0000</pubDate>
      
      <guid>http://example.org/python/data-science/setting-up-dev-environment-building-gan/</guid>
      <description>What&amp;rsquo;s a development environment? Everyone thinks setting up a development environment needs to be this incredibly arduous process. The installation process could be worse. It&amp;rsquo;s actually quite simple and this article intends to show you the basics.
Getting ready Let&amp;rsquo;s lay out the requirements for the equipment you&amp;rsquo;ll need:
 GPU: 10 series CUDA-enabled Nidea GPU Operating system: Ubuntu Linux 16.04+ CPU/RAM: i5 or i7 with at least 8 GB of RAM  First and foremost, the GPU is a requirement.</description>
    </item>
    
    <item>
      <title>Preparing a Dataset for Machine Learning with scikit-learn</title>
      <link>http://example.org/python/data-science/preparing-dataset-machine-learning-scikit-learn/</link>
      <pubDate>Sat, 19 Jan 2019 10:53:22 +0000</pubDate>
      
      <guid>http://example.org/python/data-science/preparing-dataset-machine-learning-scikit-learn/</guid>
      <description>The first step to implementing any machine learning algorithm with scikit-learn is data preparation. Scikit-learn comes with a set of constraints to implementation. The dataset that we will be using is based on mobile payments and is found on the world&amp;rsquo;s most popular competitive machine learning website – Kaggle. You can download the dataset from: https://www.kaggle.com/ntnu-testimon/paysim1.
Once downloaded, open a new Jupyter Notebook using the following code in Terminal (macOS/Linux) or Anaconda Prompt/PowerShell (Windows):</description>
    </item>
    
    <item>
      <title>Building an IMDB Top 250 Clone with Pandas</title>
      <link>http://example.org/python/building-imdb-top-250-clone-pandas/</link>
      <pubDate>Sun, 21 Oct 2018 19:20:13 +0100</pubDate>
      
      <guid>http://example.org/python/building-imdb-top-250-clone-pandas/</guid>
      <description>The Internet Movie Database (IMDB) maintains a chart called the IMDB Top 250, which is a ranking of the top 250 movies according to a certain scoring metric. All the movies in this list are non-documentary, theatrical releases with a runtime of at least 45 minutes and over 250,000 ratings:
This chart can be considered the simplest of recommenders. It doesn&amp;rsquo;t take into consideration the tastes of a particular user nor does it try to deduce similarities between different movies.</description>
    </item>
    
    <item>
      <title>Python Method Resolution Order Tutorial</title>
      <link>http://example.org/python/python-method-resolution-order-tutorial/</link>
      <pubDate>Mon, 18 Dec 2017 11:23:34 +0000</pubDate>
      
      <guid>http://example.org/python/python-method-resolution-order-tutorial/</guid>
      <description>Understanding the way and the order in which Python resolves functions is important. You need to know where your code is going to call, when you call it and things can get messy as soon as you start playing with classes inheriting from multiple other classes.
In this tutorial we&amp;rsquo;ll be looking at how Python 3 handles its MRO by using a little something called C3 Linearization.
The Problems with Inheritance Imagine you were implementing a programming language that featured inheritance.</description>
    </item>
    
    <item>
      <title>Creating Basic Python C Extensions - Tutorial</title>
      <link>http://example.org/python/python-c-extensions-tutorial/</link>
      <pubDate>Fri, 01 Dec 2017 21:32:19 +0000</pubDate>
      
      <guid>http://example.org/python/python-c-extensions-tutorial/</guid>
      <description>This tutorial was built using Python 3.6. The official documentation can be found here: Extending and Embedding the Python Interpreter
 In this tutorial we are going to take a look at how you can create a really simple Python module using the C programming language. I felt this was a good topic to cover as I personally struggled with finding succinct documentation that worked and showed me the basics.</description>
    </item>
    
    <item>
      <title>Asyncio Semaphores and Bounded Semaphores Tutorial</title>
      <link>http://example.org/python/concurrency/python-asyncio-semaphores-tutorial/</link>
      <pubDate>Fri, 24 Nov 2017 13:39:00 +0000</pubDate>
      
      <guid>http://example.org/python/concurrency/python-asyncio-semaphores-tutorial/</guid>
      <description>This tutorial was built on top of Python 3.6.
 In this tutorial we&amp;rsquo;ll be looking at semaphores and bounded-semaphores and how they work within the Asyncio framework.
Video Tutorial  What Are Semaphores? Semaphores were originally a key part of railway system architecture and it was the famous Dijkstra that translated this real-world concept into our computing world.
These semaphores have an internal counter that is incremented and decremented whenever either an acquire or a release call is made.</description>
    </item>
    
    <item>
      <title>Asyncio Synchronization Primitives Tutorial - Queues and Locks</title>
      <link>http://example.org/python/concurrency/asyncio-synchronization-primitives-tutorial/</link>
      <pubDate>Thu, 23 Nov 2017 19:35:09 +0000</pubDate>
      
      <guid>http://example.org/python/concurrency/asyncio-synchronization-primitives-tutorial/</guid>
      <description>This tutorial was built on top of Python 3.6
 Video Tutorial  In this tutorial we&amp;rsquo;ll be looking at the various synchronization primitives available to you in your Asyncio programming adventures. We&amp;rsquo;ll be taking a brief look at why these synchronization primitives are important and also the various ways you can use them within a simple Asyncio based program.
Why Are These Important? When it comes to programming concurrent systems you have to try and ensure that your program is free from a little thing called a Race Condition.</description>
    </item>
    
    <item>
      <title>Asyncio Tasks Tutorial</title>
      <link>http://example.org/python/concurrency/asyncio-tasks-tutorial/</link>
      <pubDate>Sat, 11 Nov 2017 13:06:32 +0000</pubDate>
      
      <guid>http://example.org/python/concurrency/asyncio-tasks-tutorial/</guid>
      <description>This tutorial was built on top of Python 3.6
 In this tutorial we&amp;rsquo;ll be looking at Tasks in Asyncio. We&amp;rsquo;ll be building on top of my previous tutorial on Asyncio Event Loops.
Tasks Tasks within Asyncio are responsible for the execution of coroutines within an event loop. These tasks can only run in one event loop at one time and in order to achieve parallel execution you would have to run multiple event loops over multiple threads.</description>
    </item>
    
    <item>
      <title>An Introduction to Face Recognition in Python</title>
      <link>http://example.org/python/intro-face-recognition-in-python/</link>
      <pubDate>Sun, 05 Nov 2017 17:42:45 +0000</pubDate>
      
      <guid>http://example.org/python/intro-face-recognition-in-python/</guid>
      <description>This tutorial was written with Python 3.6, however the library used is compatible with versions 3.3 and above.
 Face recognition software is awesome. The fact that we are able to write software that accurately picks out where someone&amp;rsquo;s eyes and nose reside within an image still astounds me and the fact that there are libraries out there for this sort of things is awesome. These libraries help to lower the barrier to entry for beginners looking to write their own face recognition systems and allow people to do some really cool things.</description>
    </item>
    
    <item>
      <title>Getting Started with Asyncio in Python</title>
      <link>http://example.org/python/concurrency/getting-started-with-asyncio-python/</link>
      <pubDate>Sat, 04 Nov 2017 15:20:50 +0000</pubDate>
      
      <guid>http://example.org/python/concurrency/getting-started-with-asyncio-python/</guid>
      <description>Video Tutorial   This tutorial was written on top of Python 3.6. This is taken from my book &amp;ldquo;Learning Concurrency in Python&amp;rdquo; if you wish to read up more on the library.
 Asyncio became part of the Python ecosystem in version 3.4 and has since then become the basis for a huge number of Python libraries and frameworks due to it&amp;rsquo;s impressive speed and ease of use. Asyncio allows you to easily write single-threaded concurrent programs that utilize something called coroutines, these coroutines are like a stripped down threads and don&amp;rsquo;t come with the same inherit performance issues that your full-fat threads would typically come with.</description>
    </item>
    
    <item>
      <title>Threads in Python</title>
      <link>http://example.org/python/concurrency/threads-in-python/</link>
      <pubDate>Tue, 31 Oct 2017 22:00:56 +0000</pubDate>
      
      <guid>http://example.org/python/concurrency/threads-in-python/</guid>
      <description>This tutorial was written using Python 3.6. Some of the code may not be compatible with Python 2.7
 In this tutorial we are going to take an in-depth look at threads in Python. We&amp;rsquo;ll start by covering what they consist of, we&amp;rsquo;ll then touch upon how you can define your own simple threads within your Python programs and finally we&amp;rsquo;ll cover all of the ways you can work with these simple threads within a simple Python program.</description>
    </item>
    
    <item>
      <title>Asyncio Event Loops Tutorial</title>
      <link>http://example.org/python/concurrency/asyncio-event-loops-tutorial/</link>
      <pubDate>Sat, 28 Oct 2017 11:50:27 +0100</pubDate>
      
      <guid>http://example.org/python/concurrency/asyncio-event-loops-tutorial/</guid>
      <description>This tutorial was built on top of Python 3.6.
 In this tutorial we are going to be covering Asyncio&amp;rsquo;s event loop. Some of the material for this tutorial was taken from my book: Learning Concurrency in Python.
Video  The Event Loop The main component of any asyncio based Python program has to be the underlying event loop. Within this event loop we can (from the official documentation):</description>
    </item>
    
    <item>
      <title>Creating a RESTful API with Python and aiohttp</title>
      <link>http://example.org/python/create-rest-api-python-aiohttp/</link>
      <pubDate>Sat, 28 Oct 2017 11:50:27 +0100</pubDate>
      
      <guid>http://example.org/python/create-rest-api-python-aiohttp/</guid>
      <description>This tutorial was built on top of Python 3.6
 In this tutorial we&amp;rsquo;ll be building a very simple RESTful based API using aio-libs/aiohttp which is an asynchronous http client/server framework.
Getting Started with aiohttp Before we go into how we can use aiohttp to create a simple RESTful API, it&amp;rsquo;s important to know exactly what the framework is and what it can do for us. To start with, it features excellent support of the HTTP protocol as well as for websockets which makes it ideal for working with popular websocket libraries such as Socket.</description>
    </item>
    
    <item>
      <title>Python Event-Driven Programming with RxPY - Tutorial</title>
      <link>http://example.org/python/python-event-driven-rxpy-tutorial/</link>
      <pubDate>Sat, 14 Oct 2017 11:30:25 +0100</pubDate>
      
      <guid>http://example.org/python/python-event-driven-rxpy-tutorial/</guid>
      <description>This tutorial was built using Python 3.6
 The reactive programming paradigm is something that I&amp;rsquo;ve always been interested in upon learning about them when working with RxJS in my Angular 2+ based projects.
Event based systems can dynamically react to different situations in smart ways and the ReactiveX library enables to do this in a such a way that our code is succinct and easy to follow.</description>
    </item>
    
    <item>
      <title>Python ProcessPoolExecutor Tutorial</title>
      <link>http://example.org/python/concurrency/python-processpoolexecutor-tutorial/</link>
      <pubDate>Sun, 01 Oct 2017 13:52:59 +0100</pubDate>
      
      <guid>http://example.org/python/concurrency/python-processpoolexecutor-tutorial/</guid>
      <description>This tutorial has been taken and adapted from my book: Learning Concurrency in Python
 Video Tutorial  Introduction In this tutorial we will be looking at how you can utilize multiple processors within your Python Programs.
Multiprocessing vs Multithreading Knowing when and where to use multiple threads vs multiple processes is incredibly important if you are going to be working on highly performant Python programs. Misuse of either threads or processes could lead to your systems actually seeing performance degradation.</description>
    </item>
    
    <item>
      <title>Python ThreadPoolExecutor Tutorial</title>
      <link>http://example.org/python/concurrency/python-threadpoolexecutor-tutorial/</link>
      <pubDate>Sun, 01 Oct 2017 13:36:48 +0100</pubDate>
      
      <guid>http://example.org/python/concurrency/python-threadpoolexecutor-tutorial/</guid>
      <description>This tutorial has been taken and adapted from my book: Learning Concurrency in Python
 In this tutorial we&amp;rsquo;ll be looking at Python&amp;rsquo;s ThreadPoolExecutor. This was originally introduced into the language in version 3.2 and provides a simple high-level interface for asynchronously executing input/output bound tasks.
Why Use a ThreadPoolExecutor? ThreadPoolExecutors provide a simple abstraction around spinning up multiple threads and using these threads to perform tasks in a concurrent fashion.</description>
    </item>
    
    <item>
      <title>Python Socket.io Tutorial</title>
      <link>http://example.org/python/python-socket-io-tutorial/</link>
      <pubDate>Sun, 01 Oct 2017 12:22:11 +0100</pubDate>
      
      <guid>http://example.org/python/python-socket-io-tutorial/</guid>
      <description>Last Updated December 22nd, 2018  This tutorial was written using Python 3.6. Some of the code used is not compatible with version 2.
 In this tutorial we&amp;rsquo;ll be exploring how one can create a socket.io based webserver in Python using the socketio module.
What are WebSockets? WebSockets are an awesome bit of technology which enable us to do cool things such as perform real time communication between both a client and a server.</description>
    </item>
    
    <item>
      <title>Python Environment Configuration Tutorial</title>
      <link>http://example.org/python/python-environment-configuration-tutorial/</link>
      <pubDate>Sun, 10 Sep 2017 14:01:28 +0100</pubDate>
      
      <guid>http://example.org/python/python-environment-configuration-tutorial/</guid>
      <description>This tutorial was written using Python 3.6
 Defining a solid strategy for handling various environment configuration in your Python programs can drastically improve the way you deploy and manage different environments.
In the most basic of scenarios we would typically have 2 main environments, development and production. In our development environment we would do both our development and testing against the likes of non-production based databases and resources in order to prevent adding noise to our production environment.</description>
    </item>
    
    <item>
      <title>Making HTTP Requests in Python - Tutorial</title>
      <link>http://example.org/python/python-http-requests-tutorial/</link>
      <pubDate>Sun, 10 Sep 2017 12:27:56 +0100</pubDate>
      
      <guid>http://example.org/python/python-http-requests-tutorial/</guid>
      <description>This Tutorial was built using Python 3.6 and the Requests library
 Being able to interact with HTTP based RESTful APIs is an incredibly important task for any Python developer. More and more developers are starting to build their systems our of numerous microservices and often they will expose HTTP based endpoints with which we can interact in our own Python programs. In this tutorial we&amp;rsquo;ll look at the various ways we can interact with a HTTP based API using the Requests library in Python.</description>
    </item>
    
    <item>
      <title>Python Multithreading Tutorial - Concurrent Programming</title>
      <link>http://example.org/python/python-multithreading-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:55:57 +0100</pubDate>
      
      <guid>http://example.org/python/python-multithreading-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at how you you can use multithreading within your Python applications.
What is Multithreading? Modern computers tend to feature a CPU that has multiple processing cores, each of these cores can run many threads simultaneously which gives us the ability to perform several tasks concurrently. This tutorial will hopefully show you how to get started with Python&amp;rsquo;s threading module.
Objectives:</description>
    </item>
    
    <item>
      <title>UDP Client and Server Tutorial in Python</title>
      <link>http://example.org/python/udp-client-server-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:49:35 +0100</pubDate>
      
      <guid>http://example.org/python/udp-client-server-python/</guid>
      <description>In this tutorial I&#39;ll be showing you exactly how you can set up your own UDP chat server using CPython 3.3 and Python&#39;s Socket module. The end product will be a server that listens for all connections and messages over a specific port and prints out any messages to the console. This could be extended in the future to create a chat server that subsequently broadcasts any messages received to all parties listening for responses.</description>
    </item>
    
    <item>
      <title>Calculating Keyword Density of a Web Page with Python</title>
      <link>http://example.org/python/calculating-keyword-density-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:47:55 +0100</pubDate>
      
      <guid>http://example.org/python/calculating-keyword-density-python/</guid>
      <description>In this tutorial I will be showing you how to calculate the keyword density of a web page using the Python programming language. This will be a continuation of the previous tutorial in which we retrieved a web page using Pythons urllib2 Python module.
Keyword Density Calculation Keyword density is an easy metric to calculate as it has a relatively simple formula. The keyword density of a specific term is measured as the number of occurrences of the chosen keyword over the total number of words in the body of text.</description>
    </item>
    
    <item>
      <title>Fetching Web Pages In Python Using Urllib2</title>
      <link>http://example.org/python/fetching-web-pages-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:47:01 +0100</pubDate>
      
      <guid>http://example.org/python/fetching-web-pages-python/</guid>
      <description>This tutorial was built using Python 2.7. This will not work for Python 3+
 In this tutorial I will be showing you how you can fetch the a webpage using the urllib2 python module. This is a relatively simple process that can be accomplished in 5 lines of code.
The Imports To begin with we will need to import the urllib2 python module so that we can utilize it&amp;rsquo;s functionality:</description>
    </item>
    
    <item>
      <title>Creating a Python Web Crawler</title>
      <link>http://example.org/python/creating-python-web-crawler/</link>
      <pubDate>Sat, 15 Apr 2017 09:45:44 +0100</pubDate>
      
      <guid>http://example.org/python/creating-python-web-crawler/</guid>
      <description>This tutorial was built using Python 3.6
 In this tutorial we&amp;rsquo;ll be taking a look at how you can build your own Python web crawler using the ThreadPoolExecutor class and BeautifulSoup.
Web Crawlers are incredibly interesting in the sense that they can do a huge host of data mining tasks. You could for instance do any of the following:
 Crawl and entire website for broken links, or errors Scrape an entire site to get a collective view of the entire site Scrape hundreds of different sites in order to build your own simple search engine  The possibilities are truly endless.</description>
    </item>
    
    <item>
      <title>Creating a Twitter Bot Using Python and the Twitter API</title>
      <link>http://example.org/python/creating-twitter-bot-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:45:44 +0100</pubDate>
      
      <guid>http://example.org/python/creating-twitter-bot-python/</guid>
      <description>Twitter bots are a fantastic way to drum up a bit of interest in your brand or website and I&amp;rsquo;ve had fantastic results myself building up an audience for the Twitter account specifically for this website. This tutorial will hopefully cover everything it takes to construct your own twitter bot that utilizes the RESTful Twitter API.
 The source code for this Python wrapper for the Twitter API can be found here: Github: Bear&amp;rsquo;s Python-Twitter Wrapper</description>
    </item>
    
    <item>
      <title>Removing HTML Tags from a String with Python</title>
      <link>http://example.org/python/removing-html-from-string/</link>
      <pubDate>Sat, 15 Apr 2017 09:38:07 +0100</pubDate>
      
      <guid>http://example.org/python/removing-html-from-string/</guid>
      <description>This tutorial will demonstrate two different methods as to how one can remove html tags from a string such as the one that we retrieved in my previous tutorial on fetching a web page using python.
Method 1 This method will demonstrate a way that we can remove html tags from a string using regex strings. import re TAG_RE = re.compile(r&amp;#39;&amp;lt;[^&amp;gt;]+&amp;gt;&amp;#39;) def remove_tags(text): return TAG_RE.sub(&amp;#39;&amp;#39;, text) Method 2 This is another method we can use to remove html tags using functionality present in the Python Standard library so there is no need for any imports.</description>
    </item>
    
    <item>
      <title>Python Multiprocessing Tutorial</title>
      <link>http://example.org/python/python-multiprocessing-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:28:06 +0100</pubDate>
      
      <guid>http://example.org/python/python-multiprocessing-tutorial/</guid>
      <description>Last Updated: 1st December, 2018
 Introduction Previously we&amp;rsquo;ve looked at how you can try to achieve concurrency with Python using multithreading, the tutorial of which can be found here: Python Multithreading Tutorial
Now we are going to be having a look at how we can sidestep the limiting Global Interpreter Lock that effectively prevented our multithreaded applications from being truly concurrent by using the multiprocessing Python module.</description>
    </item>
    
    <item>
      <title>The Top Books for Learning to Program in Python</title>
      <link>http://example.org/python/best-books-for-python/</link>
      <pubDate>Sun, 14 Feb 2016 16:11:58 +0530</pubDate>
      
      <guid>http://example.org/python/best-books-for-python/</guid>
      <description>Python is one of the most popular programming languages on the planet. It’s widely regarded as one of the best languages to learn first if you are wanting to get into computer programming.
Dive Into Python Amazon: Dive Into Python Dive into Python is a perfect hands-on guide for experienced programmers to come to grips with the Python programming language. It&amp;rsquo;s succinct in the way it delivers its content and is an excellent reference book that&amp;rsquo;s definitely handy to have close at hand when programming.</description>
    </item>
    
  </channel>
</rss>