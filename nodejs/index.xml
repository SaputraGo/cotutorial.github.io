<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.JS on My New Hugo Site</title>
    <link>http://example.org/nodejs/</link>
    <description>Recent content in Node.JS on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 May 2019 14:08:54 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NodeJS JWT Authentication Tutorial</title>
      <link>http://example.org/nodejs/nodejs-jwt-authentication-tutorial/</link>
      <pubDate>Sat, 25 May 2019 14:08:54 +0000</pubDate>
      
      <guid>http://example.org/nodejs/nodejs-jwt-authentication-tutorial/</guid>
      <description>Welcome fellow programmers! In this tutorial, we are going to be looking at how we can add authentication to our NodeJS applications using JWTs.
We&amp;rsquo;ll be creating a REST API that feature a mixture of authenticated and un-authenticated JSON endpoints and we&amp;rsquo;ll be implementing a nice and simple JWT validation function that will verify incoming requests to ensure they have the appropriate authorization header set and that the value of that header is a verified JSON Web Token!</description>
    </item>
    
    <item>
      <title>NodeJS 404 Checker Tutorial</title>
      <link>http://example.org/nodejs/nodejs-404-checker-tutorial/</link>
      <pubDate>Sun, 11 Mar 2018 14:08:54 +0000</pubDate>
      
      <guid>http://example.org/nodejs/nodejs-404-checker-tutorial/</guid>
      <description>Introduction In this tutorial, we&amp;rsquo;ll be looking at how you can create a nice and simple 404 broken link checker in NodeJS using the axios library as well as cheerio and is-relative-url.
 We will be taking advantage of the async and await keywords in this tutorial. You can find out more on them here: JavaScript async and await Tutorial
 Let&amp;rsquo;s begin by creating a simple async function that will retrieve all of the links from a passed in URL.</description>
    </item>
    
    <item>
      <title>Keeping NodeJS Applications Running Forever Using PM2</title>
      <link>http://example.org/nodejs/keeping-node-apps-running-forever-pm2/</link>
      <pubDate>Sat, 15 Apr 2017 08:38:40 +0100</pubDate>
      
      <guid>http://example.org/nodejs/keeping-node-apps-running-forever-pm2/</guid>
      <description>If you write an application that you need to keep running forever on your servers then this is the tutorial for you. If you&#39;re a software developer working on business critical applications and have to adhere to strict Service Level Agreements (SLAs for short) then you know just how vital it is to have your applications back up and running the second they fall over, every second counts when trying to achieve the 5 9&#39;s or 99.</description>
    </item>
    
    <item>
      <title>Building a Webserver using ExpressJS and NodeJS</title>
      <link>http://example.org/nodejs/creating-a-webserver-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:32:01 +0100</pubDate>
      
      <guid>http://example.org/nodejs/creating-a-webserver-with-nodejs/</guid>
      <description>This is the first tutorial in a series in which we’ll be building up a website for a domain name I’ve been sitting on for a few years now. This is intended to show you everything it takes in order to program your own website using NodeJS and the new Angular2 framework.
Creating a Simple Web Server Using NodeJS and ExpressJS. So the very first thing we need for our site is the foundation and for this we can use a very simple ExpressJS server.</description>
    </item>
    
    <item>
      <title>Executing Shell Scripts With NodeJS</title>
      <link>http://example.org/nodejs/executing-shell-scripts-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:26:02 +0100</pubDate>
      
      <guid>http://example.org/nodejs/executing-shell-scripts-with-nodejs/</guid>
      <description>One of the problems I’ve been faced with recently is how do I go about executing shell scripts using NodeJS. This essentially allows me to query the status of certain processes and utilize the full power of the unix shell commands. Implementation using NodeJS child_process Module Node thankfully already has a module which is designed specifically for executing shell scripts and can be found here in the documentation.
This module essentially creates a child process in which we can execute our shell script and also sets everything up for us so that we can utilize stdin, stdout and stderr within our NodeJS application.</description>
    </item>
    
    <item>
      <title>Reading and Writing Files With NodeJS</title>
      <link>http://example.org/nodejs/reading-writing-files-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:20:02 +0100</pubDate>
      
      <guid>http://example.org/nodejs/reading-writing-files-with-nodejs/</guid>
      <description>In this tutorial I’m going to be showing you exactly how we can read and write files on our local filesystem using NodeJS.
Reading From Files Being able to read from files on your local file system can be hugely useful and there are a number of different things you can build on top of this. A log reader, importing information from spreadsheets and xml files or whatever you can think of, being able to read from files is hugely useful.</description>
    </item>
    
    <item>
      <title>Creating and Deleting Directories With NodeJS</title>
      <link>http://example.org/nodejs/creating-deleting-directories-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:17:02 +0100</pubDate>
      
      <guid>http://example.org/nodejs/creating-deleting-directories-with-nodejs/</guid>
      <description>In this tutorial I’ll be showing you how to create and delete directories using NodeJS and we’ll be using the mkdirp and the rimraf node package in order to achieve this.
Creating Directories In order to create a directory we’ll need first download the mkdirp npm package, we can do this like so:
npm install mkdirp --local  This should install the mkdirp package as well as any of it’s dependencies in a node_modules directory within your current directory.</description>
    </item>
    
    <item>
      <title>Editing XML Files With NodeJS</title>
      <link>http://example.org/nodejs/editing-xml-files-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:14:10 +0100</pubDate>
      
      <guid>http://example.org/nodejs/editing-xml-files-with-nodejs/</guid>
      <description>XML files are still widely used in enterprise programs and being able to manipulate xml files can be incredibly important.
XML2JS Node Package In this tutorial I’ll be demonstrating how you can easily manipulate XML files using the xml2js node package. This package is great due to the fact it reads in an xml string and converts it to a far easier to use json structure. Reading in our XML File Create a new js file and type the following: var fs = require(&amp;#34;fs&amp;#34;); fs.</description>
    </item>
    
    <item>
      <title>Converting CSV to JSON using NodeJS</title>
      <link>http://example.org/nodejs/converting-csv-json-node/</link>
      <pubDate>Sun, 09 Apr 2017 21:29:02 +0100</pubDate>
      
      <guid>http://example.org/nodejs/converting-csv-json-node/</guid>
      <description>In this tutorial I’m going to be showing you how we can create a NodeJS script that takes in a csv file and outputs the contents of that CSV file as JSON.
In order to do this conversion we’ll be using the csvtojson node package. This package will do pretty much all the heavy lifting for us and having used it in production environments I can say that it’s remarkably easy to implement into a project.</description>
    </item>
    
    <item>
      <title>Writing Your Own Logging System NodeJS</title>
      <link>http://example.org/nodejs/writing-your-own-logging-system-nodejs/</link>
      <pubDate>Sun, 09 Apr 2017 21:26:14 +0100</pubDate>
      
      <guid>http://example.org/nodejs/writing-your-own-logging-system-nodejs/</guid>
      <description>Logging - Why Is It Important? Logs are an invaluable resource when it comes to effectively maintaining applications. Think of them as breadcrumbs you can follow to find out where your application has faltered. In simple applications this may be unnecessary and overkill, but in production applications that work with highly sensitive and valuable data, logs are priceless.
Logging in NodeJS Applications In this tutorial I’m going to be demonstrating a quick and simple method of logging a very simple server program.</description>
    </item>
    
    <item>
      <title>Monitoring Server Stats With NodeJS</title>
      <link>http://example.org/nodejs/monitoring-server-stats-with-nodejs/</link>
      <pubDate>Sun, 09 Apr 2017 21:25:15 +0100</pubDate>
      
      <guid>http://example.org/nodejs/monitoring-server-stats-with-nodejs/</guid>
      <description>In production environments having visibility over how your systems are performing is vital. Being able to watch memory usage and ensure that servers are not being brought down by memory leaks and greedy programs can be hugely beneficial and can help you deal with issues before they become real headaches.
In this tutorial I’m going to be demonstrating how you can build a simple, yet effective NodeJS based monitoring system that will monitor your servers CPU usage, the total memory for a system and the current free memory for a system, the system uptime and possibly most importantly the average load for the last 15 minutes.</description>
    </item>
    
  </channel>
</rss>