<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on CoTutorial</title>
    <link>https://cotutorial.github.io/tags/rust/</link>
    <description>Recent content in rust on CoTutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-ID</language>
    <lastBuildDate>Sat, 01 Sep 2018 15:09:49 +0100</lastBuildDate>
    
	<atom:link href="https://cotutorial.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using RwLock and CondVars in Rust</title>
      <link>https://cotutorial.github.io/rust/using-rwlocks-and-condvars-rust/</link>
      <pubDate>Sat, 01 Sep 2018 15:09:49 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/rust/using-rwlocks-and-condvars-rust/</guid>
      <description>Read many, write exclusive locks – RwLock Consider a situation where you have a resource that must be manipulated only a single thread at a time, but is safe to be queried by many—that is, you have many readers and only one writer.
While you could protect this resource with a mutex, the trouble is that the mutex makes no distinction between its lockers; every thread will be forced to wait, no matter what their intentions.</description>
    </item>
    
    <item>
      <title>Learning Generics in Rust</title>
      <link>https://cotutorial.github.io/rust/learning-generics-in-rust/</link>
      <pubDate>Sat, 01 Sep 2018 14:52:49 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/rust/learning-generics-in-rust/</guid>
      <description>Generics are a facility to write code for multiple contexts with different types, and parameterization allows the programmer to write code that makes fewer assumptions about the data structures and code segments involved in the code&amp;rsquo;s definition.
For example, a very ambiguous concept would be the concept of addition. When a programmer writes a + b, what does that mean? In Rust, the Add trait can be implemented for just about any type.</description>
    </item>
    
    <item>
      <title>Working with JSON in Rust - Tutorial</title>
      <link>https://cotutorial.github.io/rust/rust-working-with-json-tutorial/</link>
      <pubDate>Mon, 25 Dec 2017 11:51:47 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/rust/rust-working-with-json-tutorial/</guid>
      <description>This tutorial was built using Rust Version: 1.22.1
 Introduction Most programming languages support JSON as part of the core language by default. It&amp;rsquo;s an incredibly popular data format that is used in millions of different applications.
In this tutorial we&amp;rsquo;ll be looking at how you can effectively work with JSON objects within our own Rust based systems. In order to do this we&amp;rsquo;ll be creating a very simple REST API that will do a variety of different things with JSON objects.</description>
    </item>
    
    <item>
      <title>The Top Programming Books for Learning Rust</title>
      <link>https://cotutorial.github.io/rust/best-books-for-learning-rust/</link>
      <pubDate>Sun, 17 Dec 2017 15:07:54 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/rust/best-books-for-learning-rust/</guid>
      <description>In this article we will be looking at the best books you can buy to help you learn the basics of Rust Systems Development.
Rust is an incredibly fast systems programming language that is used by a very wide range of organizations such as mozilla (the original creators of the language), Atlassion, Dropbox and npm.
Programming Rust: Fast, Safe Systems Development Programming Rust: Fast, Safe Systems Development (1st Edition) is a fantastic resource for those of you willing to pick up the relatively new language.</description>
    </item>
    
  </channel>
</rss>