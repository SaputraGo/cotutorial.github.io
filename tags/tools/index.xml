<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on My New Hugo Site</title>
    <link>http://example.org/tags/tools/</link>
    <description>Recent content in Tools on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Aug 2019 08:05:10 +0100</lastBuildDate>
    
	<atom:link href="http://example.org/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Improving Your Go Development Workflow With Git Hooks</title>
      <link>http://example.org/golang/improving-go-workflow-with-git-hooks/</link>
      <pubDate>Fri, 02 Aug 2019 08:05:10 +0100</pubDate>
      
      <guid>http://example.org/golang/improving-go-workflow-with-git-hooks/</guid>
      <description>Git hooks are a pretty powerful way of improving your development workflow without having to remember to run additional scripts or perform additional tasks. In this article, we are going to be taking a look at how you can define your own simple git hooks within a project repository that can automatically perform the task of linting + formating your Go code.
This fairly simple example should give you a flavour as to how you can leverage git hooks for your own devious plans.</description>
    </item>
    
    <item>
      <title>Makefiles for Go Developers</title>
      <link>http://example.org/golang/makefiles-for-go-developers/</link>
      <pubDate>Thu, 06 Jun 2019 20:02:23 +0000</pubDate>
      
      <guid>http://example.org/golang/makefiles-for-go-developers/</guid>
      <description>In this tutorial, we are going to be looking at how you, as a Go developer, can leverage the wonderful bit of technology that is Makefiles for fame and fortune when developing your own Go applications.
What are Makefiles? Let&amp;rsquo;s start by looking at what Makefiles are first of all. Makefiles are an incredibly useful automation tool that you can use to run and build not just your Go applications, but for most programming languages.</description>
    </item>
    
  </channel>
</rss>