<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>resiliency on My New Hugo Site</title>
    <link>http://example.org/tags/resiliency/</link>
    <description>Recent content in resiliency on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Nov 2017 21:21:51 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/resiliency/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An Introduction To Autoscaling Your Website or Service</title>
      <link>http://example.org/cloud/an-introduction-to-autoscaling-your-website/</link>
      <pubDate>Thu, 30 Nov 2017 21:21:51 +0000</pubDate>
      
      <guid>http://example.org/cloud/an-introduction-to-autoscaling-your-website/</guid>
      <description>In this article we are going to look at autoscalers. We are going to look at how they work and how they can enable your service to dynamically grow and shrink to cope with variable demands.
The Scenario Imagine the scenario where you write a RESTful API that at first just requires a single server instance on AWS in order to sustain the initial demand placed on it. After a couple of weeks somebody who appreciates the your service posts it on a popular site such as /r/programming and you see demand double.</description>
    </item>
    
    <item>
      <title>How to use Terraform, Go, and AWS to build a scalable and resilient REST API</title>
      <link>http://example.org/cloud/build-scalable-rest-api-go-terraform-aws/</link>
      <pubDate>Thu, 30 Nov 2017 21:21:51 +0000</pubDate>
      
      <guid>http://example.org/cloud/build-scalable-rest-api-go-terraform-aws/</guid>
      <description>I&amp;rsquo;ve recently been exploring the power of Terraform - and wanted to apply what I&amp;rsquo;ve learned to build a scalable and resilient REST API. In just a few simple steps, we&amp;rsquo;ll be using Terraform to provision our underlying AWS infrastructure and deploy our microservice developed with Go. Creating the RESTful API with GO To get started, let&amp;rsquo;s build and compile a simple codebase using Go. Once we build this microservice, we&amp;rsquo;ll provision an AWS EC2 instance for our execution environment.</description>
    </item>
    
    <item>
      <title>Basic Website Resiliency Patterns - Load Balancers</title>
      <link>http://example.org/cloud/basic-website-resiliency-load-balancers/</link>
      <pubDate>Wed, 29 Nov 2017 19:48:57 +0000</pubDate>
      
      <guid>http://example.org/cloud/basic-website-resiliency-load-balancers/</guid>
      <description>In this article we are going to be looking at the concept of load balancers. We&amp;rsquo;ll be discussing what they are and how you can effectively use them to improve the reliability and resiliency of your websites and REST services and decrease downtime.
Load Balancers - What Are They? So the first thing you may be asking is, &amp;ldquo;what is a load balancer?&amp;rdquo;. We&amp;rsquo;ll to answer your question, load balancers enable us to effectively balance all incoming traffic/requests to a given website or service across multiple instances of your website or service.</description>
    </item>
    
  </channel>
</rss>