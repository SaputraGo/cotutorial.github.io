<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>filesystem on My New Hugo Site</title>
    <link>http://example.org/tags/filesystem/</link>
    <description>Recent content in filesystem on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jan 2019 11:21:58 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/filesystem/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working With The File System in Python</title>
      <link>http://example.org/python/python-working-with-file-system/</link>
      <pubDate>Wed, 20 Dec 2017 18:41:30 +0000</pubDate>
      
      <guid>http://example.org/python/python-working-with-file-system/</guid>
      <description>This tutorial was written using Python 3.6
 Being able to work with the file system and do things like traverse directories or retrieve every file can be very handy in a number of different situations.
In this tutorial we&amp;rsquo;ll be taking a look at the various ways you can work with the file system in Python. Hopefully this will give you a decent grasp of some of the cool things you can do very quickly and succinctly using the Python programming language.</description>
    </item>
    
    <item>
      <title>Reading And Writing To Files in Go</title>
      <link>http://example.org/golang/reading-writing-files-in-go/</link>
      <pubDate>Sat, 17 Feb 2018 21:56:17 +0000</pubDate>
      
      <guid>http://example.org/golang/reading-writing-files-in-go/</guid>
      <description>Note - If you are interested in working with JSON in Go, you may also like my other tutorial - Go JSON Tutorial
 Within this tutorial, we are going to look at how you can effectively read and write to files within your filesystem using the go programming language.
The method we are going to use to read and write to these files will be file format-agnostic. What this means is that you&amp;rsquo;ll be able to use the techniques we&amp;rsquo;ll be covering in order to read and write, .</description>
    </item>
    
    <item>
      <title>Working with Temporary Files and Directories in Go 1.11</title>
      <link>http://example.org/golang/temporary-files-directories-go-111/</link>
      <pubDate>Thu, 10 Jan 2019 11:21:58 +0000</pubDate>
      
      <guid>http://example.org/golang/temporary-files-directories-go-111/</guid>
      <description>Go 1.11 brought some very cool new functionality such as the experimental Go Modules feature as well as the ability to create temporary files and directories using the new TempFile and TempDir functions within the ioutil package.
The temporary files and directories created from these function calls are globally unique and this is awesome as it simplifies the way we handle hundreds or even thousands of files within our Go programs.</description>
    </item>
    
  </channel>
</rss>