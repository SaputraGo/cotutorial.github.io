<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on CoTutorial</title>
    <link>https://cotutorial.github.io/tags/testing/</link>
    <description>Recent content in testing on CoTutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-ID</language>
    <lastBuildDate>Sat, 13 Oct 2018 09:53:51 +0100</lastBuildDate>
    
	<atom:link href="https://cotutorial.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An Introduction to Testing in Go</title>
      <link>https://cotutorial.github.io/golang/intro-testing-in-go/</link>
      <pubDate>Fri, 09 Feb 2018 17:27:18 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/intro-testing-in-go/</guid>
      <description>Testing is hugely important in all software. Being able to ensure the correctness of your code and ensure that any changes you make don&amp;rsquo;t end up breaking anything else in different parts of your codebase is hugely important.
By taking the time to adequately test your go programs you allow yourself to develop faster with a greater sense of confidence that what you are developing will continue to work when you release it to production.</description>
    </item>
    
    <item>
      <title>Advanced Go Testing Tutorial</title>
      <link>https://cotutorial.github.io/golang/advanced-go-testing-tutorial/</link>
      <pubDate>Wed, 29 Aug 2018 21:57:53 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/advanced-go-testing-tutorial/</guid>
      <description>Welcome fellow coders! In this tutorial, we are going to be taking a look at selection of more advanced testing practices used by the likes of the Go core language developers and in popular production-level tools.
I feel this approach, of actually studying what has been done in a production system, will hopefully give you some insight into the best ways to test your own production-level Go programs.
 Note - If you are entirely new to testing your Go-based programs, then I suggest you check out my other tutorial: an introduction to testing in go</description>
    </item>
    
    <item>
      <title>An Introduction to Benchmarking Your Go Programs</title>
      <link>https://cotutorial.github.io/golang/benchmarking-your-go-programs/</link>
      <pubDate>Sat, 10 Feb 2018 08:48:40 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/benchmarking-your-go-programs/</guid>
      <description>In this article, we are going to be having a look at benchmarking. More specifically, we are going to be looking at how you can benchmark your Go-based programs.
In times where performance is important, being able to benchmark how your program performs and analyze where potential bottlenecks are, is really valuable. By understanding where these bottlenecks lie, we can more effectively determine where to focus our efforts in order to improve the performance of our systems.</description>
    </item>
    
    <item>
      <title>Getting Started With PyUnit Testing</title>
      <link>https://cotutorial.github.io/python/getting-started-with-pyunit-testing/</link>
      <pubDate>Sun, 19 Nov 2017 10:18:54 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/getting-started-with-pyunit-testing/</guid>
      <description>This tutorial is currently under construction.
This tutorial was built using Python 3.6
 If you are starting to improve your Python development skills, the one aspect that must be up to scratch is your ability to test your code. Unit testing your code can help to improve the confidence you have whenever you are trying to make any patches, bug fixes or just changes in general.
If your tests adequately test that your code behaves the way you expect it to, whenever you make a change, you can retest and ensure that your code still behaves the way you expect it with your incorporated changes.</description>
    </item>
    
    <item>
      <title>Improving Your Go Tests and Mocks With Testify</title>
      <link>https://cotutorial.github.io/golang/improving-your-tests-with-testify-go/</link>
      <pubDate>Sat, 13 Oct 2018 09:53:51 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/improving-your-tests-with-testify-go/</guid>
      <description>Assertions are something that I genuinely feel the standard library in Go is missing. You can most definitely achieve the same results with the likes of if comparisons and whatever else, but it&amp;rsquo;s not the cleanest way to write your test files.
This is where the likes of stretchr/testify comes in to save the day. This package has quickly become one of the most popular testing packages, if not the most popular testing package for Go developers around the world.</description>
    </item>
    
  </channel>
</rss>