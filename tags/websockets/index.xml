<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebSockets on My New Hugo Site</title>
    <link>http://example.org/tags/websockets/</link>
    <description>Recent content in WebSockets on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Mar 2019 20:40:33 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/websockets/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Websocket Tutorial</title>
      <link>http://example.org/golang/go-websocket-tutorial/</link>
      <pubDate>Thu, 14 Mar 2019 20:40:33 +0000</pubDate>
      
      <guid>http://example.org/golang/go-websocket-tutorial/</guid>
      <description>Hi Fellow Devs! In this tutorial, we are going to be looking at how we can use WebSockets within our own Go-based programs to do some cool real-time stuff.
By the end of this tutorial, we should have covered the following:
 What WebSockets are How we can build simple WebSocket Applications in Go  For the purpose of this tutorial, we&amp;rsquo;ll be working with the gorilla/websocket package as I&amp;rsquo;ve used it personally in a few production applications to great success.</description>
    </item>
    
    <item>
      <title>Building a Real-time YouTube Subscriber Monitor in Go</title>
      <link>http://example.org/golang/building-realtime-youtube-sub-monitor-go/</link>
      <pubDate>Sat, 23 Feb 2019 09:45:55 +0000</pubDate>
      
      <guid>http://example.org/golang/building-realtime-youtube-sub-monitor-go/</guid>
      <description>Welcome Everyone! In this tutorial, we are going to be having a bit of fun and we are going to be creating a real-time YouTube stats monitoring system in Go.
So, we are going to be looking at a number of different topics within this tutorial such as creating a WebSocket server and using WebSockets to communicate in real-time with a frontend application, as well as how you can interact with an existing REST API to get the subscriber stats we need.</description>
    </item>
    
  </channel>
</rss>