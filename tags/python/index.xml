<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on My New Hugo Site</title>
    <link>http://example.org/tags/python/</link>
    <description>Recent content in python on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Feb 2018 10:23:36 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python Based Lambda Tutorial</title>
      <link>http://example.org/cloud/aws/python-based-lambda-tutorial/</link>
      <pubDate>Sat, 24 Feb 2018 10:23:36 +0000</pubDate>
      
      <guid>http://example.org/cloud/aws/python-based-lambda-tutorial/</guid>
      <description>If you&amp;rsquo;ve been following my Medium Blog recently, you&amp;rsquo;ll know that I&amp;rsquo;m a huge fan of Serverless and I genuinely believe that it will start to seriously take off in terms of popularity in the years to come.
In this tutorial, we are going to be writing a very simple Python based AWS Lambda function that we&amp;rsquo;ll then deploy using the serverless.com CLI.
Installing Serverless In order to install the serverless CLI you can do the following:</description>
    </item>
    
    <item>
      <title>Data Structures - Sets For Beginners</title>
      <link>http://example.org/compsci/data-structures/sets-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:22:37 +0000</pubDate>
      
      <guid>http://example.org/compsci/data-structures/sets-for-beginners/</guid>
      <description>Under Construction
 In this tutorial we are going to look at the set data structure in computer science and how you can leverage it within your applications. We&amp;rsquo;ll be covering this concept using the Python programming language.
Sets in Mathematics Understanding Sets and basic Set Theory in Mathematics is a fundamental skill. The idea of a Set has been translated directly from mathematics into programming languages such as Python, and with this Set data structure, comes some incredibly useful functions such as union(), issubset(), intersection(), isdisjoint() that have also been translated directly over from Mathematics.</description>
    </item>
    
    <item>
      <title>Data Structures - Priority Queues For Beginners</title>
      <link>http://example.org/compsci/data-structures/priority-queues-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:22:26 +0000</pubDate>
      
      <guid>http://example.org/compsci/data-structures/priority-queues-for-beginners/</guid>
      <description>This article uses Python 3.6 in order to demonstrate some of the concepts.
 In this article we&amp;rsquo;ll be covering Priority Queues and how they differ from your standard Queue data structure.
Why Do We Need Them? In order to explain this better, let&amp;rsquo;s think about a real-world example where a normal queueing system may not be the best idea. Let&amp;rsquo;s imagine you were implementing a queuing system for a hospital&amp;rsquo;s Accident and Emergency ward.</description>
    </item>
    
    <item>
      <title>Data Structures - Arrays for Beginners</title>
      <link>http://example.org/compsci/data-structures/arrays-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:03:08 +0000</pubDate>
      
      <guid>http://example.org/compsci/data-structures/arrays-for-beginners/</guid>
      <description>Under Construction
 In this article we are going to be looking at the array data structure. We&amp;rsquo;ll be looking at some of the fundamental characteristics of the structure and how we can best leverage this within our own programs.
Intro Arrays represent a collection of elements, these elements can be of different types; integers, characters, strings, floating-point values and even composite types such as arrays which allows you to create nested array structures should you wish.</description>
    </item>
    
    <item>
      <title>Data Structures - Queues For Beginners</title>
      <link>http://example.org/compsci/data-structures/queues-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:02:47 +0000</pubDate>
      
      <guid>http://example.org/compsci/data-structures/queues-for-beginners/</guid>
      <description>Under Construction
 In this tutorial we are going to look at the queue data structure. We&amp;rsquo;ll take a look at how this data structure can be used for various tasks and the various sort of things you can do with queues.
Introduction The queue data structure is typically used in scenarios where you want things to be processed in the same order that they were inputted into a system.</description>
    </item>
    
    <item>
      <title>Data Structures - Graphs For Beginners</title>
      <link>http://example.org/compsci/data-structures/compsci-graphs-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:02:28 +0000</pubDate>
      
      <guid>http://example.org/compsci/data-structures/compsci-graphs-for-beginners/</guid>
      <description>Under Construction
 Graphs and graph traversal algorithms are a cornerstone of every computer scientists education. Every reputable university will feature one or more classes dedicated to this topic and with good reason, the theory covered within these topics branches into a number of practical uses.
If you are interested in going into something like Game Development then graphs feature pretty heavily.
 Game developers typically use algorithms such as the A* search algorithm in order to implement basic AI within their games.</description>
    </item>
    
    <item>
      <title>Data Structures - Stacks For Beginners</title>
      <link>http://example.org/compsci/data-structures/stacks-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 21:29:51 +0000</pubDate>
      
      <guid>http://example.org/compsci/data-structures/stacks-for-beginners/</guid>
      <description>Under Construction
 In this tutorial, we are going to be taking a look at stacks in Computer Science and how they can be used to effectively solve problems that we may face as software developers.
Stacks - The Theory I think the best way to imagine the stack data structure is to imagine a stack of pancakes. Typically, when you add a new pancake, it has to go on to the top of the existing pile.</description>
    </item>
    
    <item>
      <title>Implementing Quicksort in Python</title>
      <link>http://example.org/compsci/sorting/quicksort-in-python/</link>
      <pubDate>Mon, 20 Nov 2017 18:09:47 +0000</pubDate>
      
      <guid>http://example.org/compsci/sorting/quicksort-in-python/</guid>
      <description>This tutorial was built using Python 3.6
 Quicksort is one of the most popular sorting algorithms you will come across in computer science. This is because of it&amp;rsquo;s average case performance of O(n log n).
The Quicksorting algorithm uses a divide-and-conquer approach and recursively partitions the elements in an unsorted array around a randomly picked pivot element.
 A Random Pivot element is chosen from our unsorted array.</description>
    </item>
    
    <item>
      <title>Implementing Selection Sort in Python</title>
      <link>http://example.org/compsci/sorting/selection-sort-in-python/</link>
      <pubDate>Mon, 20 Nov 2017 18:09:47 +0000</pubDate>
      
      <guid>http://example.org/compsci/sorting/selection-sort-in-python/</guid>
      <description>Welcome all! In this tutorial, we are going to be looking at how you can implement the selection sort in Python!
Theory How does the selection sorting algorithm work? Well it sorts data by finding the smallest item and swapping it into the array in the first unsorted location.
 It enumerates the array from the first unsorted element to the end Identifies the smallest item Swaps the smallest item with the first unsorted item  The selection sorting algorithm typically performs better than the bubble sort and typically worse than the insertion sorting algorithm.</description>
    </item>
    
    <item>
      <title>Getting Started With Tries in Python</title>
      <link>http://example.org/compsci/data-structures/getting-started-with-tries-in-python/</link>
      <pubDate>Sun, 19 Nov 2017 17:17:29 +0000</pubDate>
      
      <guid>http://example.org/compsci/data-structures/getting-started-with-tries-in-python/</guid>
      <description>This tutorial uses Python 3.6 in order to convey the concepts that I will be covering.
 A Trie in computer science is a tree structure that allows you to do things such as very quick lookup of words within the english language. Typically if you were to write a word processor that did spell checks against words in a document, you would implement a trie and perform a very quick lookup to check whether or not the words in your word document are indeed valid words.</description>
    </item>
    
    <item>
      <title>Data Structures - Hash Tables For Beginners</title>
      <link>http://example.org/compsci/data-structures/hash-tables-for-beginners/</link>
      <pubDate>Sun, 19 Nov 2017 08:57:29 +0000</pubDate>
      
      <guid>http://example.org/compsci/data-structures/hash-tables-for-beginners/</guid>
      <description>This tutorial will use Python 3.6 to convey the concepts covered.
 So, in this tutorial, we are going to be looking at Hash Tables and how they can be used within our applications for fame and fortune. By the end of this tutorial, you should have a solid grasp of these Hash Tables and how they work under the covers.
An Introduction So, the first place we should start with is, what are hash tables?</description>
    </item>
    
    <item>
      <title>Bit Manipulation For Beginners</title>
      <link>http://example.org/compsci/bit-manipulation-for-beginners/</link>
      <pubDate>Sat, 18 Nov 2017 17:42:32 +0000</pubDate>
      
      <guid>http://example.org/compsci/bit-manipulation-for-beginners/</guid>
      <description>In this tutorial we will be taking a look at bit manipulation and how you can use it to optimize some of the different parts of your systems when you are programming.
 In this tutorial we will be using Python 3.6 in order to demonstrate some of the concepts covered.
 Shift Left By shifting left we are essentially multiplying our original number by 2 * the number of times we shift left.</description>
    </item>
    
    <item>
      <title>Memoization For Beginners</title>
      <link>http://example.org/compsci/memoization-for-beginners/</link>
      <pubDate>Sat, 18 Nov 2017 16:10:25 +0000</pubDate>
      
      <guid>http://example.org/compsci/memoization-for-beginners/</guid>
      <description>In this tutorial we are going to look at a concept in computer science called memoization. This is a really cool concept that allows us to optimize the runtime performance of some of our recursive algorithms by effectively caching the results of previous computations so that they don&amp;rsquo;t have to be continuously re-computed.
The Fibonacci Example Calculating Fibonacci in a recursive manner is quite possibly the best example I&amp;rsquo;ve come across when it comes to showing the power of memoization.</description>
    </item>
    
    <item>
      <title>Implementing The Insertion Sort Algorithm in Python</title>
      <link>http://example.org/compsci/sorting/insertion-sort-in-python/</link>
      <pubDate>Wed, 15 Nov 2017 18:12:50 +0000</pubDate>
      
      <guid>http://example.org/compsci/sorting/insertion-sort-in-python/</guid>
      <description>This tutorial was built using Python 3.6
 In this tutorial we are going to be taking a look at the insertion sorting algorithm and how it works as well as how you can implement this algorithm in the Python programming language.
Insertion Sorting So the insertion sorting algorithm is a well known sorting algorithm that can sort an unsorted array in a worst case time of O(N^2) time.</description>
    </item>
    
    <item>
      <title>Implementing The Bubble Sort Algorithm in Python</title>
      <link>http://example.org/compsci/sorting/bubble-sort-in-python/</link>
      <pubDate>Wed, 15 Nov 2017 18:10:37 +0000</pubDate>
      
      <guid>http://example.org/compsci/sorting/bubble-sort-in-python/</guid>
      <description>Note - This tutorial was built on top of Python 3.6
 In this tutorial we are going to be taking a quick look at the bubble sort sorting algorithm. This algorithm is another very well known sorting algorithm that is quite often referenced in technical interviews. It is amongst the worst performing sorting algorithm with an average and a worst case sorting complexity of O(N^2).
How It Works Bubble sort works by constantly iterating through an unsorted array and swapping values within that array until such times as no swaps are made within a full pass through the array.</description>
    </item>
    
  </channel>
</rss>