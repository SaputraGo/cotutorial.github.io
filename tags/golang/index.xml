<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on CoTutorial</title>
    <link>https://cotutorial.github.io/tags/golang/</link>
    <description>Recent content in golang on CoTutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-ID</language>
    <lastBuildDate>Mon, 19 Mar 2018 11:05:52 +0000</lastBuildDate>
    
	<atom:link href="https://cotutorial.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Part 1 - Initial Setup</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-1-initial-setup/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-1-initial-setup/</guid>
      <description>We&amp;rsquo;ll start off this course by setting up both of our projects. Once we&amp;rsquo;ve got the fairly boring setup out of the way, we can begin to add new functionality and build up our application and see some positive results!
Goals By the end of this part of the tutorial series, you will have:
 Created the basic Go application within a backend/ directory. Created a basic ReactJS application within a frontend/ directory.</description>
    </item>
    
    <item>
      <title>Part 2 - Simple Communication</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-2-simple-communication/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-2-simple-communication/</guid>
      <description>Note - This post is part 2 of a series on building a chat application in Go with ReactJS. You can find part 1 here - Part 1 - Initial Setup
 So, now that we have our basic frontend and backend set up, it&amp;rsquo;s time to actually do something with them.
In this part of the series, we&amp;rsquo;ll be implementing a basic WebSocket server which will listen for messages and write them back to via the same WebSocket.</description>
    </item>
    
    <item>
      <title>Part 3 - Designing our Frontend</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-3-designing-our-frontend/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-3-designing-our-frontend/</guid>
      <description>Note - This post is part 3 of a series on building a chat application in Go with ReactJS. You can find part 2 here - Part 2 - Simple Communication
 In this part of the series, we&amp;rsquo;re going to be looking at improving our frontend and fleshing out the application so that it looks and feels like a decent online chat application.
By the end of this part of the series, you should have a really solid looking frontend which looks a little something like this:</description>
    </item>
    
    <item>
      <title>Part 4 - Handling Multiple Clients</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-4-handling-multiple-clients/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-4-handling-multiple-clients/</guid>
      <description>Note - This post is part 4 of a series on building a chat application in Go with ReactJS. You can find part 3 here - Part 3 - Designing Our Frontend
 It&amp;rsquo;s time to implement the ability to handle multiple clients and broadcast any received messages to every connected client. By the end of this part of the series we&amp;rsquo;ll have:
 implemented a Pool mechanism that will effectively allow us to track how many connections we have into our WebSocket server.</description>
    </item>
    
    <item>
      <title>Part 5 - Improving the Frontend</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-5-improved-frontend/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-5-improved-frontend/</guid>
      <description>Note - This post is part 5 of a series on building a chat application in Go with ReactJS. You can find part 4 here - Part 4 - Handling Multiple Clients
 Welcome to the 5th part of this series! If you&amp;rsquo;ve made it this far then I sincerely hope you are enjoying learning new Go concepts and building up your own chat system in Go and React!</description>
    </item>
    
    <item>
      <title>Part 6 - Dockerizing your Backend</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-6-dockerizing-your-backend/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-6-dockerizing-your-backend/</guid>
      <description>Note - This post is part 6 of a series on building a chat application in Go with ReactJS. You can find part 5 here - Part 5 - Improving the Frontend
 In this part of the series, we are going to be focusing on adding Docker to our backend application.
Why are we doing this now you might ask? Well, before we look into things like authentication, load balancing and deployment, it&amp;rsquo;ll be good to have a standard way of deploying our application using containerization technology.</description>
    </item>
    
  </channel>
</rss>