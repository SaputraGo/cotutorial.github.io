<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on My New Hugo Site</title>
    <link>http://example.org/tags/java/</link>
    <description>Recent content in java on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Apr 2017 09:30:45 +0100</lastBuildDate>
    
	<atom:link href="http://example.org/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AABB Collision Detection Tutorial</title>
      <link>http://example.org/gamedev/aabb-collision-detection-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:30:45 +0100</pubDate>
      
      <guid>http://example.org/gamedev/aabb-collision-detection-tutorial/</guid>
      <description>AABB Collision Detection or &#34;Axis-Aligned Bounding Box&#34; Collision detection as it stands for is the simplest form, or one of the simplest forms of collision detection that you can implement in a 2D game. If you have an object that is axis-aligned, ie. not rotated and doesn&#39;t need tight collision detection then AABB collision detection is the route you are going to want to take.
Implementing AABB Collision Detection in Java In order to be able to accurately perform Axis-Aligned Bounding Box collision detection you&#39;ll need at minimum the 4 following characteristics of the object you are wanting to make collidable.</description>
    </item>
    
    <item>
      <title>Breadth First Search Algorithm Tutorial with Java</title>
      <link>http://example.org/artificial-intelligence/breadth-first-search-java/</link>
      <pubDate>Sat, 15 Apr 2017 09:23:35 +0100</pubDate>
      
      <guid>http://example.org/artificial-intelligence/breadth-first-search-java/</guid>
      <description>This lesson is part of the course: Artificial Intelligence
 Uninformed Search vs Informed / Heuristic Search The next couple of algorithms we will be covering in this Artificial Intelligence course can be classed as either:
uninformed or blind searches: in which our algorithms have no additional information about states beyond that provided in the problem definition.
Informed or Heuristic searches: in which our algorithms have some extra knowledge about the problem domain and can distinguish whether or not one non-goal state is “more promising” than another.</description>
    </item>
    
    <item>
      <title>Depth First Search in Java</title>
      <link>http://example.org/artificial-intelligence/depth-first-search/</link>
      <pubDate>Sat, 15 Apr 2017 09:23:35 +0100</pubDate>
      
      <guid>http://example.org/artificial-intelligence/depth-first-search/</guid>
      <description>Depth First Search DFS is another uninformed graph traversal algorithm which produces a non-optimal solution but can be useful for traversing quickly into deeper search domains. Depth first search is very similar to the previously covered breadth first search that we covered in this tutorial: breadth first search in Java
How it Works With Depth first search you start at the top most node in a tree and then follow the left most branch until there exists no more leafs in that branch.</description>
    </item>
    
    <item>
      <title>Depth Limited Search in Java</title>
      <link>http://example.org/artificial-intelligence/depth-limited-search-in-java/</link>
      <pubDate>Sat, 15 Apr 2017 09:23:35 +0100</pubDate>
      
      <guid>http://example.org/artificial-intelligence/depth-limited-search-in-java/</guid>
      <description>About Depth Limited Searching Traditional depth first search could be deemed useless in infinite state spaces as they will continue to traverse down the leftmost branch infinitely. This essentially means that the path to the goal node might never be found, in order to combat this we can add a limit to the depth that our search recurses down the tree, this essentially transforms our depth first algorithm into a depth-limited algorithm.</description>
    </item>
    
  </channel>
</rss>