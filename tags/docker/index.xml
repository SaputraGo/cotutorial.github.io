<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on My New Hugo Site</title>
    <link>http://example.org/tags/docker/</link>
    <description>Recent content in docker on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Mar 2019 11:16:25 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Multi-Stage Docker Tutorial</title>
      <link>http://example.org/golang/go-multi-stage-docker-tutorial/</link>
      <pubDate>Sat, 16 Mar 2019 11:16:25 +0000</pubDate>
      
      <guid>http://example.org/golang/go-multi-stage-docker-tutorial/</guid>
      <description>Welcome fellow coders! In this tutorial, we are going to be looking at multi-stage Docker images and how you can use them to minimize the size of the container needed for your production Go applications.
By the end of this tutorial, we will have covered the following concepts:
 What Multi-stage Dockerfiles are. How we can build simple multi-stage Dockerfiles for our Go Apps  Docker is a seriously power containerization technology that can be used to easily spin up isolated and reproducible environments in which our applications can be built and run.</description>
    </item>
    
    <item>
      <title>Containerizing your Go Applications with Docker - Tutorial</title>
      <link>http://example.org/golang/go-docker-tutorial/</link>
      <pubDate>Sat, 02 Mar 2019 22:36:27 +0000</pubDate>
      
      <guid>http://example.org/golang/go-docker-tutorial/</guid>
      <description>Docker is a truly excellent bit of tech that allows us to specify the environment in which we want all of our applications to live within a simple Dockerfile. This effectively allows for easier collaboration and rids us of the &amp;ldquo;it works on my machine&amp;rdquo; problem that is soo prevalent in development teams across the globe.
As such, I felt it would be a great idea to write a tutorial on how you can effectively containerize your Go applications using the Docker containerization technology.</description>
    </item>
    
    <item>
      <title>Docker for Go Developers</title>
      <link>http://example.org/docker/docker-for-go-developers/</link>
      <pubDate>Sat, 14 Jul 2018 22:33:43 +0100</pubDate>
      
      <guid>http://example.org/docker/docker-for-go-developers/</guid>
      <description>In this tutorial, we are going to look at how we can leverage Docker as Go developers.
By the end of this tutorial, we will have covered the following topics:
 Creating a Simple Dockerfile for a simple Go Program Mounting Volumes in Docker Auto-build on changes  Our Basic Go Program For the purpose of this tutorial, we&amp;rsquo;ll be using the code from my go WebServer tutorial
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;html&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.</description>
    </item>
    
    <item>
      <title>Working With Docker and NodeJS - Tutorial</title>
      <link>http://example.org/docker/working-with-docker-nodejs/</link>
      <pubDate>Sun, 27 May 2018 21:40:20 +0100</pubDate>
      
      <guid>http://example.org/docker/working-with-docker-nodejs/</guid>
      <description>The full source code for this tutorial can be found here: TutorialEdge/Docker/node-docker
 In this tutorial, we are going to be looking at how you can dockerize an existing NodeJS application and ultimately leverage the benefits of Docker. We&amp;rsquo;ll be creating a Docker image that will dynamically pick up changes to a NodeJS application and automatically recompile and rerun our application without having to rebuild and re-run our docker image.</description>
    </item>
    
    <item>
      <title>Getting Started With Docker</title>
      <link>http://example.org/docker/getting-started-with-docker/</link>
      <pubDate>Fri, 18 May 2018 14:25:51 +0100</pubDate>
      
      <guid>http://example.org/docker/getting-started-with-docker/</guid>
      <description>In this tutorial, we are going to be taking a look at what Docker is, why it&amp;rsquo;s needed and how you can get up and running using Docker in your day-to-day development.
What Is Docker? Docker is a containerization technology that allows you to package up your application into something that will run everywhere that Docker can run.
You typically define absolutely everything you need for your application within your docker file and no more.</description>
    </item>
    
  </channel>
</rss>