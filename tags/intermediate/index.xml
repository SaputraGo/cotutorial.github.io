<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>intermediate on CoTutorial</title>
    <link>https://cotutorial.github.io/tags/intermediate/</link>
    <description>Recent content in intermediate on CoTutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-ID</language>
    <lastBuildDate>Sat, 08 Dec 2018 13:33:45 +0000</lastBuildDate>
    
	<atom:link href="https://cotutorial.github.io/tags/intermediate/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python Project Layout Best Practices</title>
      <link>https://cotutorial.github.io/python/python-project-layout/</link>
      <pubDate>Mon, 28 Aug 2017 18:47:50 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-project-layout/</guid>
      <description>This tutorial was built using Python 3.6. It should also be noted that these are opinions and to be taken with a grain of salt.
 Structure is an incredibly important aspect of all projects and following a standard structure when it comes to designing your systems plays a huge part in making it more maintainable. By following standards you are essentially easing the job of new programmers coming on to a project as they&amp;rsquo;ll find it easier to navigate around and become comfortable with your systems.</description>
    </item>
    
    <item>
      <title>An Intro to Go Dep</title>
      <link>https://cotutorial.github.io/golang/an-intro-to-go-dep/</link>
      <pubDate>Sun, 18 Feb 2018 09:16:39 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/an-intro-to-go-dep/</guid>
      <description>In this tutorial, we are going to look at how you can use the Dep tool in go to manage your Go&amp;rsquo;s project dependencies.
Why dep? The dep tool is the &amp;ldquo;official experiment&amp;rdquo; dependency management tool for the go programming language. It helps you to manage the ever-growing list of dependencies your project needs to maintain without a lot of overhead and it can pin you to specific versions of dependencies to ensure stability in your systems.</description>
    </item>
    
    <item>
      <title>Getting Started With PyUnit Testing</title>
      <link>https://cotutorial.github.io/python/getting-started-with-pyunit-testing/</link>
      <pubDate>Sun, 19 Nov 2017 10:18:54 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/getting-started-with-pyunit-testing/</guid>
      <description>This tutorial is currently under construction.
This tutorial was built using Python 3.6
 If you are starting to improve your Python development skills, the one aspect that must be up to scratch is your ability to test your code. Unit testing your code can help to improve the confidence you have whenever you are trying to make any patches, bug fixes or just changes in general.
If your tests adequately test that your code behaves the way you expect it to, whenever you make a change, you can retest and ensure that your code still behaves the way you expect it with your incorporated changes.</description>
    </item>
    
    <item>
      <title>Consuming A RESTful API With Go</title>
      <link>https://cotutorial.github.io/golang/consuming-restful-api-with-go/</link>
      <pubDate>Sun, 23 Apr 2017 08:56:56 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/consuming-restful-api-with-go/</guid>
      <description>Note - For a Tutorial on how to build a RESTful API in Go click here
 In this tutorial, I&amp;rsquo;m going to be demonstrating how we can consume an already running RESTful API using go. There are currently hundreds upon thousands of open REST APIs out there that are just waiting to be consumed and turned into something more meaningful. Todd Motto has put together quite an active repo on Github that lists all the public APIs that are available for consumption by us and he&amp;rsquo;s categorized them so that we can easily drill down to what we want to check out, you can find that here.</description>
    </item>
    
    <item>
      <title>Creating a RESTful API With Golang</title>
      <link>https://cotutorial.github.io/golang/creating-restful-api-with-golang/</link>
      <pubDate>Sat, 15 Apr 2017 08:45:15 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/creating-restful-api-with-golang/</guid>
      <description>If you are writing any form of web application, then you are most likely interfacing with 1 or more REST APIs in order to populate the dynamic parts of your application and to perform tasks such as updating or deleting data within a database.
In this tutorial, you are going to be building a fully-fledged REST API that exposes GET, POST, DELETE and PUT endpoints that will subsequently allow you to perform the full range of CRUD operations.</description>
    </item>
    
    <item>
      <title>Creating A Simple Web Server With Golang</title>
      <link>https://cotutorial.github.io/golang/creating-simple-web-server-with-golang/</link>
      <pubDate>Sat, 15 Apr 2017 08:46:33 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/creating-simple-web-server-with-golang/</guid>
      <description>Last Updated - 3rd December, 2018
 Web servers are always a really cool and relatively simple project to get up and running when trying to learn a new language. In Go, this is no different, and building a web server using the net/http package is an excellent way to come to grips with some of the basics.
In this tutorial, we&amp;rsquo;ll be focusing on creating a very simple web server using the net/http package.</description>
    </item>
    
    <item>
      <title>Building a Network Command Line Interface in Go</title>
      <link>https://cotutorial.github.io/golang/building-a-cli-in-go/</link>
      <pubDate>Sun, 29 Jul 2018 09:41:15 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/building-a-cli-in-go/</guid>
      <description>In this article, we are going to be building a very simple Command Line Interface in Go using the urfave/cli package available on Github here: https://github.com/urfave/cli.
I&amp;rsquo;ve been doing one or two domain migrations across various hosting providers recently and thought it would be a cool idea to build a tool or program that could be used to query things like the Nameservers of a website, the CNAMEs, the IP addresses and so on.</description>
    </item>
    
    <item>
      <title>Writing A Twitter Bot in Golang</title>
      <link>https://cotutorial.github.io/golang/writing-a-twitter-bot-golang/</link>
      <pubDate>Sun, 09 Apr 2017 21:33:19 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/writing-a-twitter-bot-golang/</guid>
      <description>In this tutorial I’m going to be demonstrating how to build a twitter bot using go-twitter, a popular Go client library for the Twitter API.
I’ll be demonstrating how you can build a go based twitter bot that will be able to do such things as automatically reply to tweets and favorite tweets that contain a specific hashtag.
Setting Up Your Project  Note - We&amp;rsquo;ll be using go modules which is an experimental feature of Go 1.</description>
    </item>
    
    <item>
      <title>Golang ORM Tutorial</title>
      <link>https://cotutorial.github.io/golang/golang-orm-tutorial/</link>
      <pubDate>Wed, 07 Feb 2018 20:57:06 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/golang-orm-tutorial/</guid>
      <description>In this tutorial, we are going to look at how we can use the Go-ORM or GORM to interact with a sqlite3 database in a simple manner.
ORM&#39;s or Object Relationship Managers act almost as brokers between us developers and our underlying database technology. They allow us to essentially work with object&amp;rsquo;s, much as we normally would and then save these objects without having to craft complex SQL statements.</description>
    </item>
    
    <item>
      <title>Golang MySQL Tutorial</title>
      <link>https://cotutorial.github.io/golang/golang-mysql-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:28:15 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/golang-mysql-tutorial/</guid>
      <description>As you continue your Golang learning journey, it becomes almost inevitable that you will have to interact with some form of database.
In this tutorial I’ll be demonstrating how you can connect to a MySQL database and perform basic SQL statements using Go.
Why MySQL? MySQL is one of the most well-known and well-used database technologies available to developers at the present point in time. It has an absolutely massive community around it and it&amp;rsquo;s quite possibly powering half the web as the main database technology for Wordpress.</description>
    </item>
    
    <item>
      <title>An Introduction to Go Closures - Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-closures-tutorial/</link>
      <pubDate>Sat, 08 Dec 2018 13:33:45 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-closures-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at closures in Go. We&amp;rsquo;ll be covering the theory behind them, and we&amp;rsquo;ll look at how you can use them in your own Go applications.
Closures - The Theory So, let&amp;rsquo;s dive in the theory.
We can create and use closures within any programming language that supports functions as first-class object. Go, just so happens to be one such language, otherwise this article would be pointless.</description>
    </item>
    
    <item>
      <title>Go Variadic Function Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-variadic-function-tutorial/</link>
      <pubDate>Thu, 06 Dec 2018 21:38:44 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-variadic-function-tutorial/</guid>
      <description>Note - This tutorial is a follow on from my previous article on regular functions in go: Go Functions Tutorial
 In this tutorial, we are going to be looking at Variadic Functions in Go. We&amp;rsquo;ll be covering how to implement and how to use these functions within your own Go applications.
Variadic Functions There are times, when we do not know how many string arguments we will require for our functions.</description>
    </item>
    
    <item>
      <title>Working With Environment Variables in Go</title>
      <link>https://cotutorial.github.io/golang/working-with-environment-variables-in-go/</link>
      <pubDate>Tue, 04 Dec 2018 16:15:42 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/working-with-environment-variables-in-go/</guid>
      <description>As we start to build ever more complex Go-based applications, we start to face challenges when it comes to safely introducing new features, or handling credentials for the likes of databases, or brokers.
Using environment variables is an excellent way to simplify a number of different aspects such as handling credentials across various different environments, as well as simplifying the implementation of feature flags in your system.
In this tutorial, we will be covering:</description>
    </item>
    
    <item>
      <title>Go Decorator Function Pattern Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-decorator-function-pattern-tutorial/</link>
      <pubDate>Sat, 20 Oct 2018 21:34:14 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-decorator-function-pattern-tutorial/</guid>
      <description>Decorators are certainly more prominent in other programming languages such as Python and TypeScript, but that&amp;rsquo;s not to say you can&amp;rsquo;t use them in Go. In fact, for certain problems, using decorators is the perfect solution as we&amp;rsquo;ll hopefully be finding out in this tutorial.
Understanding the Decorator Pattern  Decorators essentially allow you to wrap existing functionality and append or prepend your own custom functionality on top.
 In Go, functions are deemed as first class objects which essentially means you can pass them around just as you would a variable.</description>
    </item>
    
    <item>
      <title>Calculating Keyword Density of a Web Page with Python</title>
      <link>https://cotutorial.github.io/python/calculating-keyword-density-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:47:55 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/calculating-keyword-density-python/</guid>
      <description>In this tutorial I will be showing you how to calculate the keyword density of a web page using the Python programming language. This will be a continuation of the previous tutorial in which we retrieved a web page using Pythons urllib2 Python module.
Keyword Density Calculation Keyword density is an easy metric to calculate as it has a relatively simple formula. The keyword density of a specific term is measured as the number of occurrences of the chosen keyword over the total number of words in the body of text.</description>
    </item>
    
    <item>
      <title>Creating a Python Web Crawler</title>
      <link>https://cotutorial.github.io/python/creating-python-web-crawler/</link>
      <pubDate>Sat, 15 Apr 2017 09:45:44 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/creating-python-web-crawler/</guid>
      <description>This tutorial was built using Python 3.6
 In this tutorial we&amp;rsquo;ll be taking a look at how you can build your own Python web crawler using the ThreadPoolExecutor class and BeautifulSoup.
Web Crawlers are incredibly interesting in the sense that they can do a huge host of data mining tasks. You could for instance do any of the following:
 Crawl and entire website for broken links, or errors Scrape an entire site to get a collective view of the entire site Scrape hundreds of different sites in order to build your own simple search engine  The possibilities are truly endless.</description>
    </item>
    
    <item>
      <title>Creating a Twitter Bot Using Python and the Twitter API</title>
      <link>https://cotutorial.github.io/python/creating-twitter-bot-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:45:44 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/creating-twitter-bot-python/</guid>
      <description>Twitter bots are a fantastic way to drum up a bit of interest in your brand or website and I&amp;rsquo;ve had fantastic results myself building up an audience for the Twitter account specifically for this website. This tutorial will hopefully cover everything it takes to construct your own twitter bot that utilizes the RESTful Twitter API.
 The source code for this Python wrapper for the Twitter API can be found here: Github: Bear&amp;rsquo;s Python-Twitter Wrapper</description>
    </item>
    
  </channel>
</rss>