<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>advanced on CoTutorial</title>
    <link>https://cotutorial.github.io/tags/advanced/</link>
    <description>Recent content in advanced on CoTutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-ID</language>
    <lastBuildDate>Sun, 28 Oct 2018 10:28:34 +0000</lastBuildDate>
    
	<atom:link href="https://cotutorial.github.io/tags/advanced/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working with Websockets and Socket.IO in Go - Tutorial</title>
      <link>https://cotutorial.github.io/golang/golang-websockets-tutorial/</link>
      <pubDate>Wed, 23 Aug 2017 19:29:11 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/golang-websockets-tutorial/</guid>
      <description>Note - This tutorial was written using Go version 1.9 and googollee/go-socket.io
 Websockets are something I find interesting in the sense that they provide us with an alternative option to communication between applications as opposed to the standard RESTful API solution. With Sockets we can do cool things such as real-time communication between thousands to hundreds of thousands of different clients without having to incur the expense of hundreds of thousands of RESTful API calls hitting our servers every minute.</description>
    </item>
    
    <item>
      <title>Go Protocol Buffer Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-protocol-buffer-tutorial/</link>
      <pubDate>Sat, 01 Sep 2018 18:53:06 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-protocol-buffer-tutorial/</guid>
      <description>Welcome fellow coders! In this tutorial, we are going to be looking at how you can utilize the Protocol Buffers data format within your Go-based applications. We&amp;rsquo;ll be covering what the data format is, and why it is an improvement over more traditional data formats such as XML or even JSON. And we&amp;rsquo;ll dive into a simple example to get us up and running before trying our hands at a more complex example.</description>
    </item>
    
    <item>
      <title>Go WebAssembly Tutorial - Building a Calculator Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-webassembly-tutorial/</link>
      <pubDate>Sat, 25 Aug 2018 15:54:23 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-webassembly-tutorial/</guid>
      <description>Update - The code in this tutorial has been updated to work with the breaking changes in Go v1.12
 Welcome All! With Go v1.11 having just been released with an experimental port to WebAssembly included, I thought it would be awesome to see how we can write our own Go programs that compile straight to WebAssembly!
So, in this article, we are going to be building a really simple calculator to give us an idea as to how we can write functions that can be exposed to the frontend, evaluate DOM elements and subsequently update any DOM elements with the results from any functions we call.</description>
    </item>
    
    <item>
      <title>Go Oauth2 Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-oauth2-tutorial/</link>
      <pubDate>Mon, 10 Sep 2018 20:04:14 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-oauth2-tutorial/</guid>
      <description>Welcome fellow coders! In this tutorial, we are going to be taking a look at how you can implement your own OAuth2 Server and client using the go-oauth2/oauth2 package.
This is without a doubt one of the most requested topics from commentors on my YouTube videos and it&amp;rsquo;s certainly something that I myself find incredibly interesting.
Security is without doubt a very important feature for any public and even private facing service or API and it&amp;rsquo;s something that you need to pay a lot of attention to in order to get it right.</description>
    </item>
    
    <item>
      <title>Go Face Recognition Tutorial - Part 1</title>
      <link>https://cotutorial.github.io/golang/go-face-recognition-tutorial-part-one/</link>
      <pubDate>Thu, 27 Sep 2018 10:48:51 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-face-recognition-tutorial-part-one/</guid>
      <description>The whole area of Face Recognition is something I love reading about. Implementing a facial recognition system yourself makes you sound like you are Tony Stark and you can use them for a variety of different projects such as an automatic lock on your door, or building a surveillance system for your office to name but a few.
In this tutorial, we are going to be building our own, really simple face recognition based system in Go using a few existing libraries.</description>
    </item>
    
    <item>
      <title>Go Encryption and Decryption using AES - Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-encrypt-decrypt-aes-tutorial/</link>
      <pubDate>Thu, 27 Sep 2018 10:48:51 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-encrypt-decrypt-aes-tutorial/</guid>
      <description>Objectives By the end of this tutorial, you will be able to&amp;hellip;
 Encrypt text using the AES - Advanced Encryption Standard in Go We&amp;rsquo;ll then look at writing this encrypted message to a file Finally we&amp;rsquo;ll look at how we can decrypt this message using a shared secret  From this, you should be able to build your own simple encryption systems that can do various things like, encrypt files on your file system and protect them with a passphrase only you know or add simple encryption to various parts of the systems that you are working on.</description>
    </item>
    
    <item>
      <title>Building a Solid Continuous Integration Pipeline with TravisCI for Your Go Projects</title>
      <link>https://cotutorial.github.io/golang/building-ci-cd-pipeline-go-projects/</link>
      <pubDate>Tue, 16 Oct 2018 20:10:30 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/building-ci-cd-pipeline-go-projects/</guid>
      <description>So, I recently partook in Hacktoberfest which is an event that helps to support thousands of different Open Source projects. Usually, I tend to get caught up in other projects or can&amp;rsquo;t find the time or make up a hundred other excuses for not taking part.
This year however, is different, and I&amp;rsquo;ve made an attempt at doing more Open Source work just so I can earn myself a free t-shirt.</description>
    </item>
    
    <item>
      <title>Writing a Frontend Web Framework with WebAssembly And Go</title>
      <link>https://cotutorial.github.io/golang/writing-frontend-web-framework-webassembly-go/</link>
      <pubDate>Sun, 28 Oct 2018 10:28:34 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/writing-frontend-web-framework-webassembly-go/</guid>
      <description>JavaScript Frontend frameworks have undoubtedly helped to push the boundaries of what was previously possible in the context of a browser. Ever more complex applications have come out built on top of the likes of React, Angular and VueJS to name but a few and there&amp;rsquo;s the well known joke about how a new frontend framework seems to come out every day.
However, this pace of development is exceptionally good news for developers around the world.</description>
    </item>
    
    <item>
      <title>Securing Your Go REST APIs With JWTs</title>
      <link>https://cotutorial.github.io/golang/authenticating-golang-rest-api-with-jwts/</link>
      <pubDate>Mon, 22 Oct 2018 19:26:44 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/authenticating-golang-rest-api-with-jwts/</guid>
      <description>Note - The full source code for this tutorial can be found here: TutorialEdge/go-jwt-tutorial
 JWTs, or JSON Web Tokens as they are more formally known, are a compact, URL-safe means of representing claims to be transferred between two parties. This is essentially a confusing way of saying that JWTs allow you to transmit information from a client to the server in a stateless, but secure way.
Prerequisites Before you can follow this article, you will need the following:</description>
    </item>
    
    <item>
      <title>Python Method Resolution Order Tutorial</title>
      <link>https://cotutorial.github.io/python/python-method-resolution-order-tutorial/</link>
      <pubDate>Mon, 18 Dec 2017 11:23:34 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-method-resolution-order-tutorial/</guid>
      <description>Understanding the way and the order in which Python resolves functions is important. You need to know where your code is going to call, when you call it and things can get messy as soon as you start playing with classes inheriting from multiple other classes.
In this tutorial we&amp;rsquo;ll be looking at how Python 3 handles its MRO by using a little something called C3 Linearization.
The Problems with Inheritance Imagine you were implementing a programming language that featured inheritance.</description>
    </item>
    
    <item>
      <title>Creating Basic Python C Extensions - Tutorial</title>
      <link>https://cotutorial.github.io/python/python-c-extensions-tutorial/</link>
      <pubDate>Fri, 01 Dec 2017 21:32:19 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-c-extensions-tutorial/</guid>
      <description>This tutorial was built using Python 3.6. The official documentation can be found here: Extending and Embedding the Python Interpreter
 In this tutorial we are going to take a look at how you can create a really simple Python module using the C programming language. I felt this was a good topic to cover as I personally struggled with finding succinct documentation that worked and showed me the basics.</description>
    </item>
    
  </channel>
</rss>