<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CoTutorial</title>
    <link>https://cotutorial.github.io/</link>
    <description>Recent content on CoTutorial</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-ID</language>
    <lastBuildDate>Fri, 02 Aug 2019 08:05:10 +0100</lastBuildDate>
    
	<atom:link href="https://cotutorial.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started With Go</title>
      <link>https://cotutorial.github.io/golang/getting-started-with-go/</link>
      <pubDate>Sat, 22 Sep 2018 15:23:16 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/getting-started-with-go/</guid>
      <description>Go is an absolutely incredible language to build a wide variety of different applications in. From command-line interfaces to distributed microsystems and even cloud platforms, its&amp;rsquo; simplicity and concurrency baked in makes it a powerful choice of language for many development teams.
In this tutorial, I will be embarking on a mission to help get you up and running with the language so that you can go off and build ever-more brilliant applications and help push forward technology.</description>
    </item>
    
    <item>
      <title>Designing the EveryNote Web App with VueJS and Vuex</title>
      <link>https://cotutorial.github.io/javascript/vuejs/designing-everynote-app-vuejs-vuex/</link>
      <pubDate>Fri, 27 Jul 2018 19:36:57 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/designing-everynote-app-vuejs-vuex/</guid>
      <description>In this article, you’ll learn to develop an application to take notes, called EveryNote, from scratch. You’ll analyze and design the application, as well as preparing the folder structure for the project. After that, you’ll build the application incrementally through tests and code, providing a real-world Vuex development example.
The application can be downloaded by cloning the https://github.com/PacktPublishing/-Vuex-Condensed Git repository. You’ll require Node.js installed on a system. Finally, to use the Git repository, the user needs to install Git.</description>
    </item>
    
    <item>
      <title>Form Validation With Vuelidate Vuejs</title>
      <link>https://cotutorial.github.io/javascript/vuejs/form-validation-with-vuelidate-vuejs/</link>
      <pubDate>Thu, 07 Jun 2018 19:36:57 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/form-validation-with-vuelidate-vuejs/</guid>
      <description>Learn how to validate forms using Vuelidate in this tutorial by Paul Halliday, the author of Vue.js 2 Design Patterns and Best Practices.
 In this post, you&amp;rsquo;ll use a third-party library named Vuelidate to perform model validation depending on a particular rule set
Create a New Vue Project Create a playground project by running the following in your Terminal:
# Create a new Vue project $ vue init webpack-simple vue-validation # Navigate to directory $ cd vue-validation # Install dependencies $ npm install # Install Vuelidate $ npm install vuelidate # Run application $ npm run dev What is Vuelidate?</description>
    </item>
    
    <item>
      <title>Managing State With Vuex in Vuejs</title>
      <link>https://cotutorial.github.io/javascript/vuejs/managing-state-with-vuex-vuejs/</link>
      <pubDate>Sat, 31 Mar 2018 19:06:13 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/managing-state-with-vuex-vuejs/</guid>
      <description>State management is something you will ultimately have to deal with as you create increasingly complex frontend applications. Thankfully, with the help of Vuex, this isn&amp;rsquo;t as hard as you may think!
Installation In order to install vuex, you will have to use either yarn or npm like so:
# Npm $ npm install vuex # Yarn $ yarn add vuex Setting up Vuex Once you have successfully installed Vuex in your VueJS application, you can set your application to use it by doing the following within your main.</description>
    </item>
    
    <item>
      <title>Part 1 - Setting Up Our CI/CD Pipeline to S3</title>
      <link>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-1-hosting-on-s3/</link>
      <pubDate>Mon, 19 Mar 2018 16:24:13 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-1-hosting-on-s3/</guid>
      <description>If you know anything about me, you&amp;rsquo;ll know I am incredibly lazy. This means that it&amp;rsquo;s incredibly important to set up an automated deployment pipeline early in the project&amp;rsquo;s development.
If we are serious about developing a decent website that will make us tonnes of money then we need to get this working from the start. Afterall, if it takes us about 5-10 minutes to deploy our site, by automating this we&amp;rsquo;ll be saving ourselves 5-10 minutes every time we wish to push up changes.</description>
    </item>
    
    <item>
      <title>Part 1 - Setting Up Our VueJS Project</title>
      <link>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-1-setting-up-vuejs-project/</link>
      <pubDate>Mon, 19 Mar 2018 16:24:13 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-1-setting-up-vuejs-project/</guid>
      <description>In this first tutorial, we will be covering exactly how you set up your development machine so that we can start working on our HackerNews clone.
We&amp;rsquo;ll get a basic VueJS application up and running and we&amp;rsquo;ll also cover how you can build this simple project so that you end up with files that are deployable to the likes of and S3 bucket, or a server that can serve your files.</description>
    </item>
    
    <item>
      <title>Getting Started With VueJS</title>
      <link>https://cotutorial.github.io/javascript/vuejs/getting-started-with-vuejs/</link>
      <pubDate>Wed, 28 Feb 2018 20:27:49 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/getting-started-with-vuejs/</guid>
      <description>In this tutorial, we are going to look at how you can setup your development environment so that you can get started writing your own VueJS.
We will be utilizing the vue-cli in order to start our project off and then we&amp;rsquo;ll be diving in and making a few edits, before finally building it using the same vue-cli.
Video Tutorial  A Simple Vue App Before I get started, it must be noted that you can get up and running really quickly with VueJS 2 in less than 30 lines of code.</description>
    </item>
    
    <item>
      <title>Getting Started With Python</title>
      <link>https://cotutorial.github.io/python/getting-started-with-python/</link>
      <pubDate>Mon, 18 Sep 2017 19:47:29 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/getting-started-with-python/</guid>
      <description>This tutorial uses Python version 3.6
 Introduction In this course we’ll be taking a look at the absolute basics of the Python programming language and cover everything you need to get up and running creating your own basic Python programs.
The full text version of this course can be found by clicking on the Python Programming Course card on the homepage of my site.
Installing Python Let’s dive in.</description>
    </item>
    
    <item>
      <title>An Introduction To Web Development</title>
      <link>https://cotutorial.github.io/webdev/introduction-to-web-development/</link>
      <pubDate>Sun, 16 Apr 2017 17:27:53 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/webdev/introduction-to-web-development/</guid>
      <description>Since it&amp;rsquo;s inception in the 90s the web has seen an explosion in the number and range of different web technologies used for building websites. However, if you have never created a website in your life then this can all be very daunting and initially offputting for someone wanting to take the plunge and get into web development seriously. In this introductory guide I&amp;rsquo;ll be helping to demystify some of the key terms and concepts that every web developer should know or be aware of.</description>
    </item>
    
    <item>
      <title>Using RwLock and CondVars in Rust</title>
      <link>https://cotutorial.github.io/rust/using-rwlocks-and-condvars-rust/</link>
      <pubDate>Sat, 01 Sep 2018 15:09:49 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/rust/using-rwlocks-and-condvars-rust/</guid>
      <description>Read many, write exclusive locks – RwLock Consider a situation where you have a resource that must be manipulated only a single thread at a time, but is safe to be queried by many—that is, you have many readers and only one writer.
While you could protect this resource with a mutex, the trouble is that the mutex makes no distinction between its lockers; every thread will be forced to wait, no matter what their intentions.</description>
    </item>
    
    <item>
      <title>Learning Generics in Rust</title>
      <link>https://cotutorial.github.io/rust/learning-generics-in-rust/</link>
      <pubDate>Sat, 01 Sep 2018 14:52:49 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/rust/learning-generics-in-rust/</guid>
      <description>Generics are a facility to write code for multiple contexts with different types, and parameterization allows the programmer to write code that makes fewer assumptions about the data structures and code segments involved in the code&amp;rsquo;s definition.
For example, a very ambiguous concept would be the concept of addition. When a programmer writes a + b, what does that mean? In Rust, the Add trait can be implemented for just about any type.</description>
    </item>
    
    <item>
      <title>Go Basic Types Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-basic-types-tutorial/</link>
      <pubDate>Sat, 14 Jul 2018 22:24:26 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-basic-types-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at all of the basic data types available to us within the Go language. By the end of this tutorial, you should be comfortable with the various different types available within the language and hopefully some understanding as to how you can use these within your own Go programs.
This kind of material can be fairly dry and boring to learn so I&amp;rsquo;ll try and spice things up and make it somewhat interesting whilst also covering the necessary basics.</description>
    </item>
    
    <item>
      <title>Part 2 - Getting Started With AWS Lambda</title>
      <link>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-2-getting-started-with-lambdas/</link>
      <pubDate>Thu, 19 Apr 2018 21:42:29 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-2-getting-started-with-lambdas/</guid>
      <description>So, in the last tutorial, we managed to get a simple CI/CD pipeline up and running so that whenever we commit anything to our github repo, it automatically builds and deploys these changes to our &amp;ldquo;production&amp;rdquo; environment.
In this tutorial, we are going to continue to develop our blog and get started building up the first of our Lambda functions that we&amp;rsquo;ll need to make our blog work.
Our First Lambda Function We&amp;rsquo;ll start by creating a hello world style lambda function that will later return a paginated list of blog posts.</description>
    </item>
    
    <item>
      <title>Part 2 - Creating a Few Components</title>
      <link>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-2-creating-few-components/</link>
      <pubDate>Mon, 19 Mar 2018 16:24:13 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-2-creating-few-components/</guid>
      <description>In the previous tutorial, we not only managed to set up our base project and get it running on http://localhost:8080, but we also managed to build it so that it&amp;rsquo;s ready for deployment to production. We now have a strong base project from which we can build up up our HackerNews clone.
In this tutorial, we are going to create our first Single Page component which will be our Navbar.</description>
    </item>
    
    <item>
      <title>Vuejs Components Tutorial</title>
      <link>https://cotutorial.github.io/javascript/vuejs/vuejs-components-tutorial/</link>
      <pubDate>Thu, 01 Mar 2018 12:26:40 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/vuejs-components-tutorial/</guid>
      <description>This Tutorial builds off the starter application that we generated in the Getting Started with VueJS article.
 Video Tutorial This tutorial is also available in video format if you wish to watch it!
 Introduction In this tutorial, we are going to look at how you can work with components within your VueJS applications. We are going to start at looking at very simple components and then move on to your standard .</description>
    </item>
    
    <item>
      <title>Functions and Variables in Python</title>
      <link>https://cotutorial.github.io/python/python-functions-and-variables/</link>
      <pubDate>Mon, 18 Sep 2017 19:19:39 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-functions-and-variables/</guid>
      <description>Variables in Python Let’s first have a look at variables. A variable is essentially a place where we can store the value of something for processing later on. Imagine you wanted to write a program that doubled a number for us, not the most exciting of programs I know but it is a good example.
We would first want to define a variable to store our number, double it and then print it out.</description>
    </item>
    
    <item>
      <title>Part 3 - Setting Up our RDS Database</title>
      <link>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-3-setting-up-rds-database/</link>
      <pubDate>Tue, 24 Jul 2018 21:19:40 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-3-setting-up-rds-database/</guid>
      <description>Introduction Welcome back to part 3 of my course on building a blog with Vue.JS on AWS. In this part of the course, we are going to be setting up an RDS instance which will store all of our blog&amp;rsquo;s articles and posts.
Once we have our database instance set up and our schema defined, we can then move on to building Lambda functions that will query this database and return the results to our frontend.</description>
    </item>
    
    <item>
      <title>Go Composite Types Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-complex-types-tutorial/</link>
      <pubDate>Sat, 14 Jul 2018 22:24:26 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-complex-types-tutorial/</guid>
      <description>Welcome All! In this tutorial, we are going to be looking at the various different composite data types that are available in the Go programming language.
If you haven&amp;rsquo;t already, I&amp;rsquo;d suggest you check out my other tutorial in this course on Basic Data Types. You&amp;rsquo;ll need to know about these basic data types in order to understand some of the composite data types.
Arrays Let&amp;rsquo;s dive into our first Composite data type, the array and see how we can declare arrays and work with them.</description>
    </item>
    
    <item>
      <title>Part 4 - Setting Up Our Dynamodb Table</title>
      <link>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-4-setting-up-our-dynamodb-table/</link>
      <pubDate>Fri, 20 Apr 2018 12:31:40 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-4-setting-up-our-dynamodb-table/</guid>
      <description>In the previous tutorial, we managed to get our first Lambda tutorial up and running, however, it doesn&amp;rsquo;t do anything too exciting as it stands. This is where Dynamo comes in, we need to create a DynamoDB table where we can store everything we need for our blog. This includes new blog posts, any comments, ratings, and whatever else we can think of!
Once we have this new table all defined, we can start to play about with inserting things and then retrieving them using our existing Lambda function.</description>
    </item>
    
    <item>
      <title>Part 3 - Adding a Few Routes To Our App</title>
      <link>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-3-adding-a-few-routes/</link>
      <pubDate>Mon, 19 Mar 2018 16:24:13 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-3-adding-a-few-routes/</guid>
      <description>In the previous tutorial of this series, we covered single page components and how you could build your own components and subsequently render them within your Vue.js application. We created a simple Navbar component and registered it within our App.vue component and subsequently rendered it within our application.
In this tutorial, we are going to be creating a few more single-page components and setting up a vue-router so that we can navigate between different views on our site.</description>
    </item>
    
    <item>
      <title>Vuejs Event Handling Tutorial</title>
      <link>https://cotutorial.github.io/javascript/vuejs/vuejs-event-handling-tutorial/</link>
      <pubDate>Sun, 04 Mar 2018 15:03:41 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/vuejs-event-handling-tutorial/</guid>
      <description>The official documentation for VueJS event handling can be found here: VueJS Event Handling.
 In this tutorial, we are going to look at how you can successfully handle events within your VueJS applications. This is by no means a replacement for the official documentation, think of it more so as a suplementary guide filled with live examples!
If you get through this I would love to hear your feedback either in the comments section or on twitter: @Elliot_F.</description>
    </item>
    
    <item>
      <title>Working with Lists in Python - Tutorial</title>
      <link>https://cotutorial.github.io/python/python-lists-tutorial/</link>
      <pubDate>Wed, 20 Dec 2017 19:22:48 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-lists-tutorial/</guid>
      <description>This tutorial was built in Python 3.6
 A Simple List my_list = [1, 2, 3, 4] print(my_list) Reversing a List This quick and easy technique shows how you can access all the elements of a list in reverse order.
&amp;gt;&amp;gt;&amp;gt; my_list = [1,2,3,4,5] &amp;gt;&amp;gt;&amp;gt; my_list[::-1] [5, 4, 3, 2, 1] Try it Out my_list = [1, 2, 3, 4] print(my_list[::-1]) We can then treat our reversed list as an iterator and iterate through every element within this reversed list like so:</description>
    </item>
    
    <item>
      <title>Go Functions Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-functions-tutorial/</link>
      <pubDate>Sat, 14 Jul 2018 22:23:10 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-functions-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at functions in Golang and hopefully, by the end of this tutorial, you will have a firm grasp as to what they are and how you can use them in your own projects.
We&amp;rsquo;ll be covering the following topics within this tutorial:
 The basics on Function Declaration Working with multiple return values  At the end of this tutorial, there will be challenges that you can attempt to complete on your own working machine that will help to validate what we have covered and give you a taste of writing your own functions in Go.</description>
    </item>
    
    <item>
      <title>Part 5 - Getting Started With AWS Cognito</title>
      <link>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-5-getting-started-with-cognito/</link>
      <pubDate>Fri, 20 Apr 2018 12:41:31 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/projects/building-blog-with-vuejs-aws/part-5-getting-started-with-cognito/</guid>
      <description>In the previous tutorial, we managed to get our DynamoDB table set up and populated with a couple of very simple posts. In this tutorial, we are going to set up a Cognito pool that will store all of the users that register for our Blog. We&amp;rsquo;ll also be able to improve our Lambda endpoints so that they aren&amp;rsquo;t open to the world, they require authentication before they start updating our database, this will stop unauthorized people potentially updating posts and doing malicious things.</description>
    </item>
    
    <item>
      <title>Part 4 - Hitting The HackerNews API</title>
      <link>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-4-hitting-an-api/</link>
      <pubDate>Mon, 19 Mar 2018 16:24:13 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-4-hitting-an-api/</guid>
      <description>The documentation for the API we will be hitting can be found here: HackerNews/API
 In most frontend web applications, you will need to start making HTTP requests in order to retrieve data from a database or get information from a RESTful API. Being able to do this is considered almost essential these days and thus, in this section of the course, we are going to look at how you can extend the HackerNews project in order to make HTTP requests out to the HackerNews API.</description>
    </item>
    
    <item>
      <title>Vuejs HTTP Requests with Axios Tutorial</title>
      <link>https://cotutorial.github.io/javascript/vuejs/vuejs-http-requests-axios-tutorial/</link>
      <pubDate>Thu, 01 Mar 2018 12:36:54 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/vuejs-http-requests-axios-tutorial/</guid>
      <description>This Tutorial builds off the starter application that we generated in the Getting Started with VueJS article.
 In this article, we are going to look at how you can use the axios library to make HTTP requests within your VueJS 2 applications. The axios framework is without a doubt the most popular HTTP frameworks to use within the framework and makes the job of sending requests simple.</description>
    </item>
    
    <item>
      <title>Working With The File System in Python</title>
      <link>https://cotutorial.github.io/python/python-working-with-file-system/</link>
      <pubDate>Wed, 20 Dec 2017 18:41:30 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-working-with-file-system/</guid>
      <description>This tutorial was written using Python 3.6
 Being able to work with the file system and do things like traverse directories or retrieve every file can be very handy in a number of different situations.
In this tutorial we&amp;rsquo;ll be taking a look at the various ways you can work with the file system in Python. Hopefully this will give you a decent grasp of some of the cool things you can do very quickly and succinctly using the Python programming language.</description>
    </item>
    
    <item>
      <title>Go Methods Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-methods-tutorial/</link>
      <pubDate>Sat, 14 Jul 2018 22:23:10 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-methods-tutorial/</guid>
      <description>In this tutorial, we are going to first of all look at what methods are and how they work within the confines of the Go programming language. We&amp;rsquo;ll then take a look at demystifying the differences between both methods and functions and when you should ideally use them within your Go programs.
A Simple Example Let&amp;rsquo;s start off by covering what methods and how we can implement our own in our Go systems.</description>
    </item>
    
    <item>
      <title>Part 5 - Viewing Individual News Articles</title>
      <link>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-5-single-news-article-view/</link>
      <pubDate>Mon, 19 Mar 2018 16:24:13 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-5-single-news-article-view/</guid>
      <description>In the previous tutorial, we looked at how we could show all of the latest HackerNews stories on our Homepage component and showed information like the score and the URL of that story. Whilst this is pretty cool, it doesn&amp;rsquo;t let us see the discussion going on around any of the stories, as we all know, this can be the best bit!
In this tutorial, we&amp;rsquo;ll be adding a new route to our VueJS application which will be able to render an individual story and the comments associated with it.</description>
    </item>
    
    <item>
      <title>Vue Router Beginners Tutorial</title>
      <link>https://cotutorial.github.io/javascript/vuejs/vue-router-beginners-tutorial/</link>
      <pubDate>Wed, 14 Mar 2018 19:12:49 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/vue-router-beginners-tutorial/</guid>
      <description>The vue-router within VueJS allows you to create powerful Single Page Applications with minimal fuss. On a traditional website, each distinct page would constitute a request to the server to load the relevant file. So when someone navigated to http://myapp.com/page-1.html, the page-1.html file would be served up.
However, when navigating through a single page application, you only have see one request made to the server which returns your entire JavaScript application.</description>
    </item>
    
    <item>
      <title>Reading and Writing Files In Python</title>
      <link>https://cotutorial.github.io/python/python-reading-writing-files/</link>
      <pubDate>Sun, 10 Sep 2017 08:59:29 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-reading-writing-files/</guid>
      <description>This tutorial was written using Python 3.6
 Being able to effectively work with the filesystem in any programming language is important as there will always be a need to do things such as import data from files or store data in local files. In this tutorial we&amp;rsquo;ll be looking at how you can create files, write to these newly created and then subsequently delete these files once we are done.</description>
    </item>
    
    <item>
      <title>Go Interfaces Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-interfaces-tutorial/</link>
      <pubDate>Sat, 14 Jul 2018 22:24:26 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-interfaces-tutorial/</guid>
      <description>Welcome all, in this tutorial we are going to be taking a look at interfaces within the Go programming language.
By the end of this tutorial, we&amp;rsquo;ll have covered the following topics:
 The Basics of Interfaces Defining Your Own Interfaces  There will be a number of challenges at the end of this tutorial that you are free to try and complete on your own machine to try and validate some of the topics we have covered in this tutorial.</description>
    </item>
    
    <item>
      <title>Part 6 - Advanced Components</title>
      <link>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-6-advanced-components/</link>
      <pubDate>Mon, 19 Mar 2018 16:24:13 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-6-advanced-components/</guid>
      <description>As we continue to build this HackerNews clone up, the code within some of our components is going to increasingly grow. We need to start splitting our application up into multiple smaller components and in order for us to do this, we&amp;rsquo;ll first have to learn some new concepts such as passing data into components using props.
Video Tutorial  In this tutorial, we are going to create an Item.</description>
    </item>
    
    <item>
      <title>VueJS Animations and Transitions Tutorial</title>
      <link>https://cotutorial.github.io/javascript/vuejs/vuejs-transitions-animations-tutorial/</link>
      <pubDate>Thu, 01 Mar 2018 12:26:40 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/vuejs-transitions-animations-tutorial/</guid>
      <description>In this tutorial, we are going to explore how we can use animations and transitions to make our VueJS web application really stand out from the crowd.
A Simple Transition Let&amp;rsquo;s start of by creating a few very simple transitions, these will simply fade in when a certain condition is met. I was watching Mission Impossible whilst writing this so the theme for this is a top secret mission. The finished product for this section is going to look something like this:</description>
    </item>
    
    <item>
      <title>Python Maps Tutorial</title>
      <link>https://cotutorial.github.io/python/python-maps-tutorial/</link>
      <pubDate>Wed, 24 May 2017 07:57:51 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-maps-tutorial/</guid>
      <description>This tutorial was built using Python 3.6
 Maps in Python are syntactic sugar that allow you to very succinctly iterate through every element of an array and perform a function on it.
Imagine we started off with a list of values numbering from 2-6 like so:
values = [2,3,4,5,6] And we had a function which doubled said values:
def double(x): return x * 2 Without the use of maps we would have to do something like so in order to multiply every element:</description>
    </item>
    
    <item>
      <title>Part 7 - Managing State with Vuex in your VueJS Applications</title>
      <link>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-7-managing-state-with-vuex-vuejs/</link>
      <pubDate>Mon, 19 Mar 2018 16:24:13 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-7-managing-state-with-vuex-vuejs/</guid>
      <description>In this tutorial, we are going to be adding Vuex to our VueJS application. We&amp;rsquo;ll be looking at how we can improve the performance of our application and persist data between route changes.
Why Vuex? Vuex is a state management pattern + library for Vue.js applications. Essentially, it acts as a centralized store for all components in an application.
Vuex Core Concepts Before we continue to flesh out our VueJS application, we should really ground ourselves with the core concepts of Vuex.</description>
    </item>
    
    <item>
      <title>Debugging with the Python Debugger - PDB </title>
      <link>https://cotutorial.github.io/python/debugging-with-pdb-python/</link>
      <pubDate>Sat, 02 Sep 2017 13:35:28 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/debugging-with-pdb-python/</guid>
      <description>In this tutorial we&amp;rsquo;ll be having a look at the Python Debugger, what it is and how you can use it to effectively debug your Python applications.
Knowing how to debug your code is an incredibly important tool in any programmers arsenal. Thankfully Python comes with the excellent PDB or Python DeBugger which allows us to step through our code and effectively work out what has gone wrong.
 The official documentation for the Python Debugger can be found here: Python Debugger</description>
    </item>
    
    <item>
      <title>Part 8 - Deploying Our HackerNews Client To AWS</title>
      <link>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-8-deploying-our-application/</link>
      <pubDate>Mon, 19 Mar 2018 16:24:13 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/hacker-news-clone-vuejs/part-8-deploying-our-application/</guid>
      <description>In this final lesson in the series, we are going to be taking a look at how you can deploy your finished application up to AWS so that it is available for the world.
We&amp;rsquo;ll cover how to do this in an automated fashion using the Travis-CI platform and we&amp;rsquo;ll also cover some of the various methods of improving performance using services such as CloudFront.
Setting up a CI/CD Pipeline Now that we have a basic level of functionality within our application, it makes sense to deploy it, have our users see it, and interact with it and hopefully provide feedback on it as soon as possible.</description>
    </item>
    
    <item>
      <title>Reading And Writing To Files in Go</title>
      <link>https://cotutorial.github.io/golang/reading-writing-files-in-go/</link>
      <pubDate>Sat, 17 Feb 2018 21:56:17 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/reading-writing-files-in-go/</guid>
      <description>Note - If you are interested in working with JSON in Go, you may also like my other tutorial - Go JSON Tutorial
 Within this tutorial, we are going to look at how you can effectively read and write to files within your filesystem using the go programming language.
The method we are going to use to read and write to these files will be file format-agnostic. What this means is that you&amp;rsquo;ll be able to use the techniques we&amp;rsquo;ll be covering in order to read and write, .</description>
    </item>
    
    <item>
      <title>Python Modules Tutorial</title>
      <link>https://cotutorial.github.io/python/python-modules-tutorial/</link>
      <pubDate>Mon, 28 Aug 2017 18:42:27 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-modules-tutorial/</guid>
      <description>This tutorial was developed using Python version 3.6.
 Larger Python projects require larger degrees of order and sub-dividing your project up into logical blocks can greatly improve the readability of your codebase. In Python we can do this sub-division using a concept using modules.
Say for instance you have a program that bought and sold widgets on the stock market. This project does a number of things:</description>
    </item>
    
    <item>
      <title>Reading in Console Input in Golang</title>
      <link>https://cotutorial.github.io/golang/reading-console-input-golang/</link>
      <pubDate>Sat, 15 Apr 2017 08:48:49 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/reading-console-input-golang/</guid>
      <description>This is a quick and simple tutorial on how to read in console text input into your Go (GoLang) program. In this tutorial, we&amp;rsquo;ll be creating the basis for a very simple shell that will take in all user input and simply echo it back to the user.
Reading in Full Sentences We&amp;rsquo;ll use Go&amp;rsquo;s while loop equivalent of a for loop without any parameters to ensure our program continues on forever.</description>
    </item>
    
    <item>
      <title>Executing System Commands With Golang</title>
      <link>https://cotutorial.github.io/golang/executing-system-commands-with-golang/</link>
      <pubDate>Sat, 15 Apr 2017 08:47:48 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/executing-system-commands-with-golang/</guid>
      <description>Last Updated - 6th December, 2018
 In this tutorial, we are going to be taking a look at the os/exec package in the standard library and how we can use this to successfully execute system commands within our Go applications.
 Note - The official documentation for executing system commands can be found under the exec package: os/exec package.
 Prerequisites  You will need Go version 1.</description>
    </item>
    
    <item>
      <title>Python Project Layout Best Practices</title>
      <link>https://cotutorial.github.io/python/python-project-layout/</link>
      <pubDate>Mon, 28 Aug 2017 18:47:50 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-project-layout/</guid>
      <description>This tutorial was built using Python 3.6. It should also be noted that these are opinions and to be taken with a grain of salt.
 Structure is an incredibly important aspect of all projects and following a standard structure when it comes to designing your systems plays a huge part in making it more maintainable. By following standards you are essentially easing the job of new programmers coming on to a project as they&amp;rsquo;ll find it easier to navigate around and become comfortable with your systems.</description>
    </item>
    
    <item>
      <title>Parsing JSON files With Golang</title>
      <link>https://cotutorial.github.io/golang/parsing-json-with-golang/</link>
      <pubDate>Sun, 09 Apr 2017 21:07:11 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/parsing-json-with-golang/</guid>
      <description>Welcome all, in this tutorial, we are going to be taking a look at how you can read in JSON files, or JSON HTTP responses and parse them to your hearts desire.
JSON or Javascript Object Notation as it is short for, is a standard format for sending and receiving information. We could represent the same information with either XML or JSON, but JSON provides one advantage in the fact it is far more compact and in my personal experience, more readable.</description>
    </item>
    
    <item>
      <title>Python Logging Best Practices</title>
      <link>https://cotutorial.github.io/python/python-logging-best-practices/</link>
      <pubDate>Sun, 13 Aug 2017 17:06:57 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-logging-best-practices/</guid>
      <description>In this tutorial we&amp;rsquo;ll be looking at some of the best practices that you should be following when it comes to implementing logging in your Python programs.
 This article was written against Python version 3.6
 Why Do We Need Logging? Logging is an incredibly important feature of any application as it gives both programmers and people supporting the application key insight into what their systems are doing. Without proper logging we have no real idea as to why our applications fail and no real recourse for fixing these applications.</description>
    </item>
    
    <item>
      <title>Parsing XML Files With Golang</title>
      <link>https://cotutorial.github.io/golang/parsing-xml-with-golang/</link>
      <pubDate>Sun, 09 Apr 2017 21:07:45 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/parsing-xml-with-golang/</guid>
      <description>In this tutorial we look at how you can effectively read in an XML file from the file system and then parse this file using Go’s “encoding/xml” Package. We’ll look at how you can traverse multiple nested xml elements and then we’ll simply print this out to our terminal window.
Our Example XML File So to begin with, we’ll need an xml file that we can traverse.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?</description>
    </item>
    
    <item>
      <title>An Introduction to Testing in Go</title>
      <link>https://cotutorial.github.io/golang/intro-testing-in-go/</link>
      <pubDate>Fri, 09 Feb 2018 17:27:18 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/intro-testing-in-go/</guid>
      <description>Testing is hugely important in all software. Being able to ensure the correctness of your code and ensure that any changes you make don&amp;rsquo;t end up breaking anything else in different parts of your codebase is hugely important.
By taking the time to adequately test your go programs you allow yourself to develop faster with a greater sense of confidence that what you are developing will continue to work when you release it to production.</description>
    </item>
    
    <item>
      <title>Python Decorators Tutorial</title>
      <link>https://cotutorial.github.io/python/python-decorators-tutorial/</link>
      <pubDate>Tue, 08 Aug 2017 18:55:48 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-decorators-tutorial/</guid>
      <description>This Tutorial was written using Python 3.6
 In this tutorial, I am going to be demonstrating the wonderful concept that is Python decorators. We&amp;rsquo;ll look at the various attributes of Python that make writing your own decorators fairly simple and then we&amp;rsquo;ll cover some cool examples as to how you can use decorators to improve the performance of some types of applications.
Video Tutorial If you prefer, feel free to check out the video version of this course, like and subscribe to my channel for more Python related video content!</description>
    </item>
    
    <item>
      <title>Advanced Go Testing Tutorial</title>
      <link>https://cotutorial.github.io/golang/advanced-go-testing-tutorial/</link>
      <pubDate>Wed, 29 Aug 2018 21:57:53 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/advanced-go-testing-tutorial/</guid>
      <description>Welcome fellow coders! In this tutorial, we are going to be taking a look at selection of more advanced testing practices used by the likes of the Go core language developers and in popular production-level tools.
I feel this approach, of actually studying what has been done in a production system, will hopefully give you some insight into the best ways to test your own production-level Go programs.
 Note - If you are entirely new to testing your Go-based programs, then I suggest you check out my other tutorial: an introduction to testing in go</description>
    </item>
    
    <item>
      <title>Python Generators Tutorial</title>
      <link>https://cotutorial.github.io/python/python-generator-tutorial/</link>
      <pubDate>Mon, 12 Jun 2017 14:26:02 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-generator-tutorial/</guid>
      <description>This tutorial was built using Python 3.6
 In this tutorial I&amp;rsquo;m aiming to help demystify this concept of generators within the Python programming language. We&amp;rsquo;ll look at what generators are and how we can utilize them within our python programs.
What Are Generators? Generators are functions that can return multiple values at different times. These are iterators that we can subsequently iterate over in a variety of different ways.</description>
    </item>
    
    <item>
      <title>The Go init Function</title>
      <link>https://cotutorial.github.io/golang/the-go-init-function/</link>
      <pubDate>Thu, 04 Oct 2018 10:44:54 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/the-go-init-function/</guid>
      <description>There are times, when creating applications in Go, that you need to be able to set up some form of state on the initial startup of your program. This could involve creating connections to databases, or loading in configuration from locally stored configuration files.
When it comes to doing this in Go, this is where your init() functions come into play. In this tutorial, we&amp;rsquo;ll be looking at how you can use this init() function to achieve fame and glory, or more likely to help you to build your next Go based project.</description>
    </item>
    
    <item>
      <title>An Intro to Go Dep</title>
      <link>https://cotutorial.github.io/golang/an-intro-to-go-dep/</link>
      <pubDate>Sun, 18 Feb 2018 09:16:39 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/an-intro-to-go-dep/</guid>
      <description>In this tutorial, we are going to look at how you can use the Dep tool in go to manage your Go&amp;rsquo;s project dependencies.
Why dep? The dep tool is the &amp;ldquo;official experiment&amp;rdquo; dependency management tool for the go programming language. It helps you to manage the ever-growing list of dependencies your project needs to maintain without a lot of overhead and it can pin you to specific versions of dependencies to ensure stability in your systems.</description>
    </item>
    
    <item>
      <title>Python Iterator Tutorial</title>
      <link>https://cotutorial.github.io/python/python-iterator-tutorial/</link>
      <pubDate>Sun, 03 Sep 2017 17:58:24 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-iterator-tutorial/</guid>
      <description>This tutorial was built using Python 3.6
 In this tutorial we&amp;rsquo;ll be looking at what iterators are with Python. We&amp;rsquo;ll also be looking at how we can effectively work with them and improve our Python programs using them.
What Are Iterators? Iterators are cool in the sense that they allow us to step over every item in an array, object or file and perform work on each item.</description>
    </item>
    
    <item>
      <title>An Introduction to Benchmarking Your Go Programs</title>
      <link>https://cotutorial.github.io/golang/benchmarking-your-go-programs/</link>
      <pubDate>Sat, 10 Feb 2018 08:48:40 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/benchmarking-your-go-programs/</guid>
      <description>In this article, we are going to be having a look at benchmarking. More specifically, we are going to be looking at how you can benchmark your Go-based programs.
In times where performance is important, being able to benchmark how your program performs and analyze where potential bottlenecks are, is really valuable. By understanding where these bottlenecks lie, we can more effectively determine where to focus our efforts in order to improve the performance of our systems.</description>
    </item>
    
    <item>
      <title>Getting Started With PyUnit Testing</title>
      <link>https://cotutorial.github.io/python/getting-started-with-pyunit-testing/</link>
      <pubDate>Sun, 19 Nov 2017 10:18:54 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/getting-started-with-pyunit-testing/</guid>
      <description>This tutorial is currently under construction.
This tutorial was built using Python 3.6
 If you are starting to improve your Python development skills, the one aspect that must be up to scratch is your ability to test your code. Unit testing your code can help to improve the confidence you have whenever you are trying to make any patches, bug fixes or just changes in general.
If your tests adequately test that your code behaves the way you expect it to, whenever you make a change, you can retest and ensure that your code still behaves the way you expect it with your incorporated changes.</description>
    </item>
    
    <item>
      <title>Go Maps Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-maps-tutorial/</link>
      <pubDate>Sat, 29 Jun 2019 23:00:00 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-maps-tutorial/</guid>
      <description>In this tutorial, we are going to look at maps in Go and how you can use them to achieve world domination!
We are going to be covering just about everything you need to know about maps to get started using them within your own Go applications. We are going to be looking at all of the various ways you interact with maps in Go and by the end of this tutorial, you will be a master when it comes to using them.</description>
    </item>
    
    <item>
      <title>Consuming A RESTful API With Go</title>
      <link>https://cotutorial.github.io/golang/consuming-restful-api-with-go/</link>
      <pubDate>Sun, 23 Apr 2017 08:56:56 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/consuming-restful-api-with-go/</guid>
      <description>Note - For a Tutorial on how to build a RESTful API in Go click here
 In this tutorial, I&amp;rsquo;m going to be demonstrating how we can consume an already running RESTful API using go. There are currently hundreds upon thousands of open REST APIs out there that are just waiting to be consumed and turned into something more meaningful. Todd Motto has put together quite an active repo on Github that lists all the public APIs that are available for consumption by us and he&amp;rsquo;s categorized them so that we can easily drill down to what we want to check out, you can find that here.</description>
    </item>
    
    <item>
      <title>Creating a RESTful API With Golang</title>
      <link>https://cotutorial.github.io/golang/creating-restful-api-with-golang/</link>
      <pubDate>Sat, 15 Apr 2017 08:45:15 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/creating-restful-api-with-golang/</guid>
      <description>If you are writing any form of web application, then you are most likely interfacing with 1 or more REST APIs in order to populate the dynamic parts of your application and to perform tasks such as updating or deleting data within a database.
In this tutorial, you are going to be building a fully-fledged REST API that exposes GET, POST, DELETE and PUT endpoints that will subsequently allow you to perform the full range of CRUD operations.</description>
    </item>
    
    <item>
      <title>Creating A Simple Web Server With Golang</title>
      <link>https://cotutorial.github.io/golang/creating-simple-web-server-with-golang/</link>
      <pubDate>Sat, 15 Apr 2017 08:46:33 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/creating-simple-web-server-with-golang/</guid>
      <description>Last Updated - 3rd December, 2018
 Web servers are always a really cool and relatively simple project to get up and running when trying to learn a new language. In Go, this is no different, and building a web server using the net/http package is an excellent way to come to grips with some of the basics.
In this tutorial, we&amp;rsquo;ll be focusing on creating a very simple web server using the net/http package.</description>
    </item>
    
    <item>
      <title>Building a Network Command Line Interface in Go</title>
      <link>https://cotutorial.github.io/golang/building-a-cli-in-go/</link>
      <pubDate>Sun, 29 Jul 2018 09:41:15 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/building-a-cli-in-go/</guid>
      <description>In this article, we are going to be building a very simple Command Line Interface in Go using the urfave/cli package available on Github here: https://github.com/urfave/cli.
I&amp;rsquo;ve been doing one or two domain migrations across various hosting providers recently and thought it would be a cool idea to build a tool or program that could be used to query things like the Nameservers of a website, the CNAMEs, the IP addresses and so on.</description>
    </item>
    
    <item>
      <title>Writing A Twitter Bot in Golang</title>
      <link>https://cotutorial.github.io/golang/writing-a-twitter-bot-golang/</link>
      <pubDate>Sun, 09 Apr 2017 21:33:19 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/writing-a-twitter-bot-golang/</guid>
      <description>In this tutorial I’m going to be demonstrating how to build a twitter bot using go-twitter, a popular Go client library for the Twitter API.
I’ll be demonstrating how you can build a go based twitter bot that will be able to do such things as automatically reply to tweets and favorite tweets that contain a specific hashtag.
Setting Up Your Project  Note - We&amp;rsquo;ll be using go modules which is an experimental feature of Go 1.</description>
    </item>
    
    <item>
      <title>Python Based Lambda Tutorial</title>
      <link>https://cotutorial.github.io/cloud/aws/python-based-lambda-tutorial/</link>
      <pubDate>Sat, 24 Feb 2018 10:23:36 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/cloud/aws/python-based-lambda-tutorial/</guid>
      <description>If you&amp;rsquo;ve been following my Medium Blog recently, you&amp;rsquo;ll know that I&amp;rsquo;m a huge fan of Serverless and I genuinely believe that it will start to seriously take off in terms of popularity in the years to come.
In this tutorial, we are going to be writing a very simple Python based AWS Lambda function that we&amp;rsquo;ll then deploy using the serverless.com CLI.
Installing Serverless In order to install the serverless CLI you can do the following:</description>
    </item>
    
    <item>
      <title>Golang ORM Tutorial</title>
      <link>https://cotutorial.github.io/golang/golang-orm-tutorial/</link>
      <pubDate>Wed, 07 Feb 2018 20:57:06 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/golang-orm-tutorial/</guid>
      <description>In this tutorial, we are going to look at how we can use the Go-ORM or GORM to interact with a sqlite3 database in a simple manner.
ORM&#39;s or Object Relationship Managers act almost as brokers between us developers and our underlying database technology. They allow us to essentially work with object&amp;rsquo;s, much as we normally would and then save these objects without having to craft complex SQL statements.</description>
    </item>
    
    <item>
      <title>Golang MySQL Tutorial</title>
      <link>https://cotutorial.github.io/golang/golang-mysql-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:28:15 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/golang-mysql-tutorial/</guid>
      <description>As you continue your Golang learning journey, it becomes almost inevitable that you will have to interact with some form of database.
In this tutorial I’ll be demonstrating how you can connect to a MySQL database and perform basic SQL statements using Go.
Why MySQL? MySQL is one of the most well-known and well-used database technologies available to developers at the present point in time. It has an absolutely massive community around it and it&amp;rsquo;s quite possibly powering half the web as the main database technology for Wordpress.</description>
    </item>
    
    <item>
      <title>Concurrency With Golang Goroutines</title>
      <link>https://cotutorial.github.io/golang/concurrency-with-golang-goroutines/</link>
      <pubDate>Sun, 09 Apr 2017 21:06:27 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/concurrency-with-golang-goroutines/</guid>
      <description>Now, Go is an incredibly performant language that features a hell of a lot of great features that allow you to build incredibly fast applications. It redefines what it means to build concurrent programs by providing us with these goroutines and channels.
Using goroutines is a very quick way to turn what would be a sequential program into a concurrent program without having to worry about things like creating threads or thread-pools.</description>
    </item>
    
    <item>
      <title>Go Mutex Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-mutex-tutorial/</link>
      <pubDate>Sat, 25 Aug 2018 14:21:04 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-mutex-tutorial/</guid>
      <description>The use of Go when programming highly concurrent applications doesn&amp;rsquo;t preclude the possibility of you writing a system that features race conditions. These race conditions can cause unexpected issues with your systems that are both hard to debug and at times, even harder to fix.
Thus, we need to be able to write Go programs that can execute concurrently in a safe manner without impacting performance. This is where the mutex comes into play.</description>
    </item>
    
    <item>
      <title>Go Channels Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-channels-tutorial/</link>
      <pubDate>Sat, 25 Aug 2018 14:47:06 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-channels-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at how you can use channels within your Go-based applications.
Channels are pipes that link between goroutines within your Go based applications that allow communication and subsequently the passing of values to and from variables.
They are incredibly handy and can help you craft incredibly high performance, highly concurrent applications in Go with minimal fuss compared to other programming languages. This was by no means a fluke, when designing the language, the core developers decided that they wanted concurrency within their language to be a first class citizen and to make it as simple to work with as possible, without going too far and not allowing developers the freedom they need to work in.</description>
    </item>
    
    <item>
      <title>Working with Websockets and Socket.IO in Go - Tutorial</title>
      <link>https://cotutorial.github.io/golang/golang-websockets-tutorial/</link>
      <pubDate>Wed, 23 Aug 2017 19:29:11 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/golang-websockets-tutorial/</guid>
      <description>Note - This tutorial was written using Go version 1.9 and googollee/go-socket.io
 Websockets are something I find interesting in the sense that they provide us with an alternative option to communication between applications as opposed to the standard RESTful API solution. With Sockets we can do cool things such as real-time communication between thousands to hundreds of thousands of different clients without having to incur the expense of hundreds of thousands of RESTful API calls hitting our servers every minute.</description>
    </item>
    
    <item>
      <title>Go Protocol Buffer Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-protocol-buffer-tutorial/</link>
      <pubDate>Sat, 01 Sep 2018 18:53:06 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-protocol-buffer-tutorial/</guid>
      <description>Welcome fellow coders! In this tutorial, we are going to be looking at how you can utilize the Protocol Buffers data format within your Go-based applications. We&amp;rsquo;ll be covering what the data format is, and why it is an improvement over more traditional data formats such as XML or even JSON. And we&amp;rsquo;ll dive into a simple example to get us up and running before trying our hands at a more complex example.</description>
    </item>
    
    <item>
      <title>Go WebAssembly Tutorial - Building a Calculator Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-webassembly-tutorial/</link>
      <pubDate>Sat, 25 Aug 2018 15:54:23 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-webassembly-tutorial/</guid>
      <description>Update - The code in this tutorial has been updated to work with the breaking changes in Go v1.12
 Welcome All! With Go v1.11 having just been released with an experimental port to WebAssembly included, I thought it would be awesome to see how we can write our own Go programs that compile straight to WebAssembly!
So, in this article, we are going to be building a really simple calculator to give us an idea as to how we can write functions that can be exposed to the frontend, evaluate DOM elements and subsequently update any DOM elements with the results from any functions we call.</description>
    </item>
    
    <item>
      <title>Go Oauth2 Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-oauth2-tutorial/</link>
      <pubDate>Mon, 10 Sep 2018 20:04:14 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-oauth2-tutorial/</guid>
      <description>Welcome fellow coders! In this tutorial, we are going to be taking a look at how you can implement your own OAuth2 Server and client using the go-oauth2/oauth2 package.
This is without a doubt one of the most requested topics from commentors on my YouTube videos and it&amp;rsquo;s certainly something that I myself find incredibly interesting.
Security is without doubt a very important feature for any public and even private facing service or API and it&amp;rsquo;s something that you need to pay a lot of attention to in order to get it right.</description>
    </item>
    
    <item>
      <title>Go Face Recognition Tutorial - Part 1</title>
      <link>https://cotutorial.github.io/golang/go-face-recognition-tutorial-part-one/</link>
      <pubDate>Thu, 27 Sep 2018 10:48:51 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-face-recognition-tutorial-part-one/</guid>
      <description>The whole area of Face Recognition is something I love reading about. Implementing a facial recognition system yourself makes you sound like you are Tony Stark and you can use them for a variety of different projects such as an automatic lock on your door, or building a surveillance system for your office to name but a few.
In this tutorial, we are going to be building our own, really simple face recognition based system in Go using a few existing libraries.</description>
    </item>
    
    <item>
      <title>Go Encryption and Decryption using AES - Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-encrypt-decrypt-aes-tutorial/</link>
      <pubDate>Thu, 27 Sep 2018 10:48:51 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-encrypt-decrypt-aes-tutorial/</guid>
      <description>Objectives By the end of this tutorial, you will be able to&amp;hellip;
 Encrypt text using the AES - Advanced Encryption Standard in Go We&amp;rsquo;ll then look at writing this encrypted message to a file Finally we&amp;rsquo;ll look at how we can decrypt this message using a shared secret  From this, you should be able to build your own simple encryption systems that can do various things like, encrypt files on your file system and protect them with a passphrase only you know or add simple encryption to various parts of the systems that you are working on.</description>
    </item>
    
    <item>
      <title>Building a Solid Continuous Integration Pipeline with TravisCI for Your Go Projects</title>
      <link>https://cotutorial.github.io/golang/building-ci-cd-pipeline-go-projects/</link>
      <pubDate>Tue, 16 Oct 2018 20:10:30 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/building-ci-cd-pipeline-go-projects/</guid>
      <description>So, I recently partook in Hacktoberfest which is an event that helps to support thousands of different Open Source projects. Usually, I tend to get caught up in other projects or can&amp;rsquo;t find the time or make up a hundred other excuses for not taking part.
This year however, is different, and I&amp;rsquo;ve made an attempt at doing more Open Source work just so I can earn myself a free t-shirt.</description>
    </item>
    
    <item>
      <title>Improving Your Go Development Workflow With Git Hooks</title>
      <link>https://cotutorial.github.io/golang/improving-go-workflow-with-git-hooks/</link>
      <pubDate>Fri, 02 Aug 2019 08:05:10 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/improving-go-workflow-with-git-hooks/</guid>
      <description>Git hooks are a pretty powerful way of improving your development workflow without having to remember to run additional scripts or perform additional tasks. In this article, we are going to be taking a look at how you can define your own simple git hooks within a project repository that can automatically perform the task of linting + formating your Go code.
This fairly simple example should give you a flavour as to how you can leverage git hooks for your own devious plans.</description>
    </item>
    
    <item>
      <title>Getting Started with Redis and Go - Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-redis-tutorial/</link>
      <pubDate>Sun, 28 Jul 2019 09:44:24 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-redis-tutorial/</guid>
      <description>Hi everyone, in this tutorial, we are going to be looking at how you can effectively use Redis as a backend solution for your Go applications.
Prerequisites If you wish to follow this tutorial on your local machine, you&amp;rsquo;ll need to have the following installed on your machine:
 Docker - this will be needed to run a local instance of redis, if you already have a redis service then Docker is not needed.</description>
    </item>
    
    <item>
      <title>Check Key Exists in Map Go</title>
      <link>https://cotutorial.github.io/golang/snippets/check-key-exists-in-map-go/</link>
      <pubDate>Wed, 17 Jul 2019 07:58:40 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/snippets/check-key-exists-in-map-go/</guid>
      <description>In this code snippet, we are going to look at how you can check to see if a key exists within a Map in Go
 main.go  package main import &amp;#34;fmt&amp;#34; func main() { mymap := make(map[string]int) mymap[&amp;#34;elliot&amp;#34;] = 25 // we can use this if statement to check to see if  // a given key &amp;#34;elliot&amp;#34; exists within a map in Go  if _, ok := mymap[&amp;#34;elliot&amp;#34;]; ok { // the key &amp;#39;elliot&amp;#39; exists within the map  fmt.</description>
    </item>
    
    <item>
      <title>Concatenate Strings in Go</title>
      <link>https://cotutorial.github.io/golang/snippets/concatenate-strings-in-go/</link>
      <pubDate>Mon, 15 Jul 2019 19:30:49 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/snippets/concatenate-strings-in-go/</guid>
      <description>In this code snippet, we are going to look at how you can efficiently concatenate strings in Go using the string.Builder type.
 main.go  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main() { fmt.Println(&amp;#34;String Concatenation Tutorial&amp;#34;) var myString strings.Builder // we can use the WriteString method to append 	// to our existing strings.Builder string  myString.WriteString(&amp;#34;Hello &amp;#34;) // here we append to the end of our string  myString.</description>
    </item>
    
    <item>
      <title>Sort Map by Value</title>
      <link>https://cotutorial.github.io/golang/snippets/sort-map-by-value/</link>
      <pubDate>Mon, 15 Jul 2019 19:30:49 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/snippets/sort-map-by-value/</guid>
      <description>In this code snippet, we are going to look at how you can quickly and easily sort maps in Go using the sort package.
 Sort Map by Length of Keys main.go  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sort&amp;#34; ) func main() { mymap := map[string]int{&amp;#34;Elliot&amp;#34;: 25, &amp;#34;Sophie&amp;#34;: 24, &amp;#34;Fraser&amp;#34;: 20} // make an array of type string to store our keys 	keys := []string{} // iterate over the map and append all keys to our 	// string array of keys 	for key := range mymap { keys = append(keys, key) } // use the sort method to sort our keys array 	sort.</description>
    </item>
    
    <item>
      <title>Makefiles for Go Developers</title>
      <link>https://cotutorial.github.io/golang/makefiles-for-go-developers/</link>
      <pubDate>Thu, 06 Jun 2019 20:02:23 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/makefiles-for-go-developers/</guid>
      <description>In this tutorial, we are going to be looking at how you, as a Go developer, can leverage the wonderful bit of technology that is Makefiles for fame and fortune when developing your own Go applications.
What are Makefiles? Let&amp;rsquo;s start by looking at what Makefiles are first of all. Makefiles are an incredibly useful automation tool that you can use to run and build not just your Go applications, but for most programming languages.</description>
    </item>
    
    <item>
      <title>Go Sorting With the sort Package - Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-sorting-with-sort-tutorial/</link>
      <pubDate>Sun, 26 May 2019 07:49:44 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-sorting-with-sort-tutorial/</guid>
      <description>Sorting items to be in order is something that every programmer will undoubtedly have to do at one point in their career. There are different approaches and many different sorting algorithms available for you to choose from, but typically it is better to rely on already implemented packages to do your sorting for you.
Goals By the end of this tutorial, you will know how to:
 Implement basic sorting within your Go applications using the &amp;quot;sort&amp;quot; package.</description>
    </item>
    
    <item>
      <title>NodeJS JWT Authentication Tutorial</title>
      <link>https://cotutorial.github.io/nodejs/nodejs-jwt-authentication-tutorial/</link>
      <pubDate>Sat, 25 May 2019 14:08:54 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/nodejs-jwt-authentication-tutorial/</guid>
      <description>Welcome fellow programmers! In this tutorial, we are going to be looking at how we can add authentication to our NodeJS applications using JWTs.
We&amp;rsquo;ll be creating a REST API that feature a mixture of authenticated and un-authenticated JSON endpoints and we&amp;rsquo;ll be implementing a nice and simple JWT validation function that will verify incoming requests to ensure they have the appropriate authorization header set and that the value of that header is a verified JSON Web Token!</description>
    </item>
    
    <item>
      <title>Go Tickers Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-ticker-tutorial/</link>
      <pubDate>Thu, 02 May 2019 08:00:17 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-ticker-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at tickers in Go and how you can use tickers effectively within your own Go applications.
Tickers are exceptionally helpful when you need to perform an action repeatedly at given time intervals and we can use tickers, in combination with goroutines in order to run these tasks in the background of our applications.
Tickers vs Timers Before we dive in, it&amp;rsquo;s useful to know the distinction between both tickers and timers.</description>
    </item>
    
    <item>
      <title>Go Modules Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-modules-tutorial/</link>
      <pubDate>Fri, 19 Apr 2019 08:34:10 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-modules-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at how you can use Go modules in your Go applications to simplify the way you work with dependencies for your Go applications. We will be looking at how Go Modules work, and also what problems they solve for us, before finally going into developing a simple Go application which uses Go Modules.
Goals By the end of this tutorial:</description>
    </item>
    
    <item>
      <title>Go Multi-Stage Docker Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-multi-stage-docker-tutorial/</link>
      <pubDate>Sat, 16 Mar 2019 11:16:25 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-multi-stage-docker-tutorial/</guid>
      <description>Welcome fellow coders! In this tutorial, we are going to be looking at multi-stage Docker images and how you can use them to minimize the size of the container needed for your production Go applications.
By the end of this tutorial, we will have covered the following concepts:
 What Multi-stage Dockerfiles are. How we can build simple multi-stage Dockerfiles for our Go Apps  Docker is a seriously power containerization technology that can be used to easily spin up isolated and reproducible environments in which our applications can be built and run.</description>
    </item>
    
    <item>
      <title>Go Websocket Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-websocket-tutorial/</link>
      <pubDate>Thu, 14 Mar 2019 20:40:33 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-websocket-tutorial/</guid>
      <description>Hi Fellow Devs! In this tutorial, we are going to be looking at how we can use WebSockets within our own Go-based programs to do some cool real-time stuff.
By the end of this tutorial, we should have covered the following:
 What WebSockets are How we can build simple WebSocket Applications in Go  For the purpose of this tutorial, we&amp;rsquo;ll be working with the gorilla/websocket package as I&amp;rsquo;ve used it personally in a few production applications to great success.</description>
    </item>
    
    <item>
      <title>Containerizing your Go Applications with Docker - Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-docker-tutorial/</link>
      <pubDate>Sat, 02 Mar 2019 22:36:27 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-docker-tutorial/</guid>
      <description>Docker is a truly excellent bit of tech that allows us to specify the environment in which we want all of our applications to live within a simple Dockerfile. This effectively allows for easier collaboration and rids us of the &amp;ldquo;it works on my machine&amp;rdquo; problem that is soo prevalent in development teams across the globe.
As such, I felt it would be a great idea to write a tutorial on how you can effectively containerize your Go applications using the Docker containerization technology.</description>
    </item>
    
    <item>
      <title>My Hardware &#43; Software Setup for Recording YouTube Tutorials</title>
      <link>https://cotutorial.github.io/uses/</link>
      <pubDate>Sat, 02 Mar 2019 18:52:03 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/uses/</guid>
      <description>I&amp;rsquo;m constantly getting questions on what software/plugins/hardware I use to record my YouTube videos so I thought I&amp;rsquo;d write it up in one convenient place and just link this whenever the question pops up!
 Note - This was inspired by Wes Bos, who I am huge fan of! This list will be a living document that I will update whenever anything changes!
 Here&amp;rsquo;s a photo of my setup as it stands today:</description>
    </item>
    
    <item>
      <title>Building a Real-time YouTube Subscriber Monitor in Go</title>
      <link>https://cotutorial.github.io/golang/building-realtime-youtube-sub-monitor-go/</link>
      <pubDate>Sat, 23 Feb 2019 09:45:55 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/building-realtime-youtube-sub-monitor-go/</guid>
      <description>Welcome Everyone! In this tutorial, we are going to be having a bit of fun and we are going to be creating a real-time YouTube stats monitoring system in Go.
So, we are going to be looking at a number of different topics within this tutorial such as creating a WebSocket server and using WebSockets to communicate in real-time with a frontend application, as well as how you can interact with an existing REST API to get the subscriber stats we need.</description>
    </item>
    
    <item>
      <title>Uploading Files in Go - Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-file-upload-tutorial/</link>
      <pubDate>Sat, 09 Feb 2019 18:32:11 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-file-upload-tutorial/</guid>
      <description>Hi everybody! In this tutorial, we are going to be building a really simple file-upload HTTP server that allows you to upload your files to the server running your Go application.
There are countless different reasons why you would want to do this, you could be uploading CSV reports for further processing within your complex financial system, or you could be creating a cool image manipulation app that allows you to modify various aspects of any photos you want to upload.</description>
    </item>
    
    <item>
      <title>Scope and Ownership in Rust</title>
      <link>https://cotutorial.github.io/rust/scope-ownership-in-rust/</link>
      <pubDate>Wed, 30 Jan 2019 14:36:39 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/rust/scope-ownership-in-rust/</guid>
      <description>In Rust, every data value has a single owning scope—no more, no less. So, what&amp;rsquo;s a scope? The easy answer is that a scope is the place where a block expression stores its variables. Scopes are not directly represented in the source code, but a scope begins when a block expression begins, with a { symbol, and ends when the block expression ends, with } (or when a return statement is run before the block reaches its end).</description>
    </item>
    
    <item>
      <title>Components, Templates, and Props in Vue 2</title>
      <link>https://cotutorial.github.io/javascript/vuejs/components-templates-and-props-vue-2/</link>
      <pubDate>Wed, 30 Jan 2019 14:08:59 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/components-templates-and-props-vue-2/</guid>
      <description>To begin, let&amp;rsquo;s look at how to make a component in Vue. First, we specify the component, like this:
Vue.component(&amp;#34;custom-article&amp;#34;, { template: ` &amp;lt;article&amp;gt; Our own custom article component!&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/article&amp;gt;` }); new Vue({ el: &amp;#34;#app&amp;#34; });  A component is a block of code that we give a custom name. This custom name can be anything we come up with, and it&amp;rsquo;s a single label for that entire block of code in the form of a custom HTML tag.</description>
    </item>
    
    <item>
      <title>Go JSON Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-json-tutorial/</link>
      <pubDate>Mon, 21 Jan 2019 19:07:28 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-json-tutorial/</guid>
      <description>Welcome fellow Gophers! In this tutorial, we are going to be taking a comprehensive look at how we can work with JSON in our Go applications.
JSON, or JavaScript Object Notation, is without a doubt the most popular data format for sending and receiving data across the web. All major languages support the data format by default and Go is no different.
 Source Code - The full source code for this tutorial can be found here: TutorialEdge/go-json-tutorial</description>
    </item>
    
    <item>
      <title>Setting Up your Development Environment for Building a Genetic Adversarial Network</title>
      <link>https://cotutorial.github.io/python/data-science/setting-up-dev-environment-building-gan/</link>
      <pubDate>Sat, 19 Jan 2019 11:11:06 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/data-science/setting-up-dev-environment-building-gan/</guid>
      <description>What&amp;rsquo;s a development environment? Everyone thinks setting up a development environment needs to be this incredibly arduous process. The installation process could be worse. It&amp;rsquo;s actually quite simple and this article intends to show you the basics.
Getting ready Let&amp;rsquo;s lay out the requirements for the equipment you&amp;rsquo;ll need:
 GPU: 10 series CUDA-enabled Nidea GPU Operating system: Ubuntu Linux 16.04+ CPU/RAM: i5 or i7 with at least 8 GB of RAM  First and foremost, the GPU is a requirement.</description>
    </item>
    
    <item>
      <title>Preparing a Dataset for Machine Learning with scikit-learn</title>
      <link>https://cotutorial.github.io/python/data-science/preparing-dataset-machine-learning-scikit-learn/</link>
      <pubDate>Sat, 19 Jan 2019 10:53:22 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/data-science/preparing-dataset-machine-learning-scikit-learn/</guid>
      <description>The first step to implementing any machine learning algorithm with scikit-learn is data preparation. Scikit-learn comes with a set of constraints to implementation. The dataset that we will be using is based on mobile payments and is found on the world&amp;rsquo;s most popular competitive machine learning website – Kaggle. You can download the dataset from: https://www.kaggle.com/ntnu-testimon/paysim1.
Once downloaded, open a new Jupyter Notebook using the following code in Terminal (macOS/Linux) or Anaconda Prompt/PowerShell (Windows):</description>
    </item>
    
    <item>
      <title>Working with Temporary Files and Directories in Go 1.11</title>
      <link>https://cotutorial.github.io/golang/temporary-files-directories-go-111/</link>
      <pubDate>Thu, 10 Jan 2019 11:21:58 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/temporary-files-directories-go-111/</guid>
      <description>Go 1.11 brought some very cool new functionality such as the experimental Go Modules feature as well as the ability to create temporary files and directories using the new TempFile and TempDir functions within the ioutil package.
The temporary files and directories created from these function calls are globally unique and this is awesome as it simplifies the way we handle hundreds or even thousands of files within our Go programs.</description>
    </item>
    
    <item>
      <title>Go Graphql Beginners Tutorial - Part 2</title>
      <link>https://cotutorial.github.io/golang/go-graphql-beginners-tutorial-part-2/</link>
      <pubDate>Fri, 28 Dec 2018 20:56:55 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-graphql-beginners-tutorial-part-2/</guid>
      <description>Note - This tutorial is part of a 2-part mini-series on GraphQL, the first part of this tutorial can be found here: Go GraphQL Beginners Tutorial - Part 1
 Welcome fellow Gophers! In this tutorial, we are going to be expanding upon the work we did in our previous GraphQL Go tutorial and looking at mutations and implementing proper data-sources behind our GraphQL API.
In the previous tutorial, we looked at some of the major benefits of GraphQL and how it could greatly improve the way we retrieve data for particular components within our applications.</description>
    </item>
    
    <item>
      <title>Go GraphQL Beginners Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-graphql-beginners-tutorial/</link>
      <pubDate>Thu, 27 Dec 2018 18:46:19 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-graphql-beginners-tutorial/</guid>
      <description>Welcome fellow Gophers! In this tutorial, we are going to be looking at how we can interact with a GraphQL server within our Go-based programs. By the end of this tutorial, we should hopefully know how to do the following:
 The basics of GraphQL Build a Simple GraphQL Server in Go Perform basic queries against GraphQL  We&amp;rsquo;ll be focused on the data-retrieval side of GraphQL in this tutorial and we&amp;rsquo;ll back it with an in-memory data source.</description>
    </item>
    
    <item>
      <title>An Introduction to Go Closures - Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-closures-tutorial/</link>
      <pubDate>Sat, 08 Dec 2018 13:33:45 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-closures-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at closures in Go. We&amp;rsquo;ll be covering the theory behind them, and we&amp;rsquo;ll look at how you can use them in your own Go applications.
Closures - The Theory So, let&amp;rsquo;s dive in the theory.
We can create and use closures within any programming language that supports functions as first-class object. Go, just so happens to be one such language, otherwise this article would be pointless.</description>
    </item>
    
    <item>
      <title>Go Variadic Function Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-variadic-function-tutorial/</link>
      <pubDate>Thu, 06 Dec 2018 21:38:44 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-variadic-function-tutorial/</guid>
      <description>Note - This tutorial is a follow on from my previous article on regular functions in go: Go Functions Tutorial
 In this tutorial, we are going to be looking at Variadic Functions in Go. We&amp;rsquo;ll be covering how to implement and how to use these functions within your own Go applications.
Variadic Functions There are times, when we do not know how many string arguments we will require for our functions.</description>
    </item>
    
    <item>
      <title>Go WaitGroup Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-waitgroup-tutorial/</link>
      <pubDate>Wed, 05 Dec 2018 13:03:31 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-waitgroup-tutorial/</guid>
      <description>If you are just starting your journey about learning Go and how to implement highly concurrent, high-performance applications, then an understanding of WaitGroups is vital.
In this tutorial, we are going to be covering the following:
 What WaitGroups are and when we should use them A simple example of working with WaitGroups A real world example of WaitGroups  By the end of this, you should have a solid grasp as to how to employ WaitGroups within your own concurrent Go applications.</description>
    </item>
    
    <item>
      <title>Working With Environment Variables in Go</title>
      <link>https://cotutorial.github.io/golang/working-with-environment-variables-in-go/</link>
      <pubDate>Tue, 04 Dec 2018 16:15:42 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/working-with-environment-variables-in-go/</guid>
      <description>As we start to build ever more complex Go-based applications, we start to face challenges when it comes to safely introducing new features, or handling credentials for the likes of databases, or brokers.
Using environment variables is an excellent way to simplify a number of different aspects such as handling credentials across various different environments, as well as simplifying the implementation of feature flags in your system.
In this tutorial, we will be covering:</description>
    </item>
    
    <item>
      <title>The Min-Max Algorithm in Java</title>
      <link>https://cotutorial.github.io/artificial-intelligence/min-max-algorithm-in-java/</link>
      <pubDate>Wed, 28 Nov 2018 11:50:17 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/artificial-intelligence/min-max-algorithm-in-java/</guid>
      <description>In order to understand the min-max algorithm, you should get familiar with game playing and game trees. Game playing can be classified as game trees. What is a game tree? A tree is made of a root node, and a root node has child nodes; each child node is subdivided into multiple children.
This forms a tree, and the terminal nodes are termed leaves, as shown in the following diagram:</description>
    </item>
    
    <item>
      <title>Writing a Frontend Web Framework with WebAssembly And Go</title>
      <link>https://cotutorial.github.io/golang/writing-frontend-web-framework-webassembly-go/</link>
      <pubDate>Sun, 28 Oct 2018 10:28:34 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/golang/writing-frontend-web-framework-webassembly-go/</guid>
      <description>JavaScript Frontend frameworks have undoubtedly helped to push the boundaries of what was previously possible in the context of a browser. Ever more complex applications have come out built on top of the likes of React, Angular and VueJS to name but a few and there&amp;rsquo;s the well known joke about how a new frontend framework seems to come out every day.
However, this pace of development is exceptionally good news for developers around the world.</description>
    </item>
    
    <item>
      <title>Securing Your Go REST APIs With JWTs</title>
      <link>https://cotutorial.github.io/golang/authenticating-golang-rest-api-with-jwts/</link>
      <pubDate>Mon, 22 Oct 2018 19:26:44 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/authenticating-golang-rest-api-with-jwts/</guid>
      <description>Note - The full source code for this tutorial can be found here: TutorialEdge/go-jwt-tutorial
 JWTs, or JSON Web Tokens as they are more formally known, are a compact, URL-safe means of representing claims to be transferred between two parties. This is essentially a confusing way of saying that JWTs allow you to transmit information from a client to the server in a stateless, but secure way.
Prerequisites Before you can follow this article, you will need the following:</description>
    </item>
    
    <item>
      <title>Stability Patterns in Angular</title>
      <link>https://cotutorial.github.io/typescript/angular/stability-patterns-in-angular/</link>
      <pubDate>Mon, 22 Oct 2018 12:46:35 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/stability-patterns-in-angular/</guid>
      <description>Stability is one of the cornerstones of software engineering. No matter what, you must expect the worst from your environment and your users, and be prepared for it. Your Angular applications should be able to operate in a degraded mode when your backend is burning and smoothly recover when it comes back online. In this article, you’ll learn about stability patterns, timeouts and the circuit breaker.
Timeouts You can never trust an API to work as expected, even if it is your own API.</description>
    </item>
    
    <item>
      <title>Building an IMDB Top 250 Clone with Pandas</title>
      <link>https://cotutorial.github.io/python/building-imdb-top-250-clone-pandas/</link>
      <pubDate>Sun, 21 Oct 2018 19:20:13 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/building-imdb-top-250-clone-pandas/</guid>
      <description>The Internet Movie Database (IMDB) maintains a chart called the IMDB Top 250, which is a ranking of the top 250 movies according to a certain scoring metric. All the movies in this list are non-documentary, theatrical releases with a runtime of at least 45 minutes and over 250,000 ratings:
This chart can be considered the simplest of recommenders. It doesn&amp;rsquo;t take into consideration the tastes of a particular user nor does it try to deduce similarities between different movies.</description>
    </item>
    
    <item>
      <title>Go Decorator Function Pattern Tutorial</title>
      <link>https://cotutorial.github.io/golang/go-decorator-function-pattern-tutorial/</link>
      <pubDate>Sat, 20 Oct 2018 21:34:14 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/go-decorator-function-pattern-tutorial/</guid>
      <description>Decorators are certainly more prominent in other programming languages such as Python and TypeScript, but that&amp;rsquo;s not to say you can&amp;rsquo;t use them in Go. In fact, for certain problems, using decorators is the perfect solution as we&amp;rsquo;ll hopefully be finding out in this tutorial.
Understanding the Decorator Pattern  Decorators essentially allow you to wrap existing functionality and append or prepend your own custom functionality on top.
 In Go, functions are deemed as first class objects which essentially means you can pass them around just as you would a variable.</description>
    </item>
    
    <item>
      <title>Improving Your Go Tests and Mocks With Testify</title>
      <link>https://cotutorial.github.io/golang/improving-your-tests-with-testify-go/</link>
      <pubDate>Sat, 13 Oct 2018 09:53:51 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/improving-your-tests-with-testify-go/</guid>
      <description>Assertions are something that I genuinely feel the standard library in Go is missing. You can most definitely achieve the same results with the likes of if comparisons and whatever else, but it&amp;rsquo;s not the cleanest way to write your test files.
This is where the likes of stretchr/testify comes in to save the day. This package has quickly become one of the most popular testing packages, if not the most popular testing package for Go developers around the world.</description>
    </item>
    
    <item>
      <title>Creating a Custom Diffuse Lighting Model in Unity - Tutorial</title>
      <link>https://cotutorial.github.io/gamedev/unity/custom-diffuse-lighting-model-unity-tutorial/</link>
      <pubDate>Mon, 01 Oct 2018 18:49:06 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/gamedev/unity/custom-diffuse-lighting-model-unity-tutorial/</guid>
      <description>If you are familiar with Unity 4, you may know that the default shader provided by it was based on a lighting model called the Lambertian reflectance. This article shows you how you can create a shader with a custom lighting model and explains the mathematics involved along with the implementation. The following diagram shows the same geometry rendered with a standard shader (right) and a diffuse Lambert one (left):</description>
    </item>
    
    <item>
      <title>How to Conduct ARP Spoofing for MITM Attacks - Tutorial</title>
      <link>https://cotutorial.github.io/security/arp-spoofing-for-mitm-attack-tutorial/</link>
      <pubDate>Sun, 30 Sep 2018 14:29:55 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/security/arp-spoofing-for-mitm-attack-tutorial/</guid>
      <description>Man-in-the-middle attacks A man-in-the-middle (MITM) attack is one of the most dangerous and effective attacks that you can carry out in a network. You can only perform it once you’re connected to the network.
It can be used to redirect the flow of packets from any client to your device. This means that any packet that is sent to or from the client will have to go through your device, and since you know the password and the key to the network, you’ll be able to read those packets.</description>
    </item>
    
    <item>
      <title>How to Create a Customary Hello Angular App – Guess the Number!</title>
      <link>https://cotutorial.github.io/typescript/angular/guess-the-number-angular-6-beginners-tutorial/</link>
      <pubDate>Wed, 25 Jul 2018 15:42:51 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/guess-the-number-angular-6-beginners-tutorial/</guid>
      <description>Learn how to create a customary Hello Angular App – Guess the Number! in this tutorial by Kevin Hennessy, a developer, team lead, and solutions architect, working on web-based projects, primarily using the Microsoft technology stack.
This article will help you create a simple “Guess the Number!” game, which will serve as a platform to launch you into the world of Angular and showcase the framework&amp;rsquo;s capabilities. The objective of the game is to guess a random computer-generated number in as few tries as possible.</description>
    </item>
    
    <item>
      <title>Building Real-time ReactJS Applications with Socket.Io - Tutorial</title>
      <link>https://cotutorial.github.io/react/react-socket-io-tutorial/</link>
      <pubDate>Sun, 15 Jul 2018 09:13:28 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/react/react-socket-io-tutorial/</guid>
      <description>In this article, we are going to be looking at how you can implement real-time websocket-based communication within your ReactJS web application.
Why Websockets? I&amp;rsquo;ve covered this numerous times in previous articles on this site as to why we should use websockets within our applications.
The benefits are numerous, and when we use socket.io, these benefits can be realized with minimal added complexity.
Let&amp;rsquo;s have a look at a real-life example.</description>
    </item>
    
    <item>
      <title>Docker for Go Developers</title>
      <link>https://cotutorial.github.io/docker/docker-for-go-developers/</link>
      <pubDate>Sat, 14 Jul 2018 22:33:43 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/docker/docker-for-go-developers/</guid>
      <description>In this tutorial, we are going to look at how we can leverage Docker as Go developers.
By the end of this tutorial, we will have covered the following topics:
 Creating a Simple Dockerfile for a simple Go Program Mounting Volumes in Docker Auto-build on changes  Our Basic Go Program For the purpose of this tutorial, we&amp;rsquo;ll be using the code from my go WebServer tutorial
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;html&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.</description>
    </item>
    
    <item>
      <title>Async/Await in Typescript - Tutorial</title>
      <link>https://cotutorial.github.io/typescript/async-await-in-typescript-tutorial/</link>
      <pubDate>Tue, 19 Jun 2018 20:29:57 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/async-await-in-typescript-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at how you can use both the async and await keywords within your TypeScript application and subsequently improve the readibility and succinctness of your code.
Introduction If you have come from a Node.JS background, you&amp;rsquo;ll most likely be familiar with something we know as Callback Hell. This is where you end up with code within your Node.JS applications that look akin to the Pyramids from ancient Giza.</description>
    </item>
    
    <item>
      <title>Typescript REST API And MongoDB Beginners Tutorial</title>
      <link>https://cotutorial.github.io/typescript/typescript-mongodb-beginners-tutorial/</link>
      <pubDate>Sun, 10 Jun 2018 18:56:37 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/typescript-mongodb-beginners-tutorial/</guid>
      <description>Source Code - The full source code for this tutorial can be found here: github.com/TutorialEdge/TypeScript-MongoDB-REST-Tutorial
 Introduction In this tutorial, we&amp;rsquo;ll be building a very simple REST API that will allow you to store, query, update and delete books from a book table within your MongoDB instance. This will hopefully cover everything you need to get a basic project up yourself for your own side projects.
Prerequisites In order to complete this tutorial, you are going to need the following:</description>
    </item>
    
    <item>
      <title>Testing a TypeScript API With Mocha and Chai</title>
      <link>https://cotutorial.github.io/typescript/testing-typescript-api-with-mocha-chai/</link>
      <pubDate>Sat, 09 Jun 2018 22:48:26 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/testing-typescript-api-with-mocha-chai/</guid>
      <description>We are going to be using the very simple TypeScript API we developed in a previous tutorial in order to learn about Mocha and Chai Testing.
 In this tutorial, we&amp;rsquo;ll be looking at how you can get a very simple test framework up and running for your TypesScript based API using the mocha and chai testing libraries.
Why Do We Test? Being able to accurately test any application you build is hugely important for any software developer regardless of the technology stack they are working with.</description>
    </item>
    
    <item>
      <title>Testing Typescript Api With Jest and Supertest</title>
      <link>https://cotutorial.github.io/typescript/testing-typescript-api-with-jest/</link>
      <pubDate>Sat, 09 Jun 2018 22:48:26 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/testing-typescript-api-with-jest/</guid>
      <description>We are going to be using the very simple TypeScript API we developed in a previous tutorial in order to learn about Jest Testing.
 In this tutorial, we&amp;rsquo;ll be looking at how you can get a very simple test framework up and running for your TypesScript based API using the jest and supertest testing libraries.
Installation Now that we have gotten the why? out of the way, let&amp;rsquo;s see how we can go about implementing our own testing framework:</description>
    </item>
    
    <item>
      <title>Getting Started with Typescript and Socket.Io - Tutorial</title>
      <link>https://cotutorial.github.io/typescript/typescript-socket-io-tutorial/</link>
      <pubDate>Wed, 30 May 2018 18:09:26 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/typescript-socket-io-tutorial/</guid>
      <description>Last Updated - 24th December, 2018
 Welcome friends! In this tutorial, we are going to be looking at how you can build a websocket based server using both TypeScript and Socket.io.
We&amp;rsquo;ll be covering the following:
 What WebSockets are and why they are beneficial Building a Simple TypeScript WebSocket Server Building a Simple client to connect to our Server Two-way communication between our client and our server  WebSockets WebSockets are an awesome technology and I absolutely love playing around with them and creating real-time applications.</description>
    </item>
    
    <item>
      <title>Working With Docker and NodeJS - Tutorial</title>
      <link>https://cotutorial.github.io/docker/working-with-docker-nodejs/</link>
      <pubDate>Sun, 27 May 2018 21:40:20 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/docker/working-with-docker-nodejs/</guid>
      <description>The full source code for this tutorial can be found here: TutorialEdge/Docker/node-docker
 In this tutorial, we are going to be looking at how you can dockerize an existing NodeJS application and ultimately leverage the benefits of Docker. We&amp;rsquo;ll be creating a Docker image that will dynamically pick up changes to a NodeJS application and automatically recompile and rerun our application without having to rebuild and re-run our docker image.</description>
    </item>
    
    <item>
      <title>Getting Started With Docker</title>
      <link>https://cotutorial.github.io/docker/getting-started-with-docker/</link>
      <pubDate>Fri, 18 May 2018 14:25:51 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/docker/getting-started-with-docker/</guid>
      <description>In this tutorial, we are going to be taking a look at what Docker is, why it&amp;rsquo;s needed and how you can get up and running using Docker in your day-to-day development.
What Is Docker? Docker is a containerization technology that allows you to package up your application into something that will run everywhere that Docker can run.
You typically define absolutely everything you need for your application within your docker file and no more.</description>
    </item>
    
    <item>
      <title>Building a RESTful API using Express and Typescript</title>
      <link>https://cotutorial.github.io/typescript/creating-rest-api-express-typescript/</link>
      <pubDate>Wed, 28 Mar 2018 20:25:53 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/creating-rest-api-express-typescript/</guid>
      <description>In this tutorial, we are going to be building a REST API using both express and TypeScript! This REST API will simply return a status depending on what API endpoint we hit using our HTTP Client.
Prerequisites You will require at least the following:
 TypeScript 2.8.1 The Yarn Package Manager ExpressJS  Our Project Layout So within our project, we are going to create a couple of incredibly simple endpoints that will simply return a few simple strings, depending on what HTTP verb is used to hit said route.</description>
    </item>
    
    <item>
      <title>Part 1 - Initial Setup</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-1-initial-setup/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-1-initial-setup/</guid>
      <description>We&amp;rsquo;ll start off this course by setting up both of our projects. Once we&amp;rsquo;ve got the fairly boring setup out of the way, we can begin to add new functionality and build up our application and see some positive results!
Goals By the end of this part of the tutorial series, you will have:
 Created the basic Go application within a backend/ directory. Created a basic ReactJS application within a frontend/ directory.</description>
    </item>
    
    <item>
      <title>Part 2 - Simple Communication</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-2-simple-communication/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-2-simple-communication/</guid>
      <description>Note - This post is part 2 of a series on building a chat application in Go with ReactJS. You can find part 1 here - Part 1 - Initial Setup
 So, now that we have our basic frontend and backend set up, it&amp;rsquo;s time to actually do something with them.
In this part of the series, we&amp;rsquo;ll be implementing a basic WebSocket server which will listen for messages and write them back to via the same WebSocket.</description>
    </item>
    
    <item>
      <title>Part 3 - Designing our Frontend</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-3-designing-our-frontend/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-3-designing-our-frontend/</guid>
      <description>Note - This post is part 3 of a series on building a chat application in Go with ReactJS. You can find part 2 here - Part 2 - Simple Communication
 In this part of the series, we&amp;rsquo;re going to be looking at improving our frontend and fleshing out the application so that it looks and feels like a decent online chat application.
By the end of this part of the series, you should have a really solid looking frontend which looks a little something like this:</description>
    </item>
    
    <item>
      <title>Part 4 - Handling Multiple Clients</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-4-handling-multiple-clients/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-4-handling-multiple-clients/</guid>
      <description>Note - This post is part 4 of a series on building a chat application in Go with ReactJS. You can find part 3 here - Part 3 - Designing Our Frontend
 It&amp;rsquo;s time to implement the ability to handle multiple clients and broadcast any received messages to every connected client. By the end of this part of the series we&amp;rsquo;ll have:
 implemented a Pool mechanism that will effectively allow us to track how many connections we have into our WebSocket server.</description>
    </item>
    
    <item>
      <title>Part 5 - Improving the Frontend</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-5-improved-frontend/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-5-improved-frontend/</guid>
      <description>Note - This post is part 5 of a series on building a chat application in Go with ReactJS. You can find part 4 here - Part 4 - Handling Multiple Clients
 Welcome to the 5th part of this series! If you&amp;rsquo;ve made it this far then I sincerely hope you are enjoying learning new Go concepts and building up your own chat system in Go and React!</description>
    </item>
    
    <item>
      <title>Part 6 - Dockerizing your Backend</title>
      <link>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-6-dockerizing-your-backend/</link>
      <pubDate>Mon, 19 Mar 2018 11:05:52 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/projects/chat-system-in-go-and-react/part-6-dockerizing-your-backend/</guid>
      <description>Note - This post is part 6 of a series on building a chat application in Go with ReactJS. You can find part 5 here - Part 5 - Improving the Frontend
 In this part of the series, we are going to be focusing on adding Docker to our backend application.
Why are we doing this now you might ask? Well, before we look into things like authentication, load balancing and deployment, it&amp;rsquo;ll be good to have a standard way of deploying our application using containerization technology.</description>
    </item>
    
    <item>
      <title>NodeJS 404 Checker Tutorial</title>
      <link>https://cotutorial.github.io/nodejs/nodejs-404-checker-tutorial/</link>
      <pubDate>Sun, 11 Mar 2018 14:08:54 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/nodejs-404-checker-tutorial/</guid>
      <description>Introduction In this tutorial, we&amp;rsquo;ll be looking at how you can create a nice and simple 404 broken link checker in NodeJS using the axios library as well as cheerio and is-relative-url.
 We will be taking advantage of the async and await keywords in this tutorial. You can find out more on them here: JavaScript async and await Tutorial
 Let&amp;rsquo;s begin by creating a simple async function that will retrieve all of the links from a passed in URL.</description>
    </item>
    
    <item>
      <title>Javascript Async Await Tutorial</title>
      <link>https://cotutorial.github.io/javascript/javascript-async-await-tutorial/</link>
      <pubDate>Sat, 10 Mar 2018 20:59:31 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/javascript-async-await-tutorial/</guid>
      <description>In this tutorial, we are going to have a look at how you can make your JavaScript programs more syntactically beautiful with the use of both the async and await keywords. Both of these keywords were introduced into Node in version 7.6. Hopefully, by the end of the tutorial, you will be going back to refactor all of your old NodeJS based applications to replace all of your chained callbacks and promises.</description>
    </item>
    
    <item>
      <title>Creating Go Based Lambda Functions in AWS - Tutorial</title>
      <link>https://cotutorial.github.io/cloud/aws/creating-go-lambda-functions-tutorial/</link>
      <pubDate>Sun, 21 Jan 2018 11:22:33 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/cloud/aws/creating-go-lambda-functions-tutorial/</guid>
      <description>If you haven&amp;rsquo;t heard already AWS recently announced support for creating AWS Lambda functions using the Go programming language. As a huge fan of the language and of AWS itself I thought this would be the perfect opportunity to combine both and create a simple tutorial on how to create your own Lambda functions in Go.
Video Tutorial  Conclusion If you found this tutorial useful or require further assistance then please feel free to let me know in the comments section below!</description>
    </item>
    
    <item>
      <title>Working with JSON in Rust - Tutorial</title>
      <link>https://cotutorial.github.io/rust/rust-working-with-json-tutorial/</link>
      <pubDate>Mon, 25 Dec 2017 11:51:47 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/rust/rust-working-with-json-tutorial/</guid>
      <description>This tutorial was built using Rust Version: 1.22.1
 Introduction Most programming languages support JSON as part of the core language by default. It&amp;rsquo;s an incredibly popular data format that is used in millions of different applications.
In this tutorial we&amp;rsquo;ll be looking at how you can effectively work with JSON objects within our own Rust based systems. In order to do this we&amp;rsquo;ll be creating a very simple REST API that will do a variety of different things with JSON objects.</description>
    </item>
    
    <item>
      <title>Data Structures - Sets For Beginners</title>
      <link>https://cotutorial.github.io/compsci/data-structures/sets-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:22:37 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/data-structures/sets-for-beginners/</guid>
      <description>Under Construction
 In this tutorial we are going to look at the set data structure in computer science and how you can leverage it within your applications. We&amp;rsquo;ll be covering this concept using the Python programming language.
Sets in Mathematics Understanding Sets and basic Set Theory in Mathematics is a fundamental skill. The idea of a Set has been translated directly from mathematics into programming languages such as Python, and with this Set data structure, comes some incredibly useful functions such as union(), issubset(), intersection(), isdisjoint() that have also been translated directly over from Mathematics.</description>
    </item>
    
    <item>
      <title>Data Structures - Priority Queues For Beginners</title>
      <link>https://cotutorial.github.io/compsci/data-structures/priority-queues-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:22:26 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/data-structures/priority-queues-for-beginners/</guid>
      <description>This article uses Python 3.6 in order to demonstrate some of the concepts.
 In this article we&amp;rsquo;ll be covering Priority Queues and how they differ from your standard Queue data structure.
Why Do We Need Them? In order to explain this better, let&amp;rsquo;s think about a real-world example where a normal queueing system may not be the best idea. Let&amp;rsquo;s imagine you were implementing a queuing system for a hospital&amp;rsquo;s Accident and Emergency ward.</description>
    </item>
    
    <item>
      <title>Data Structures - Arrays for Beginners</title>
      <link>https://cotutorial.github.io/compsci/data-structures/arrays-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:03:08 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/data-structures/arrays-for-beginners/</guid>
      <description>Under Construction
 In this article we are going to be looking at the array data structure. We&amp;rsquo;ll be looking at some of the fundamental characteristics of the structure and how we can best leverage this within our own programs.
Intro Arrays represent a collection of elements, these elements can be of different types; integers, characters, strings, floating-point values and even composite types such as arrays which allows you to create nested array structures should you wish.</description>
    </item>
    
    <item>
      <title>Data Structures - Queues For Beginners</title>
      <link>https://cotutorial.github.io/compsci/data-structures/queues-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:02:47 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/data-structures/queues-for-beginners/</guid>
      <description>Under Construction
 In this tutorial we are going to look at the queue data structure. We&amp;rsquo;ll take a look at how this data structure can be used for various tasks and the various sort of things you can do with queues.
Introduction The queue data structure is typically used in scenarios where you want things to be processed in the same order that they were inputted into a system.</description>
    </item>
    
    <item>
      <title>Data Structures - Graphs For Beginners</title>
      <link>https://cotutorial.github.io/compsci/data-structures/compsci-graphs-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 22:02:28 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/data-structures/compsci-graphs-for-beginners/</guid>
      <description>Under Construction
 Graphs and graph traversal algorithms are a cornerstone of every computer scientists education. Every reputable university will feature one or more classes dedicated to this topic and with good reason, the theory covered within these topics branches into a number of practical uses.
If you are interested in going into something like Game Development then graphs feature pretty heavily.
 Game developers typically use algorithms such as the A* search algorithm in order to implement basic AI within their games.</description>
    </item>
    
    <item>
      <title>Data Structures - Stacks For Beginners</title>
      <link>https://cotutorial.github.io/compsci/data-structures/stacks-for-beginners/</link>
      <pubDate>Wed, 20 Dec 2017 21:29:51 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/data-structures/stacks-for-beginners/</guid>
      <description>Under Construction
 In this tutorial, we are going to be taking a look at stacks in Computer Science and how they can be used to effectively solve problems that we may face as software developers.
Stacks - The Theory I think the best way to imagine the stack data structure is to imagine a stack of pancakes. Typically, when you add a new pancake, it has to go on to the top of the existing pile.</description>
    </item>
    
    <item>
      <title>Python Method Resolution Order Tutorial</title>
      <link>https://cotutorial.github.io/python/python-method-resolution-order-tutorial/</link>
      <pubDate>Mon, 18 Dec 2017 11:23:34 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-method-resolution-order-tutorial/</guid>
      <description>Understanding the way and the order in which Python resolves functions is important. You need to know where your code is going to call, when you call it and things can get messy as soon as you start playing with classes inheriting from multiple other classes.
In this tutorial we&amp;rsquo;ll be looking at how Python 3 handles its MRO by using a little something called C3 Linearization.
The Problems with Inheritance Imagine you were implementing a programming language that featured inheritance.</description>
    </item>
    
    <item>
      <title>The Top Programming Books for Learning Rust</title>
      <link>https://cotutorial.github.io/rust/best-books-for-learning-rust/</link>
      <pubDate>Sun, 17 Dec 2017 15:07:54 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/rust/best-books-for-learning-rust/</guid>
      <description>In this article we will be looking at the best books you can buy to help you learn the basics of Rust Systems Development.
Rust is an incredibly fast systems programming language that is used by a very wide range of organizations such as mozilla (the original creators of the language), Atlassion, Dropbox and npm.
Programming Rust: Fast, Safe Systems Development Programming Rust: Fast, Safe Systems Development (1st Edition) is a fantastic resource for those of you willing to pick up the relatively new language.</description>
    </item>
    
    <item>
      <title>Creating Basic Python C Extensions - Tutorial</title>
      <link>https://cotutorial.github.io/python/python-c-extensions-tutorial/</link>
      <pubDate>Fri, 01 Dec 2017 21:32:19 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-c-extensions-tutorial/</guid>
      <description>This tutorial was built using Python 3.6. The official documentation can be found here: Extending and Embedding the Python Interpreter
 In this tutorial we are going to take a look at how you can create a really simple Python module using the C programming language. I felt this was a good topic to cover as I personally struggled with finding succinct documentation that worked and showed me the basics.</description>
    </item>
    
    <item>
      <title>An Introduction To Autoscaling Your Website or Service</title>
      <link>https://cotutorial.github.io/cloud/an-introduction-to-autoscaling-your-website/</link>
      <pubDate>Thu, 30 Nov 2017 21:21:51 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/cloud/an-introduction-to-autoscaling-your-website/</guid>
      <description>In this article we are going to look at autoscalers. We are going to look at how they work and how they can enable your service to dynamically grow and shrink to cope with variable demands.
The Scenario Imagine the scenario where you write a RESTful API that at first just requires a single server instance on AWS in order to sustain the initial demand placed on it. After a couple of weeks somebody who appreciates the your service posts it on a popular site such as /r/programming and you see demand double.</description>
    </item>
    
    <item>
      <title>How to use Terraform, Go, and AWS to build a scalable and resilient REST API</title>
      <link>https://cotutorial.github.io/cloud/build-scalable-rest-api-go-terraform-aws/</link>
      <pubDate>Thu, 30 Nov 2017 21:21:51 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/cloud/build-scalable-rest-api-go-terraform-aws/</guid>
      <description>I&amp;rsquo;ve recently been exploring the power of Terraform - and wanted to apply what I&amp;rsquo;ve learned to build a scalable and resilient REST API. In just a few simple steps, we&amp;rsquo;ll be using Terraform to provision our underlying AWS infrastructure and deploy our microservice developed with Go. Creating the RESTful API with GO To get started, let&amp;rsquo;s build and compile a simple codebase using Go. Once we build this microservice, we&amp;rsquo;ll provision an AWS EC2 instance for our execution environment.</description>
    </item>
    
    <item>
      <title>Basic Website Resiliency Patterns - Load Balancers</title>
      <link>https://cotutorial.github.io/cloud/basic-website-resiliency-load-balancers/</link>
      <pubDate>Wed, 29 Nov 2017 19:48:57 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/cloud/basic-website-resiliency-load-balancers/</guid>
      <description>In this article we are going to be looking at the concept of load balancers. We&amp;rsquo;ll be discussing what they are and how you can effectively use them to improve the reliability and resiliency of your websites and REST services and decrease downtime.
Load Balancers - What Are They? So the first thing you may be asking is, &amp;ldquo;what is a load balancer?&amp;rdquo;. We&amp;rsquo;ll to answer your question, load balancers enable us to effectively balance all incoming traffic/requests to a given website or service across multiple instances of your website or service.</description>
    </item>
    
    <item>
      <title>My Notes for the Certified Kubernetes Application Developer - Part 1, Core Concepts</title>
      <link>https://cotutorial.github.io/blog/my-notes-for-certified-kubernetes/</link>
      <pubDate>Wed, 29 Nov 2017 19:48:57 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/blog/my-notes-for-certified-kubernetes/</guid>
      <description>Recently, I’ve started studying for the Certified Kubernetes Application Developer certificate, CKAD for short, and I thought I would share some of the notes I took in an effort to try and pass this certification. This won’t be a comprehensive view of Kubernetes, but it should give anyone reading it a solid-enough grounding to base their own studies off of. If you find any mistakes here, LET ME KNOW ASAP, as I’m hoping to sit the test in the coming few weeks!</description>
    </item>
    
    <item>
      <title>The Top Books For Intermediate Level Programmers</title>
      <link>https://cotutorial.github.io/general/top-books-for-intermediate-programmers/</link>
      <pubDate>Tue, 28 Nov 2017 20:18:29 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/general/top-books-for-intermediate-programmers/</guid>
      <description>This list is currently under construction, if you know of any books that are potentially missing from this list then please let me know in the comments section below!
 In this article we will be looking at some of the very top books you can buy as an intermediate level programmer to improve your skills and become a true master of your craft.
Code Complete: A Practical Handbook of Software Construction (2nd Edition) This is without a doubt one of the best practical guides that any budding programmer should be reading in order to top up their programming skills.</description>
    </item>
    
    <item>
      <title>The Top Programming Books for Beginners</title>
      <link>https://cotutorial.github.io/general/top-beginner-programming-books/</link>
      <pubDate>Tue, 28 Nov 2017 18:04:33 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/general/top-beginner-programming-books/</guid>
      <description>In this article we will be looking at the best books you can buy to help you learn the basics of computer programming.
Code Complete: 2 This is without a doubt one of the best practical guides that any budding programmer should be reading in order to top up their programming skills. This book contains a massive number of practical points that touch upon a wide range of different topics.</description>
    </item>
    
    <item>
      <title>Asyncio Semaphores and Bounded Semaphores Tutorial</title>
      <link>https://cotutorial.github.io/python/concurrency/python-asyncio-semaphores-tutorial/</link>
      <pubDate>Fri, 24 Nov 2017 13:39:00 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/concurrency/python-asyncio-semaphores-tutorial/</guid>
      <description>This tutorial was built on top of Python 3.6.
 In this tutorial we&amp;rsquo;ll be looking at semaphores and bounded-semaphores and how they work within the Asyncio framework.
Video Tutorial  What Are Semaphores? Semaphores were originally a key part of railway system architecture and it was the famous Dijkstra that translated this real-world concept into our computing world.
These semaphores have an internal counter that is incremented and decremented whenever either an acquire or a release call is made.</description>
    </item>
    
    <item>
      <title>Asyncio Synchronization Primitives Tutorial - Queues and Locks</title>
      <link>https://cotutorial.github.io/python/concurrency/asyncio-synchronization-primitives-tutorial/</link>
      <pubDate>Thu, 23 Nov 2017 19:35:09 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/concurrency/asyncio-synchronization-primitives-tutorial/</guid>
      <description>This tutorial was built on top of Python 3.6
 Video Tutorial  In this tutorial we&amp;rsquo;ll be looking at the various synchronization primitives available to you in your Asyncio programming adventures. We&amp;rsquo;ll be taking a brief look at why these synchronization primitives are important and also the various ways you can use them within a simple Asyncio based program.
Why Are These Important? When it comes to programming concurrent systems you have to try and ensure that your program is free from a little thing called a Race Condition.</description>
    </item>
    
    <item>
      <title>Implementing Quicksort in Python</title>
      <link>https://cotutorial.github.io/compsci/sorting/quicksort-in-python/</link>
      <pubDate>Mon, 20 Nov 2017 18:09:47 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/sorting/quicksort-in-python/</guid>
      <description>This tutorial was built using Python 3.6
 Quicksort is one of the most popular sorting algorithms you will come across in computer science. This is because of it&amp;rsquo;s average case performance of O(n log n).
The Quicksorting algorithm uses a divide-and-conquer approach and recursively partitions the elements in an unsorted array around a randomly picked pivot element.
 A Random Pivot element is chosen from our unsorted array.</description>
    </item>
    
    <item>
      <title>Implementing Selection Sort in Python</title>
      <link>https://cotutorial.github.io/compsci/sorting/selection-sort-in-python/</link>
      <pubDate>Mon, 20 Nov 2017 18:09:47 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/sorting/selection-sort-in-python/</guid>
      <description>Welcome all! In this tutorial, we are going to be looking at how you can implement the selection sort in Python!
Theory How does the selection sorting algorithm work? Well it sorts data by finding the smallest item and swapping it into the array in the first unsorted location.
 It enumerates the array from the first unsorted element to the end Identifies the smallest item Swaps the smallest item with the first unsorted item  The selection sorting algorithm typically performs better than the bubble sort and typically worse than the insertion sorting algorithm.</description>
    </item>
    
    <item>
      <title>Getting Started With Tries in Python</title>
      <link>https://cotutorial.github.io/compsci/data-structures/getting-started-with-tries-in-python/</link>
      <pubDate>Sun, 19 Nov 2017 17:17:29 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/data-structures/getting-started-with-tries-in-python/</guid>
      <description>This tutorial uses Python 3.6 in order to convey the concepts that I will be covering.
 A Trie in computer science is a tree structure that allows you to do things such as very quick lookup of words within the english language. Typically if you were to write a word processor that did spell checks against words in a document, you would implement a trie and perform a very quick lookup to check whether or not the words in your word document are indeed valid words.</description>
    </item>
    
    <item>
      <title>Data Structures - Hash Tables For Beginners</title>
      <link>https://cotutorial.github.io/compsci/data-structures/hash-tables-for-beginners/</link>
      <pubDate>Sun, 19 Nov 2017 08:57:29 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/data-structures/hash-tables-for-beginners/</guid>
      <description>This tutorial will use Python 3.6 to convey the concepts covered.
 So, in this tutorial, we are going to be looking at Hash Tables and how they can be used within our applications for fame and fortune. By the end of this tutorial, you should have a solid grasp of these Hash Tables and how they work under the covers.
An Introduction So, the first place we should start with is, what are hash tables?</description>
    </item>
    
    <item>
      <title>Bit Manipulation For Beginners</title>
      <link>https://cotutorial.github.io/compsci/bit-manipulation-for-beginners/</link>
      <pubDate>Sat, 18 Nov 2017 17:42:32 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/bit-manipulation-for-beginners/</guid>
      <description>In this tutorial we will be taking a look at bit manipulation and how you can use it to optimize some of the different parts of your systems when you are programming.
 In this tutorial we will be using Python 3.6 in order to demonstrate some of the concepts covered.
 Shift Left By shifting left we are essentially multiplying our original number by 2 * the number of times we shift left.</description>
    </item>
    
    <item>
      <title>Memoization For Beginners</title>
      <link>https://cotutorial.github.io/compsci/memoization-for-beginners/</link>
      <pubDate>Sat, 18 Nov 2017 16:10:25 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/memoization-for-beginners/</guid>
      <description>In this tutorial we are going to look at a concept in computer science called memoization. This is a really cool concept that allows us to optimize the runtime performance of some of our recursive algorithms by effectively caching the results of previous computations so that they don&amp;rsquo;t have to be continuously re-computed.
The Fibonacci Example Calculating Fibonacci in a recursive manner is quite possibly the best example I&amp;rsquo;ve come across when it comes to showing the power of memoization.</description>
    </item>
    
    <item>
      <title>Implementing The Insertion Sort Algorithm in Python</title>
      <link>https://cotutorial.github.io/compsci/sorting/insertion-sort-in-python/</link>
      <pubDate>Wed, 15 Nov 2017 18:12:50 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/sorting/insertion-sort-in-python/</guid>
      <description>This tutorial was built using Python 3.6
 In this tutorial we are going to be taking a look at the insertion sorting algorithm and how it works as well as how you can implement this algorithm in the Python programming language.
Insertion Sorting So the insertion sorting algorithm is a well known sorting algorithm that can sort an unsorted array in a worst case time of O(N^2) time.</description>
    </item>
    
    <item>
      <title>Implementing The Bubble Sort Algorithm in Python</title>
      <link>https://cotutorial.github.io/compsci/sorting/bubble-sort-in-python/</link>
      <pubDate>Wed, 15 Nov 2017 18:10:37 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/compsci/sorting/bubble-sort-in-python/</guid>
      <description>Note - This tutorial was built on top of Python 3.6
 In this tutorial we are going to be taking a quick look at the bubble sort sorting algorithm. This algorithm is another very well known sorting algorithm that is quite often referenced in technical interviews. It is amongst the worst performing sorting algorithm with an average and a worst case sorting complexity of O(N^2).
How It Works Bubble sort works by constantly iterating through an unsorted array and swapping values within that array until such times as no swaps are made within a full pass through the array.</description>
    </item>
    
    <item>
      <title>Asyncio Tasks Tutorial</title>
      <link>https://cotutorial.github.io/python/concurrency/asyncio-tasks-tutorial/</link>
      <pubDate>Sat, 11 Nov 2017 13:06:32 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/concurrency/asyncio-tasks-tutorial/</guid>
      <description>This tutorial was built on top of Python 3.6
 In this tutorial we&amp;rsquo;ll be looking at Tasks in Asyncio. We&amp;rsquo;ll be building on top of my previous tutorial on Asyncio Event Loops.
Tasks Tasks within Asyncio are responsible for the execution of coroutines within an event loop. These tasks can only run in one event loop at one time and in order to achieve parallel execution you would have to run multiple event loops over multiple threads.</description>
    </item>
    
    <item>
      <title>An Introduction to Face Recognition in Python</title>
      <link>https://cotutorial.github.io/python/intro-face-recognition-in-python/</link>
      <pubDate>Sun, 05 Nov 2017 17:42:45 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/intro-face-recognition-in-python/</guid>
      <description>This tutorial was written with Python 3.6, however the library used is compatible with versions 3.3 and above.
 Face recognition software is awesome. The fact that we are able to write software that accurately picks out where someone&amp;rsquo;s eyes and nose reside within an image still astounds me and the fact that there are libraries out there for this sort of things is awesome. These libraries help to lower the barrier to entry for beginners looking to write their own face recognition systems and allow people to do some really cool things.</description>
    </item>
    
    <item>
      <title>Getting Started with Asyncio in Python</title>
      <link>https://cotutorial.github.io/python/concurrency/getting-started-with-asyncio-python/</link>
      <pubDate>Sat, 04 Nov 2017 15:20:50 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/concurrency/getting-started-with-asyncio-python/</guid>
      <description>Video Tutorial   This tutorial was written on top of Python 3.6. This is taken from my book &amp;ldquo;Learning Concurrency in Python&amp;rdquo; if you wish to read up more on the library.
 Asyncio became part of the Python ecosystem in version 3.4 and has since then become the basis for a huge number of Python libraries and frameworks due to it&amp;rsquo;s impressive speed and ease of use. Asyncio allows you to easily write single-threaded concurrent programs that utilize something called coroutines, these coroutines are like a stripped down threads and don&amp;rsquo;t come with the same inherit performance issues that your full-fat threads would typically come with.</description>
    </item>
    
    <item>
      <title>Threads in Python</title>
      <link>https://cotutorial.github.io/python/concurrency/threads-in-python/</link>
      <pubDate>Tue, 31 Oct 2017 22:00:56 +0000</pubDate>
      
      <guid>https://cotutorial.github.io/python/concurrency/threads-in-python/</guid>
      <description>This tutorial was written using Python 3.6. Some of the code may not be compatible with Python 2.7
 In this tutorial we are going to take an in-depth look at threads in Python. We&amp;rsquo;ll start by covering what they consist of, we&amp;rsquo;ll then touch upon how you can define your own simple threads within your Python programs and finally we&amp;rsquo;ll cover all of the ways you can work with these simple threads within a simple Python program.</description>
    </item>
    
    <item>
      <title>Asyncio Event Loops Tutorial</title>
      <link>https://cotutorial.github.io/python/concurrency/asyncio-event-loops-tutorial/</link>
      <pubDate>Sat, 28 Oct 2017 11:50:27 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/concurrency/asyncio-event-loops-tutorial/</guid>
      <description>This tutorial was built on top of Python 3.6.
 In this tutorial we are going to be covering Asyncio&amp;rsquo;s event loop. Some of the material for this tutorial was taken from my book: Learning Concurrency in Python.
Video  The Event Loop The main component of any asyncio based Python program has to be the underlying event loop. Within this event loop we can (from the official documentation):</description>
    </item>
    
    <item>
      <title>Creating a RESTful API with Python and aiohttp</title>
      <link>https://cotutorial.github.io/python/create-rest-api-python-aiohttp/</link>
      <pubDate>Sat, 28 Oct 2017 11:50:27 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/create-rest-api-python-aiohttp/</guid>
      <description>This tutorial was built on top of Python 3.6
 In this tutorial we&amp;rsquo;ll be building a very simple RESTful based API using aio-libs/aiohttp which is an asynchronous http client/server framework.
Getting Started with aiohttp Before we go into how we can use aiohttp to create a simple RESTful API, it&amp;rsquo;s important to know exactly what the framework is and what it can do for us. To start with, it features excellent support of the HTTP protocol as well as for websockets which makes it ideal for working with popular websocket libraries such as Socket.</description>
    </item>
    
    <item>
      <title>Python Event-Driven Programming with RxPY - Tutorial</title>
      <link>https://cotutorial.github.io/python/python-event-driven-rxpy-tutorial/</link>
      <pubDate>Sat, 14 Oct 2017 11:30:25 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-event-driven-rxpy-tutorial/</guid>
      <description>This tutorial was built using Python 3.6
 The reactive programming paradigm is something that I&amp;rsquo;ve always been interested in upon learning about them when working with RxJS in my Angular 2+ based projects.
Event based systems can dynamically react to different situations in smart ways and the ReactiveX library enables to do this in a such a way that our code is succinct and easy to follow.</description>
    </item>
    
    <item>
      <title>Angular Query Parameters Tutorial</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-query-params-tutorial/</link>
      <pubDate>Mon, 02 Oct 2017 19:47:19 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-query-params-tutorial/</guid>
      <description>In this tutorial we are going to be taking a look at how you can extract information from query parameters from within your application&amp;rsquo;s URL and subsequently utilize this information in your Angular based application.
 This assumes that you have already implemented routing within your Angular application. If you require further assistance with this then please feel free to check out my tutorial on Angular Routing
 What Are Query Parameters?</description>
    </item>
    
    <item>
      <title>Python ProcessPoolExecutor Tutorial</title>
      <link>https://cotutorial.github.io/python/concurrency/python-processpoolexecutor-tutorial/</link>
      <pubDate>Sun, 01 Oct 2017 13:52:59 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/concurrency/python-processpoolexecutor-tutorial/</guid>
      <description>This tutorial has been taken and adapted from my book: Learning Concurrency in Python
 Video Tutorial  Introduction In this tutorial we will be looking at how you can utilize multiple processors within your Python Programs.
Multiprocessing vs Multithreading Knowing when and where to use multiple threads vs multiple processes is incredibly important if you are going to be working on highly performant Python programs. Misuse of either threads or processes could lead to your systems actually seeing performance degradation.</description>
    </item>
    
    <item>
      <title>Python ThreadPoolExecutor Tutorial</title>
      <link>https://cotutorial.github.io/python/concurrency/python-threadpoolexecutor-tutorial/</link>
      <pubDate>Sun, 01 Oct 2017 13:36:48 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/concurrency/python-threadpoolexecutor-tutorial/</guid>
      <description>This tutorial has been taken and adapted from my book: Learning Concurrency in Python
 In this tutorial we&amp;rsquo;ll be looking at Python&amp;rsquo;s ThreadPoolExecutor. This was originally introduced into the language in version 3.2 and provides a simple high-level interface for asynchronously executing input/output bound tasks.
Why Use a ThreadPoolExecutor? ThreadPoolExecutors provide a simple abstraction around spinning up multiple threads and using these threads to perform tasks in a concurrent fashion.</description>
    </item>
    
    <item>
      <title>Python Socket.io Tutorial</title>
      <link>https://cotutorial.github.io/python/python-socket-io-tutorial/</link>
      <pubDate>Sun, 01 Oct 2017 12:22:11 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-socket-io-tutorial/</guid>
      <description>Last Updated December 22nd, 2018  This tutorial was written using Python 3.6. Some of the code used is not compatible with version 2.
 In this tutorial we&amp;rsquo;ll be exploring how one can create a socket.io based webserver in Python using the socketio module.
What are WebSockets? WebSockets are an awesome bit of technology which enable us to do cool things such as perform real time communication between both a client and a server.</description>
    </item>
    
    <item>
      <title>The Best Books For Learning VueJS</title>
      <link>https://cotutorial.github.io/javascript/vuejs/best-books-learning-vuejs/</link>
      <pubDate>Mon, 11 Sep 2017 20:00:19 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/vuejs/best-books-learning-vuejs/</guid>
      <description>Vue.js is a fantastic lightweight javascript framework that is ideal for building user interfaces in an incremental fashion. This means you don&amp;rsquo;t need to start with a heavy full-fledged framework for what could be a small side-project.
If you have followed the site for some time you will know that I&amp;rsquo;ve been a major fan of AngularJS and then Angular 2-4 in the early days and in fairness I have only just started to scratch the surface of Vue.</description>
    </item>
    
    <item>
      <title>The Best Books For Learning React and React Native</title>
      <link>https://cotutorial.github.io/react/best-books-for-learning-react/</link>
      <pubDate>Mon, 11 Sep 2017 18:53:10 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/react/best-books-for-learning-react/</guid>
      <description>  This List is Currently under Construction
 Learning React Native Buy Now: Learning React Native Learning React Buy Now: Learning React: Functional Web Development with React and Redux React Up &amp;amp; Running Buy Now: React Up &amp;amp; Running Mastering React Buy Now: Mastering React React and React Native Buy Now: React and React Native React Native Cookbook Buy Now: React Native Cookbook React.js Essentials Buy Now: React.js Essentials </description>
    </item>
    
    <item>
      <title>Python Environment Configuration Tutorial</title>
      <link>https://cotutorial.github.io/python/python-environment-configuration-tutorial/</link>
      <pubDate>Sun, 10 Sep 2017 14:01:28 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-environment-configuration-tutorial/</guid>
      <description>This tutorial was written using Python 3.6
 Defining a solid strategy for handling various environment configuration in your Python programs can drastically improve the way you deploy and manage different environments.
In the most basic of scenarios we would typically have 2 main environments, development and production. In our development environment we would do both our development and testing against the likes of non-production based databases and resources in order to prevent adding noise to our production environment.</description>
    </item>
    
    <item>
      <title>Making HTTP Requests in Python - Tutorial</title>
      <link>https://cotutorial.github.io/python/python-http-requests-tutorial/</link>
      <pubDate>Sun, 10 Sep 2017 12:27:56 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-http-requests-tutorial/</guid>
      <description>This Tutorial was built using Python 3.6 and the Requests library
 Being able to interact with HTTP based RESTful APIs is an incredibly important task for any Python developer. More and more developers are starting to build their systems our of numerous microservices and often they will expose HTTP based endpoints with which we can interact in our own Python programs. In this tutorial we&amp;rsquo;ll look at the various ways we can interact with a HTTP based API using the Requests library in Python.</description>
    </item>
    
    <item>
      <title>The Best Books for Learning JavaScript</title>
      <link>https://cotutorial.github.io/javascript/best-books-learning-javascript/</link>
      <pubDate>Tue, 05 Sep 2017 19:20:04 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/best-books-learning-javascript/</guid>
      <description>Under Construction
 JavaScript: The Good Parts Douglas Crockford is one of the most prominent experts in the field of JavaScript by many in the development community and his book JavaScript: The Good Parts is an excellent addition to any JavaScript developers library. The book goes over some of the best parts of the JavaScript language and is exceptionally well written. With an average review of 4.4 out of 5 stars on Amazon, this is definitely a safe purchase for those wanting to master the art of JavaScript programming and create absolutely beautiful software systems.</description>
    </item>
    
    <item>
      <title>The Best Books For Learning Game Development</title>
      <link>https://cotutorial.github.io/gamedev/best-books-learn-game-dev/</link>
      <pubDate>Tue, 05 Sep 2017 18:09:42 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/gamedev/best-books-learn-game-dev/</guid>
      <description>This list is currently under construction
 In this article we will be looking at some of the best and most popular books you can buy should you wish to learn more about the art of game development.
Game development as a whole is quite a fragmented field, there are a wide number of game engines such as Unity and Unreal which abstract away the complexities of things like graphics rendering and physics engines and allow game developers to focus purely on game-play mechanics.</description>
    </item>
    
    <item>
      <title>The Best Books for Learning Web Development</title>
      <link>https://cotutorial.github.io/webdev/best-book-learn-web-dev/</link>
      <pubDate>Tue, 05 Sep 2017 18:07:38 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/webdev/best-book-learn-web-dev/</guid>
      <description>In this article we are going to be taking a look at some of the best books you can buy if you are interested in learning more about the art of web development.
 This list isn&amp;rsquo;t an exhaustive list of all the best books currently available, it&amp;rsquo;s just a small list of books I feel are excellent at teaching the basics. If you have any you would like to add then please let me know in the comments section.</description>
    </item>
    
    <item>
      <title>The Best Books For Learning Golang</title>
      <link>https://cotutorial.github.io/golang/top-books-for-learning-golang/</link>
      <pubDate>Mon, 12 Jun 2017 21:29:27 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/top-books-for-learning-golang/</guid>
      <description>Go is a language that has drastically grown in popularity over the past few years. We&amp;rsquo;ve seen companies such as HashiCorp adopt it as their primary language of choice for all of their projects and with good reason. It&amp;rsquo;s undoubtedly an absolutely fantastic language to develop with.
Getting started with Go is relatively straightforward and its syntax and language structure make it easy to adopt as your primary development language.</description>
    </item>
    
    <item>
      <title>RESTful API Design - Best Practices</title>
      <link>https://cotutorial.github.io/general/rest-api-best-practices/</link>
      <pubDate>Mon, 12 Jun 2017 15:29:30 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/general/rest-api-best-practices/</guid>
      <description>In this article we look at some of the key concepts that everyone should bear in mind when designing RESTful APIs. These are based off my own experience with designing and building RESTful APIs in a number of projects and should be taken with a pinch of salt, I am in no way telling you that you must do it this way. I am merely
Versioning Versioning is incredibly important in pretty much every scenario, be it a personal project or an enterprise scale service that other teams will be interfacing with.</description>
    </item>
    
    <item>
      <title>Hugo Adding Images To Markdown Posts</title>
      <link>https://cotutorial.github.io/golang/hugo/hugo-adding-images-to-posts/</link>
      <pubDate>Mon, 12 Jun 2017 08:49:04 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/hugo/hugo-adding-images-to-posts/</guid>
      <description>In this quick tutorial we are going to look at the various ways you can add images to your markdown content in hugo.
Markdown Annotation The quickest and simplest way of adding images to your content would be to use markdown annotation. Place the image you want to display in your post within your static/ directory and then reference it in your markdown like so:
![image alt text](/my_image.png) Using HTML Tags In the situation where you need to add say a custom css class to the image then your second option is to simply use an &amp;lt;img/&amp;gt; tag within your markdown content.</description>
    </item>
    
    <item>
      <title>Hugo Deployment Workflow Tutorial</title>
      <link>https://cotutorial.github.io/golang/hugo/hugo-deployment-workflow-tutorial/</link>
      <pubDate>Mon, 12 Jun 2017 08:48:26 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/hugo/hugo-deployment-workflow-tutorial/</guid>
      <description>When developing websites with Hugo, having a solid automated deployment strategy can save you hundreds of hours of performing repetitive manual tasks. This site itself uses hugo and an automated deployment strategy in order to automatically deploy any changes made to it&amp;rsquo;s underlying git repo: elliotforbes/tutorialedge.net. Whenever I wish to make a change to any of the content on my site I follow these steps:
 Make the changes to a local version of hugo running on my laptop Verify the changes look good in my browser.</description>
    </item>
    
    <item>
      <title>Getting Started With Hugo</title>
      <link>https://cotutorial.github.io/golang/hugo/getting-started-with-hugo/</link>
      <pubDate>Sat, 27 May 2017 11:13:46 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/hugo/getting-started-with-hugo/</guid>
      <description>Hugo is an incredibly popular static site generator written primarily in Go and it is currently running this site. With Hugo you would typically define all of your content in the form of markdown files. These markdown files are then parsed and combined with a number of template files and you are left with a fully functioning html page that you can easily host anywhere. There are a number of key advantages to this approach such as:</description>
    </item>
    
    <item>
      <title>The Difference Between Class Selectors and ID Selectors in CSS</title>
      <link>https://cotutorial.github.io/webdev/difference-between-class-id-selector-css/</link>
      <pubDate>Sun, 23 Apr 2017 14:48:20 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/webdev/difference-between-class-id-selector-css/</guid>
      <description>If you are new to CSS then you&amp;rsquo;ll probably have noticed that some rules have selectors that start with # and some that start with . and even some that have none at all. The difference between the two is that the # rule is an id selector and the . is a class selector.
 . - is a class selector that target elements with the correct class attribute.</description>
    </item>
    
    <item>
      <title>How To Work With CSS3 Variables</title>
      <link>https://cotutorial.github.io/webdev/how-to-work-with-css3-variables/</link>
      <pubDate>Fri, 21 Apr 2017 19:53:46 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/webdev/how-to-work-with-css3-variables/</guid>
      <description>One of the main reasons that preprocessors like SASS and LESS have gained such huge popularity over the years is the fact that the help to bring order to your convoluted and messy CSS files. I&amp;rsquo;ve found myself too often ending up with 1,000 line css files where the header specific rules have migrated south towards the end of the document. With preprocessors you were able to leverage things like inheritance and it actually gave you a reason to structure your code in a cohesive format.</description>
    </item>
    
    <item>
      <title>CSS3 Border Radius Tutorial</title>
      <link>https://cotutorial.github.io/webdev/border-radius-tutorial/</link>
      <pubDate>Thu, 20 Apr 2017 08:06:37 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/webdev/border-radius-tutorial/</guid>
      <description>Effective use of border-radius on some elements can remove the harshness of the square corners on some components.
Circle Element In this example we&amp;rsquo;ll be creating a completely round circle object using nothing but css3. This is what our finished item will look like:
  .circle { width: 100px; height: 100px; border-radius: 100%; background-color: #074E68; margin: auto; }  Source Code To get this to work, what I&amp;rsquo;ve done is create a div and attached the .</description>
    </item>
    
    <item>
      <title>CSS3 Box Shadow Tutorial</title>
      <link>https://cotutorial.github.io/webdev/css3-box-shadow/</link>
      <pubDate>Sun, 16 Apr 2017 16:50:07 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/webdev/css3-box-shadow/</guid>
      <description>In this tutorial we&amp;rsquo;ll be looking at how you can add a box shadow effect to elements of your website. Box shadow can help turn elements of your website from flat structures to almost 3D like.
 It&amp;rsquo;s worth checking out the material design documentation on Elevation and Shadows
 Output This is what we&amp;rsquo;ll be creating:
Box Shadow Example   .box { box-shadow: 0px 0px 15px #888888; padding: 20px; margin: auto; width: 50%; }  Implementation For the above example we first define a div and attach the .</description>
    </item>
    
    <item>
      <title>AngularJS Promises Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-promises-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 14:41:31 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-promises-tutorial/</guid>
      <description>In this tutorial we&amp;rsquo;ll be looking at how to work with and define promises in AngularJS. For more information check out the official AngularJS Documentation
What are Promises in Javascript? Essentially when you create a promise, you are ensuring that a certain order is followed in the execution of your code. Javascript is asynchronous by nature and in the execution of a method it’s not guaranteed what part of it will finish execution first.</description>
    </item>
    
    <item>
      <title>Most Important Changes to AngularJS in 1.6</title>
      <link>https://cotutorial.github.io/javascript/angularjs/most-important-changes-angularjs-1-6/</link>
      <pubDate>Sat, 15 Apr 2017 14:31:36 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/most-important-changes-angularjs-1-6/</guid>
      <description>The changelog with the AngularJS 1.6 release notes can be found here: AngularJS 1.6-RC.0 After having a look at the AngularJS release notes for 1.6, I thought I’d compile my thoughts together as to the most important changes to the framework in the coming release.
Expression Sandbox Removal Expression Sandbox Removal Full Notes
The expression sandbox removal was essentially something that checked to see if your code was accidentally accessing arbitrary javascript and discourage you from placing any business logic inside your templates.</description>
    </item>
    
    <item>
      <title>All Courses</title>
      <link>https://cotutorial.github.io/courses/</link>
      <pubDate>Sat, 15 Apr 2017 09:55:57 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/courses/</guid>
      <description>test</description>
    </item>
    
    <item>
      <title>Python Multithreading Tutorial - Concurrent Programming</title>
      <link>https://cotutorial.github.io/python/python-multithreading-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:55:57 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-multithreading-tutorial/</guid>
      <description>In this tutorial, we are going to be looking at how you you can use multithreading within your Python applications.
What is Multithreading? Modern computers tend to feature a CPU that has multiple processing cores, each of these cores can run many threads simultaneously which gives us the ability to perform several tasks concurrently. This tutorial will hopefully show you how to get started with Python&amp;rsquo;s threading module.
Objectives:</description>
    </item>
    
    <item>
      <title>Learning to Code in 2017</title>
      <link>https://cotutorial.github.io/general/learning-to-code-2017/</link>
      <pubDate>Sat, 15 Apr 2017 09:53:07 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/general/learning-to-code-2017/</guid>
      <description>Programming has changed a hell of a lot in the last few years and we’ve seen multiple new languages pop up all addressing different problem sets and skill levels. The main goal for this article is clarifying some of the basic concepts and guiding you as to where to start if you are wanting to learn how to program in 2017.
Choosing a Language There are literally hundreds of languages out there, from C++ to Python to Go.</description>
    </item>
    
    <item>
      <title>What is a RESTful API?</title>
      <link>https://cotutorial.github.io/general/what-is-a-rest-api/</link>
      <pubDate>Sat, 15 Apr 2017 09:53:07 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/general/what-is-a-rest-api/</guid>
      <description>As a developer I spend a lot of time developing new or improving on existing RESTful APIs and one of the big questions I’ve been asked is - What is a REST API?
This tutorial will try to explain in layman’s terms what a REST API is and how we can utilize these APIs in order to build our own systems.
REST Basics REST - Representational State Transfer.
API - Application Programming Interface</description>
    </item>
    
    <item>
      <title>UDP Client and Server Tutorial in Python</title>
      <link>https://cotutorial.github.io/python/udp-client-server-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:49:35 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/udp-client-server-python/</guid>
      <description>In this tutorial I&#39;ll be showing you exactly how you can set up your own UDP chat server using CPython 3.3 and Python&#39;s Socket module. The end product will be a server that listens for all connections and messages over a specific port and prints out any messages to the console. This could be extended in the future to create a chat server that subsequently broadcasts any messages received to all parties listening for responses.</description>
    </item>
    
    <item>
      <title>Calculating Keyword Density of a Web Page with Python</title>
      <link>https://cotutorial.github.io/python/calculating-keyword-density-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:47:55 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/calculating-keyword-density-python/</guid>
      <description>In this tutorial I will be showing you how to calculate the keyword density of a web page using the Python programming language. This will be a continuation of the previous tutorial in which we retrieved a web page using Pythons urllib2 Python module.
Keyword Density Calculation Keyword density is an easy metric to calculate as it has a relatively simple formula. The keyword density of a specific term is measured as the number of occurrences of the chosen keyword over the total number of words in the body of text.</description>
    </item>
    
    <item>
      <title>Fetching Web Pages In Python Using Urllib2</title>
      <link>https://cotutorial.github.io/python/fetching-web-pages-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:47:01 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/fetching-web-pages-python/</guid>
      <description>This tutorial was built using Python 2.7. This will not work for Python 3+
 In this tutorial I will be showing you how you can fetch the a webpage using the urllib2 python module. This is a relatively simple process that can be accomplished in 5 lines of code.
The Imports To begin with we will need to import the urllib2 python module so that we can utilize it&amp;rsquo;s functionality:</description>
    </item>
    
    <item>
      <title>Creating a Python Web Crawler</title>
      <link>https://cotutorial.github.io/python/creating-python-web-crawler/</link>
      <pubDate>Sat, 15 Apr 2017 09:45:44 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/creating-python-web-crawler/</guid>
      <description>This tutorial was built using Python 3.6
 In this tutorial we&amp;rsquo;ll be taking a look at how you can build your own Python web crawler using the ThreadPoolExecutor class and BeautifulSoup.
Web Crawlers are incredibly interesting in the sense that they can do a huge host of data mining tasks. You could for instance do any of the following:
 Crawl and entire website for broken links, or errors Scrape an entire site to get a collective view of the entire site Scrape hundreds of different sites in order to build your own simple search engine  The possibilities are truly endless.</description>
    </item>
    
    <item>
      <title>Creating a Twitter Bot Using Python and the Twitter API</title>
      <link>https://cotutorial.github.io/python/creating-twitter-bot-python/</link>
      <pubDate>Sat, 15 Apr 2017 09:45:44 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/creating-twitter-bot-python/</guid>
      <description>Twitter bots are a fantastic way to drum up a bit of interest in your brand or website and I&amp;rsquo;ve had fantastic results myself building up an audience for the Twitter account specifically for this website. This tutorial will hopefully cover everything it takes to construct your own twitter bot that utilizes the RESTful Twitter API.
 The source code for this Python wrapper for the Twitter API can be found here: Github: Bear&amp;rsquo;s Python-Twitter Wrapper</description>
    </item>
    
    <item>
      <title>Removing HTML Tags from a String with Python</title>
      <link>https://cotutorial.github.io/python/removing-html-from-string/</link>
      <pubDate>Sat, 15 Apr 2017 09:38:07 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/removing-html-from-string/</guid>
      <description>This tutorial will demonstrate two different methods as to how one can remove html tags from a string such as the one that we retrieved in my previous tutorial on fetching a web page using python.
Method 1 This method will demonstrate a way that we can remove html tags from a string using regex strings. import re TAG_RE = re.compile(r&amp;#39;&amp;lt;[^&amp;gt;]+&amp;gt;&amp;#39;) def remove_tags(text): return TAG_RE.sub(&amp;#39;&amp;#39;, text) Method 2 This is another method we can use to remove html tags using functionality present in the Python Standard library so there is no need for any imports.</description>
    </item>
    
    <item>
      <title>AABB Collision Detection Tutorial</title>
      <link>https://cotutorial.github.io/gamedev/aabb-collision-detection-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:30:45 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/gamedev/aabb-collision-detection-tutorial/</guid>
      <description>AABB Collision Detection or &#34;Axis-Aligned Bounding Box&#34; Collision detection as it stands for is the simplest form, or one of the simplest forms of collision detection that you can implement in a 2D game. If you have an object that is axis-aligned, ie. not rotated and doesn&#39;t need tight collision detection then AABB collision detection is the route you are going to want to take.
Implementing AABB Collision Detection in Java In order to be able to accurately perform Axis-Aligned Bounding Box collision detection you&#39;ll need at minimum the 4 following characteristics of the object you are wanting to make collidable.</description>
    </item>
    
    <item>
      <title>Python Multiprocessing Tutorial</title>
      <link>https://cotutorial.github.io/python/python-multiprocessing-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:28:06 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/python/python-multiprocessing-tutorial/</guid>
      <description>Last Updated: 1st December, 2018
 Introduction Previously we&amp;rsquo;ve looked at how you can try to achieve concurrency with Python using multithreading, the tutorial of which can be found here: Python Multithreading Tutorial
Now we are going to be having a look at how we can sidestep the limiting Global Interpreter Lock that effectively prevented our multithreaded applications from being truly concurrent by using the multiprocessing Python module.</description>
    </item>
    
    <item>
      <title>Breadth First Search Algorithm Tutorial with Java</title>
      <link>https://cotutorial.github.io/artificial-intelligence/breadth-first-search-java/</link>
      <pubDate>Sat, 15 Apr 2017 09:23:35 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/artificial-intelligence/breadth-first-search-java/</guid>
      <description>This lesson is part of the course: Artificial Intelligence
 Uninformed Search vs Informed / Heuristic Search The next couple of algorithms we will be covering in this Artificial Intelligence course can be classed as either:
uninformed or blind searches: in which our algorithms have no additional information about states beyond that provided in the problem definition.
Informed or Heuristic searches: in which our algorithms have some extra knowledge about the problem domain and can distinguish whether or not one non-goal state is “more promising” than another.</description>
    </item>
    
    <item>
      <title>Depth First Search in Java</title>
      <link>https://cotutorial.github.io/artificial-intelligence/depth-first-search/</link>
      <pubDate>Sat, 15 Apr 2017 09:23:35 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/artificial-intelligence/depth-first-search/</guid>
      <description>Depth First Search DFS is another uninformed graph traversal algorithm which produces a non-optimal solution but can be useful for traversing quickly into deeper search domains. Depth first search is very similar to the previously covered breadth first search that we covered in this tutorial: breadth first search in Java
How it Works With Depth first search you start at the top most node in a tree and then follow the left most branch until there exists no more leafs in that branch.</description>
    </item>
    
    <item>
      <title>Depth Limited Search in Java</title>
      <link>https://cotutorial.github.io/artificial-intelligence/depth-limited-search-in-java/</link>
      <pubDate>Sat, 15 Apr 2017 09:23:35 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/artificial-intelligence/depth-limited-search-in-java/</guid>
      <description>About Depth Limited Searching Traditional depth first search could be deemed useless in infinite state spaces as they will continue to traverse down the leftmost branch infinitely. This essentially means that the path to the goal node might never be found, in order to combat this we can add a limit to the depth that our search recurses down the tree, this essentially transforms our depth first algorithm into a depth-limited algorithm.</description>
    </item>
    
    <item>
      <title>Equal Height Columns in a Row using Flex Box</title>
      <link>https://cotutorial.github.io/webdev/equal-height-columns-using-css/</link>
      <pubDate>Sat, 15 Apr 2017 09:19:19 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/webdev/equal-height-columns-using-css/</guid>
      <description>In this tutorial I&#39;ll be showcasing how we can achieve equal heights on our columns using the CSS and HTML. More specifically I&#39;ll be demonstrating the Flex Box feature of CSS which allows us to create these equal height columns without resorting to a nasty javascript workaround.
Flex CSS .list { display: flex; flex-wrap: wrap; } .list-item { background-color: #eee; display: flex; color: white; } .list-content { padding: 1.5em; } So how does this work?</description>
    </item>
    
    <item>
      <title>AngularJS ng-model in ng-if Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-ng-model-in-ng-if-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:17:38 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-ng-model-in-ng-if-tutorial/</guid>
      <description>a quick tip for those trying to get the ng-model directive working in your angularjs application within ng-if.
ng-if Child Scopes If you are wanting to use an ng-model scope within an ng-if then you&#39;ll have to access that scope using $parent
Our html page will look something like so:
&amp;lt;html ng-app=&amp;#34;testApp&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;AngularJS ng-if child scopes example&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;#34;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body ng-controller=&amp;#34;testController&amp;#34;&amp;gt; &amp;lt;div ng-if=&amp;#34;isFalse&amp;#34;&amp;gt; {{$parent.name}} &amp;lt;/div&amp;gt; &amp;lt;p&amp;gt;{{name}}&amp;lt;/p&amp;gt; &amp;lt;div ng-if=&amp;#34;isTrue&amp;#34;&amp;gt; &amp;lt;p&amp;gt;{{$parent.</description>
    </item>
    
    <item>
      <title>AngularJS Data Binding Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-data-binding-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:16:16 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-data-binding-tutorial/</guid>
      <description>AngularJS Official Docs on Data Binding can be found here: AngularJS Data Binding
 Please note that the use of scope is somewhat frowned upon. Check out my article on Working with Components and how you should use one way data-binding.
 What is Data Binding? Data binding is incredibly useful due to the fact it automatically synchronizes the data in both our model and view components. Any changes made to something in the frontend will automatically be reflected in the backend and vice versa.</description>
    </item>
    
    <item>
      <title>AngularJS Controllers Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-controllers-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:10:12 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-controllers-tutorial/</guid>
      <description>AngularJS controllers are somewhat similar to classes in Object Oriented programming and as such you can define the functionality of your applications in these controllers. When a controller is attached to the DOM via the ng-controller directive it instantiates a new Controller object.
 Check out my article on Working with Components and see how you should use controllers within a component based system.
 Instantiating a Controller We’ll begin by creating a very simple controller that contains a function that we’ll call every time we click a button.</description>
    </item>
    
    <item>
      <title>AngularJS Templating Tutorial Using ng-view</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-template-tutorial-using-ng-view/</link>
      <pubDate>Sat, 15 Apr 2017 09:09:12 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-template-tutorial-using-ng-view/</guid>
      <description>Templating is fantastic for reducing the amount of code you have to maintain, if you have a defined structure to all of your webapp&amp;rsquo;s pages then templating allows you to create one master page for this structure and then just replace pieces of the page with different content based on the url.
For instance, say we had a blog. If our blog had the same nav bar, the same header image, the same footer, then it makes sense to put this in one place instead of constantly repeating it throughout every page in your application.</description>
    </item>
    
    <item>
      <title>AngularJS Directives Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-directives-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:08:03 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-directives-tutorial/</guid>
      <description>The official documentation for AngularJS’s directives can be found here: AngularJS Directives
What Are Directives? Directives essentially allow you to attach behaviors to specific DOM elements. This means you can define your own custom html-like tags and attach all of the functionality you desire to that tag which is perfect for creating breaking up your applications into distinct modules which can be worked on simultaneously in teams of developers.
Directives are an essential part of the AngularJS framework and if you want a bit of background behind why you should define your own directives rather than use the ng-controller directive then check out this post by one of Paypal’s engineers - Lessons learned from rebuilding Paypal&#39;s checkout in AngularJS</description>
    </item>
    
    <item>
      <title>AngularJS Template Route Provider Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/template-route-provider-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:04:56 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/template-route-provider-tutorial/</guid>
      <description>This tutorial covers how you can utilize AngularJS’s $routeProvider in order to create a multiple page application that features one master page. The official documentation for Routing and multiple views can be found here: https://docs.angularjs.org/tutorial/step_07 
Our Project The structure of our project for this tutorial is going to look a little something like this:
index.html scripts.js view/ -- home.html -- contact.html -- about.html With our index.html being our master page in which we define all javascript dependencies and styling for things like the nav bar and footer etc.</description>
    </item>
    
    <item>
      <title>Interacting With RESTful APIs Using $http in AngularJS</title>
      <link>https://cotutorial.github.io/javascript/angularjs/interacting-with-apis-using-http-angularjs/</link>
      <pubDate>Sat, 15 Apr 2017 09:03:47 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/interacting-with-apis-using-http-angularjs/</guid>
      <description>In this tutorial I will be showing you how we can create a frontend angularjs application that could interact with a RESTful API. In order for our Angular applications to be able to make API calls, we’ll have to use the $http service which gives us the ability to perform GET, POST, PUT and DELETE api calls, there are other types of calls but for now we’ll focus on these 4.</description>
    </item>
    
    <item>
      <title>AngularJS Filter Search Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-filter-search-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 08:59:44 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-filter-search-tutorial/</guid>
      <description>Links: Full Source Code: https://github.com/emforce/AngularFuzzySearch In this tutorial I’ll be showing you how you can create a tool which allows you to type in a search query in an input box and see all matches below that input box without having to reload the page and we’ll be leveraging AngularJS’s filter mechanic to do so.
To get us started we’ll start with mocking up what our page will look like, this is just going to be a basic no-frills design to get us started but feel free to modify it to suit.</description>
    </item>
    
    <item>
      <title>Getting Started With Shaders in OpenGL</title>
      <link>https://cotutorial.github.io/gamedev/opengl/getting-started-with-shaders/</link>
      <pubDate>Sat, 15 Apr 2017 08:50:41 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/gamedev/opengl/getting-started-with-shaders/</guid>
      <description>The modern OpenGL rendering pipeline rely heavily on shaders to process the huge amounts of data that a highly demanding program like a game requires. These shaders are typically written using the OpenGL Shading Language - GLSL, this language is very similar to C in syntax. Learning shaders is just about one of the most important things you can do if you are going to get into graphical programming as it enables you to control just about everything when it comes to rendering your models in a game.</description>
    </item>
    
    <item>
      <title>Sending Email Using Go And Mailgun</title>
      <link>https://cotutorial.github.io/golang/sending-email-using-go-and-mailgun/</link>
      <pubDate>Sat, 15 Apr 2017 08:44:00 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/sending-email-using-go-and-mailgun/</guid>
      <description>In this tutorial I&#39;m going to be demonstrating how you can send mail with Go(Lang) and the mailgun api. Thankfully, mailgun&#39;s API is fantastic and sending mail is incredibly easy once you&#39;ve set everything up properly.
Requirements  You&#39;ll need a mailgun account with your own verified domains Mailgun&#39;s Go Package: Downloadable from here  https://github.com/mailgun/mailgun-go Your Mailgun&#39;s Public API Key  Implementation package main import ( &amp;#34;github.com/mailgun/mailgun-go&amp;#34; ) func SendSimpleMessage(domain, apiKey string) (string, error) { mg := mailgun.</description>
    </item>
    
    <item>
      <title>Retrieving Website Visitor Information Using Javascript</title>
      <link>https://cotutorial.github.io/javascript/retrieving-visitor-information-javascript/</link>
      <pubDate>Sat, 15 Apr 2017 08:40:42 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/retrieving-visitor-information-javascript/</guid>
      <description>In this tutorial I&#39;ll be demonstrating how you can retrieve key information about all your website visitors using a very simple javascript snippet. This could in theory be placed on all your website&#39;s pages and then returned to a REST API which then stores this information for you to analyse in the future. I thought this would be an interesting little snippet for those of you thinking of rolling your own google analytics-like tracking.</description>
    </item>
    
    <item>
      <title>Keeping NodeJS Applications Running Forever Using PM2</title>
      <link>https://cotutorial.github.io/nodejs/keeping-node-apps-running-forever-pm2/</link>
      <pubDate>Sat, 15 Apr 2017 08:38:40 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/keeping-node-apps-running-forever-pm2/</guid>
      <description>If you write an application that you need to keep running forever on your servers then this is the tutorial for you. If you&#39;re a software developer working on business critical applications and have to adhere to strict Service Level Agreements (SLAs for short) then you know just how vital it is to have your applications back up and running the second they fall over, every second counts when trying to achieve the 5 9&#39;s or 99.</description>
    </item>
    
    <item>
      <title>Setting a Default Value for Select Elements in AngularJS</title>
      <link>https://cotutorial.github.io/javascript/angularjs/setting-default-select-value-angularjs/</link>
      <pubDate>Sat, 15 Apr 2017 08:37:21 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/setting-default-select-value-angularjs/</guid>
      <description>This is just a quick code snippet for those of you facing this slight problem when developing your applications using AngularJS 1.5. This works for those of you &amp;lt;select ng-model=&amp;#34;selection&amp;#34; ng-init=&amp;#34;selection =&amp;#39;The First Default Option&amp;#39;&amp;#34;&amp;gt; &amp;lt;option&amp;gt;The First Default Option&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;The Second non-default option&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt;</description>
    </item>
    
    <item>
      <title>Using Hidden Input in a Form in AngularJS</title>
      <link>https://cotutorial.github.io/javascript/angularjs/hidden-input-form-angularjs/</link>
      <pubDate>Sat, 15 Apr 2017 08:35:56 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/hidden-input-form-angularjs/</guid>
      <description> This ended up being an interesting little problem for me during one of my programming sessions. Below you&#39;ll find a couple of different methods that you can use to pass hidden data to any form submission using AngularJS.
Method 1 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;someData&amp;#34; ng-model=&amp;#34;data&amp;#34; style=&amp;#34;display: none;&amp;#34; /&amp;gt;</description>
    </item>
    
    <item>
      <title>Implementing the Bubble Sort Algorithm using Golang</title>
      <link>https://cotutorial.github.io/golang/implementing-bubble-sort-with-golang/</link>
      <pubDate>Sat, 15 Apr 2017 08:34:43 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/implementing-bubble-sort-with-golang/</guid>
      <description>What Is Bubble Sort? Bubble sort is a sorting algorithm that sequentially goes through an array n times. Each time the algorithm runs through our array, it looks at the first element and then the second element, if the first element is larger than the second element then it swaps them, it then proceeds through the entire list performing this action.
Time Complexity The time complexity for this algorithm is O(n^2) where n is the number of items being sorted.</description>
    </item>
    
    <item>
      <title>Building a Webserver using ExpressJS and NodeJS</title>
      <link>https://cotutorial.github.io/nodejs/creating-a-webserver-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:32:01 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/creating-a-webserver-with-nodejs/</guid>
      <description>This is the first tutorial in a series in which we’ll be building up a website for a domain name I’ve been sitting on for a few years now. This is intended to show you everything it takes in order to program your own website using NodeJS and the new Angular2 framework.
Creating a Simple Web Server Using NodeJS and ExpressJS. So the very first thing we need for our site is the foundation and for this we can use a very simple ExpressJS server.</description>
    </item>
    
    <item>
      <title>Executing Shell Scripts With NodeJS</title>
      <link>https://cotutorial.github.io/nodejs/executing-shell-scripts-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:26:02 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/executing-shell-scripts-with-nodejs/</guid>
      <description>One of the problems I’ve been faced with recently is how do I go about executing shell scripts using NodeJS. This essentially allows me to query the status of certain processes and utilize the full power of the unix shell commands. Implementation using NodeJS child_process Module Node thankfully already has a module which is designed specifically for executing shell scripts and can be found here in the documentation.
This module essentially creates a child process in which we can execute our shell script and also sets everything up for us so that we can utilize stdin, stdout and stderr within our NodeJS application.</description>
    </item>
    
    <item>
      <title>Reading and Writing Files With NodeJS</title>
      <link>https://cotutorial.github.io/nodejs/reading-writing-files-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:20:02 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/reading-writing-files-with-nodejs/</guid>
      <description>In this tutorial I’m going to be showing you exactly how we can read and write files on our local filesystem using NodeJS.
Reading From Files Being able to read from files on your local file system can be hugely useful and there are a number of different things you can build on top of this. A log reader, importing information from spreadsheets and xml files or whatever you can think of, being able to read from files is hugely useful.</description>
    </item>
    
    <item>
      <title>Creating and Deleting Directories With NodeJS</title>
      <link>https://cotutorial.github.io/nodejs/creating-deleting-directories-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:17:02 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/creating-deleting-directories-with-nodejs/</guid>
      <description>In this tutorial I’ll be showing you how to create and delete directories using NodeJS and we’ll be using the mkdirp and the rimraf node package in order to achieve this.
Creating Directories In order to create a directory we’ll need first download the mkdirp npm package, we can do this like so:
npm install mkdirp --local  This should install the mkdirp package as well as any of it’s dependencies in a node_modules directory within your current directory.</description>
    </item>
    
    <item>
      <title>Editing XML Files With NodeJS</title>
      <link>https://cotutorial.github.io/nodejs/editing-xml-files-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:14:10 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/editing-xml-files-with-nodejs/</guid>
      <description>XML files are still widely used in enterprise programs and being able to manipulate xml files can be incredibly important.
XML2JS Node Package In this tutorial I’ll be demonstrating how you can easily manipulate XML files using the xml2js node package. This package is great due to the fact it reads in an xml string and converts it to a far easier to use json structure. Reading in our XML File Create a new js file and type the following: var fs = require(&amp;#34;fs&amp;#34;); fs.</description>
    </item>
    
    <item>
      <title>An Introduction To Artificial Intelligence</title>
      <link>https://cotutorial.github.io/artificial-intelligence/introduction-to-artificial-intelligence/</link>
      <pubDate>Sat, 15 Apr 2017 08:11:58 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/artificial-intelligence/introduction-to-artificial-intelligence/</guid>
      <description>This is lesson one of the Artificial Intelligence course on this website. What is Artificial Intelligence? Artificial Intelligence is a huge field of computer science that is focused primarily on building agents that think and perform actions independant from human interference. If you are or have ever been a gamer then you will have experienced artificial intelligence in action contained within the non-player characters that try to prevent you from winning the games.</description>
    </item>
    
    <item>
      <title>What Is An Intelligent Agent</title>
      <link>https://cotutorial.github.io/artificial-intelligence/what-is-intelligent-agent/</link>
      <pubDate>Sat, 15 Apr 2017 08:10:24 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/artificial-intelligence/what-is-intelligent-agent/</guid>
      <description>In Artificial Intelligence, Intelligent agents are the decision makers. They perceive their environment through a series of sensors and act upon this information using actuators.
A simple example of this is a robot hoover. Through a series of sensors, it can sense whether or not the floor is dirty and based off this information it will then decide whether or not to continue cleaning the floor.
Intelligent Agents In Industry Finance An example of a useful intelligent agent in the finance industry would be something that perceives the stock environment and then acts on this information in order to make trades and generate profit.</description>
    </item>
    
    <item>
      <title>Get Involved</title>
      <link>https://cotutorial.github.io/get-involved/</link>
      <pubDate>Fri, 14 Apr 2017 20:28:13 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/get-involved/</guid>
      <description>Do you fancy contributing back to the site or writing a few of your own tutorials? Fork this entire site from our public github repo, make some changes and then submit a pull request and I&amp;rsquo;ll review it and if it meets our standards, it&amp;rsquo;ll get pushed live to the site.
Authoring New Tutorials Authoring a new tutorial is simple with hugo. All you have to do is create a new file.</description>
    </item>
    
    <item>
      <title>Get Involved</title>
      <link>https://cotutorial.github.io/test/</link>
      <pubDate>Fri, 14 Apr 2017 20:28:13 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/test/</guid>
      <description>What does this output?
console.log(&amp;#34;hi&amp;#34;)   
Sanguine Lapithae colla latus oracula ignibus Lorem markdownum coniugium levati sustollit tamen iuvenem, ignis aut paene quem per lacesse inde mihi: mea. Natalis aura, et undas hoc uberrima. Discedere maerenti virgine ut anilem opus, quae, enim sentit decurrere Nycteus sacrilegos Ecce numerandos, erat sententia. Quam nolet, e mortisque tegmine, laboris opus et domus. Plura audet; sensit unde Iunone summisque constiterant.
Alta hoc belli Lorem markdownum coniugium levati sustollit tamen iuvenem, ignis aut paene quem per lacesse inde mihi: mea.</description>
    </item>
    
    <item>
      <title>Redirect</title>
      <link>https://cotutorial.github.io/redirect/</link>
      <pubDate>Fri, 14 Apr 2017 20:28:13 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/redirect/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sign Up</title>
      <link>https://cotutorial.github.io/signup/</link>
      <pubDate>Fri, 14 Apr 2017 20:28:13 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/signup/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cotutorial.github.io/about/</link>
      <pubDate>Fri, 14 Apr 2017 20:27:58 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/about/</guid>
      <description>The Story: Originally started in December of 2014 this site began as a side hobby of mine and has quickly grown into one of the most successful side projects I&amp;rsquo;ve ever worked upon. Since its conception it&amp;rsquo;s racked up well over 1,000,000 page views and it&amp;rsquo;s still growing.
It&amp;rsquo;s undergone many changes since it was first created and overall I&amp;rsquo;ve probably commited well over 1,000 hours towards the site and it&amp;rsquo;s content.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cotutorial.github.io/blog-home/</link>
      <pubDate>Fri, 14 Apr 2017 20:27:58 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/blog-home/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Login/Register</title>
      <link>https://cotutorial.github.io/login/</link>
      <pubDate>Fri, 14 Apr 2017 20:27:58 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/login/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Profile</title>
      <link>https://cotutorial.github.io/profile/</link>
      <pubDate>Fri, 14 Apr 2017 20:27:58 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/profile/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://cotutorial.github.io/search/</link>
      <pubDate>Fri, 14 Apr 2017 20:27:58 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/search/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Converting CSV to JSON using NodeJS</title>
      <link>https://cotutorial.github.io/nodejs/converting-csv-json-node/</link>
      <pubDate>Sun, 09 Apr 2017 21:29:02 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/converting-csv-json-node/</guid>
      <description>In this tutorial I’m going to be showing you how we can create a NodeJS script that takes in a csv file and outputs the contents of that CSV file as JSON.
In order to do this conversion we’ll be using the csvtojson node package. This package will do pretty much all the heavy lifting for us and having used it in production environments I can say that it’s remarkably easy to implement into a project.</description>
    </item>
    
    <item>
      <title>Building Software using A Microservice Based Architecture</title>
      <link>https://cotutorial.github.io/general/building-software-using-microservice-architecture/</link>
      <pubDate>Sun, 09 Apr 2017 21:27:23 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/general/building-software-using-microservice-architecture/</guid>
      <description>In this tutorial I’m going to be showing an example of how you could go about building your own software following a microservice based architecture.
I’m going to be discussing key things such as communication between services, asynchronous vs synchronous and most importantly managing your services. I’m going to be writing everything using Google’s Go(GoLang) programming language but these concepts will be transferable across to other language domains.
Why Should We Use Microservice Based Architecture?</description>
    </item>
    
    <item>
      <title>Writing Your Own Logging System NodeJS</title>
      <link>https://cotutorial.github.io/nodejs/writing-your-own-logging-system-nodejs/</link>
      <pubDate>Sun, 09 Apr 2017 21:26:14 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/writing-your-own-logging-system-nodejs/</guid>
      <description>Logging - Why Is It Important? Logs are an invaluable resource when it comes to effectively maintaining applications. Think of them as breadcrumbs you can follow to find out where your application has faltered. In simple applications this may be unnecessary and overkill, but in production applications that work with highly sensitive and valuable data, logs are priceless.
Logging in NodeJS Applications In this tutorial I’m going to be demonstrating a quick and simple method of logging a very simple server program.</description>
    </item>
    
    <item>
      <title>Monitoring Server Stats With NodeJS</title>
      <link>https://cotutorial.github.io/nodejs/monitoring-server-stats-with-nodejs/</link>
      <pubDate>Sun, 09 Apr 2017 21:25:15 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/nodejs/monitoring-server-stats-with-nodejs/</guid>
      <description>In production environments having visibility over how your systems are performing is vital. Being able to watch memory usage and ensure that servers are not being brought down by memory leaks and greedy programs can be hugely beneficial and can help you deal with issues before they become real headaches.
In this tutorial I’m going to be demonstrating how you can build a simple, yet effective NodeJS based monitoring system that will monitor your servers CPU usage, the total memory for a system and the current free memory for a system, the system uptime and possibly most importantly the average load for the last 15 minutes.</description>
    </item>
    
    <item>
      <title>AngularJS Factory Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-factory-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:22:46 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-factory-tutorial/</guid>
      <description>What Are Factories Services are essentially ways we can share code across our AngularJS applications. Say for instance you have an application that interacts with a RESTful API, you would typically create a factory which would return an object that contains all the functions necessary to interact with that API.
By using a factory object, we can standardise the way we interact with the REST API and reduce the amount of duplicate code we have scattered around our application.</description>
    </item>
    
    <item>
      <title>AngularJS Filter Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-filter-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:22:03 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-filter-tutorial/</guid>
      <description>Introduction Filters allow us to perform a number of incredibly useful things on bindings in views within our AngularJS applications. By definition filters select a subset of items from an array and returns it as a new array.
By employing filters we are able to easily manipulate entire arrays in the front-end giving us far more power in the way we wish to display our data.
The Official Documentation for filters can be found here: AngularJS Filter Documentation</description>
    </item>
    
    <item>
      <title>AngularJS Form Validation Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-form-validation-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:20:37 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-form-validation-tutorial/</guid>
      <description>In this tutorial I’m going to be demonstrating how we can implement form validation using the AngularJS framework.
Form validation is a user experience designers best friend when ensuring application users are inputting the correct data into your form. If you had a web application that took in email addresses from prospective clients then you could employ form validation to ensure that they email addresses they are putting in look like standard email addresses.</description>
    </item>
    
    <item>
      <title>AngularJS Project Structure Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-project-structure-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:18:27 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-project-structure-tutorial/</guid>
      <description>Project organization is important for all angularjs applications. Having a well defined and easy to traverse project structure can be hugely beneficial further down the line when you have to deal with maintenance and enhancements.
I&amp;rsquo;m going to start off by showing you sub-optimal project structures and then move on to the most recommended way of structuring your angularjs projects.
Simple PoCs and Tiny Applications There are multiple ways we can structure applications and of course different structures are better suited for different applications.</description>
    </item>
    
    <item>
      <title>Automating Your AngularJS Workflow With Gulp</title>
      <link>https://cotutorial.github.io/javascript/angularjs/automating-your-angularjs-workflow-with-gulp/</link>
      <pubDate>Sun, 09 Apr 2017 21:17:41 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/automating-your-angularjs-workflow-with-gulp/</guid>
      <description>Automate the Repeatable Things Gulp is a task runner that allows you to define a series repeatable tasks that can be run any time you need. You can automate boring things like the minification and uglification of your javascript or whatever else you do in order to make your code production ready.
Setting Up Gulp Thankfully, Gulp is easily installable using npm.
npm install --global gulp-cli Once this has successfully run, type gulp into your command line and you should be presented with a list of different options if it was installed successfully.</description>
    </item>
    
    <item>
      <title>Working With AngularJS Component Based Applications</title>
      <link>https://cotutorial.github.io/javascript/angularjs/working-with-angularjs-component-applications/</link>
      <pubDate>Sun, 09 Apr 2017 21:15:58 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/working-with-angularjs-component-applications/</guid>
      <description>If you haven’t read my article on using a different architecture styles in your AngularJS applications then I recommend you check it out here: Structuring AngularJS Applications
In this article we will be having a look at the key features present in my AngularJS Admin Panel application. This application utilizes a component based architecture and follows some of the best practices outlined in Todd Motto’s Style Guide
Getting the Code If you have git installed on your local machine then getting the code is just a case of doing:</description>
    </item>
    
    <item>
      <title>Integrating Highcharts-ng into your AngularJS Applications</title>
      <link>https://cotutorial.github.io/javascript/angularjs/integrating-highcharts-ng-angularjs/</link>
      <pubDate>Sun, 09 Apr 2017 21:14:45 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/integrating-highcharts-ng-angularjs/</guid>
      <description>In this tutorial we’ll be having a look at how you can effectively implement highcharts.js into your angularjs applications. We’ll be following a component based architecture and enforcing things like one-way data-binding as is suggested in Todd Mottos AngularJS Style Guide.
If you already follow a component based architecture, then it should should be very easy to integrate the code in this tutorial straight into your application without too much fuss.</description>
    </item>
    
    <item>
      <title>AngularJS Event Handling Tutorial</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-event-handling-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:13:59 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-event-handling-tutorial/</guid>
      <description>In this tutorial we’ll be looking at the different ways we can handle events in AngularJS. We’ll be exploring several of the event listening directives that AngularJS has on offer and how we can use these to create cool behaviours in our AngularJS Applications.
All code in this tutorial can be found in this github repo: Github Repo  Browser Events In most modern web browsers, every time something interesting happens in either the Document or the browser an event is generated.</description>
    </item>
    
    <item>
      <title>Passing Data Between Routes in AngularJS</title>
      <link>https://cotutorial.github.io/javascript/angularjs/passing-data-between-routes-angularjs/</link>
      <pubDate>Sun, 09 Apr 2017 21:13:23 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/passing-data-between-routes-angularjs/</guid>
      <description>In this tutorial we’ll be looking at how we can store or pass information between routes in an AngularJS application. This can be useful in a number of different applications and is actually quite simple.
This tutorial will be using the code from this github repo: AngularJS Fundamentals  If you want to see a working example of this then simply clone the repo to your local machine and run it.</description>
    </item>
    
    <item>
      <title>angularjs most important changes 1 6</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-most-important-changes-1-6/</link>
      <pubDate>Sun, 09 Apr 2017 21:12:25 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-most-important-changes-1-6/</guid>
      <description>The changelog with the AngularJS 1.6 release notes can be found here: AngularJS 1.6-RC.0 After having a look at the AngularJS release notes for 1.6, I thought I’d compile my thoughts together as to the most important changes to the framework in the coming release.
Expression Sandbox Removal Expression Sandbox Removal Full Notes
The expression sandbox removal was essentially something that checked to see if your code was accidentally accessing arbitrary javascript and discourage you from placing any business logic inside your templates.</description>
    </item>
    
    <item>
      <title>How To Store Information in Cookies in AngularJS</title>
      <link>https://cotutorial.github.io/javascript/angularjs/angularjs-store-cookies-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:11:31 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/angularjs-store-cookies-tutorial/</guid>
      <description>In this tutorial we look at how you can store information in cookies in your AngularJS application.
A cookie is a small piece of data that’s typically sent from a website you may be viewing and stored by your web browser. We can use these cookies for a wide range of things, from storing the last viewed items of a visitor to authentication cookies. These cookies persist across requests and thus are advantageous over using parent components or services to store information between routes as is detailed here: Passing Information Between Routes using Services</description>
    </item>
    
    <item>
      <title>Golang Integer String Conversion Tutorial</title>
      <link>https://cotutorial.github.io/golang/golang-integer-string-conversion-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:09:39 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/golang/golang-integer-string-conversion-tutorial/</guid>
      <description>In this tutorial we briefly look at how one can convert an integer to string and back again in GoLang. In order to do this we’ll be using the ‘strconv’ package and the Atoi and Itoa functions.
Full documentation of the strconv package can be found here: Strconv Package
String to Integer Conversion func strToIntConversion() { fmt.Println(&amp;#34;String to Integer Value Conversion&amp;#34;) var ourInteger int // use the strconv package to convert our string &amp;#39;12345&amp;#39; to an integer value  ourInteger, err := strconv.</description>
    </item>
    
    <item>
      <title>Angular Modules Tutorial</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-modules-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:05:28 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-modules-tutorial/</guid>
      <description>This tutorial was built of the official Angular 2.2 release.
 In this tutorial we’ll be examining what modules are in Angular 2.0 as well as how to define them, what the best practices are for using modules and what the differences are between 1._ Modules and 2._ modules.
 Official documentation for Angular 2 Modules can be found here: Angular 2 Modules
 What Are Modules? Typically a module would contain all the code necessary for one cohesive piece of functionality for your application.</description>
    </item>
    
    <item>
      <title>Angular Components Tutorial</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-components-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:04:56 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-components-tutorial/</guid>
      <description>This tutorial was created using Angular 2.2
 Most new frontend frameworks feature this concept of components and compartmentalizing blocks of code into distinct blocks that can be reused in multiple locations around your application. In Angular 2 we can do this by creating our own components.
What Are Components? In Angular we can define these things we call components. These components are functional blocks of code that we can attach to html tags.</description>
    </item>
    
    <item>
      <title>Angular Services Tutorial</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-services-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 21:04:22 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-services-tutorial/</guid>
      <description>If you’ve ever written an application in Angular 1.* that interfaces with a RESTful web API then you should have come across services. Services are essentially the interfaces we should use in order to interact with these APIs.
They essentially provide a cleaner interface with which we can interact with APIs. If you are building a todo application that interacts with say a ToDo REST api then what method do you think is cleaner?</description>
    </item>
    
    <item>
      <title>The Top Books For Learning Angular</title>
      <link>https://cotutorial.github.io/typescript/angular/best-books-for-learning-angular/</link>
      <pubDate>Sun, 09 Apr 2017 21:03:26 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/best-books-for-learning-angular/</guid>
      <description>The books listed below might specifically state they are for Angular 2. However due to semantic versioning these will still be relevant if you are working with Angular 4+
 In this article we&amp;rsquo;ll be covering some of the best books you can buy if you are wanting to learn the intricacies of the Angular framework. If you have been following my site for a while you&amp;rsquo;ll know I am a huge advocate for the Angular framework.</description>
    </item>
    
    <item>
      <title>Angular Get Current Route using the Location Service</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-get-current-route-location/</link>
      <pubDate>Sun, 09 Apr 2017 20:56:49 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-get-current-route-location/</guid>
      <description>This tutorial was built using Angular 2.2. If you want to check out the official documentation for Angular 2 Location
 In this tutorial we’ll be looking at various ways we can obtain the current URL of our application in Angular 2.
The Location Service The location service is part of the @angular/common module. It allows you to interact directly with a browser’s URL and can read and redirect the user should you wish to.</description>
    </item>
    
    <item>
      <title>Angular Detecting Route Changes Within Your Application</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-detecting-route-changes/</link>
      <pubDate>Sun, 09 Apr 2017 20:55:22 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-detecting-route-changes/</guid>
      <description>This tutorial was built using Angular 2.2. Some of the features in this tutorial may not work for earlier/later versions.
 Detecting whenever a route change happens in your application can be very useful for a multitude of reasons. For instance you may wish to store form data in a cookie in case they accidentally clicked on something they didn’t mean to.
In Angular 2 detecting this route change is relatively simple.</description>
    </item>
    
    <item>
      <title>Angular Websockets Tutorial</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-websockets-tutorial/</link>
      <pubDate>Sun, 09 Apr 2017 20:52:33 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-websockets-tutorial/</guid>
      <description>In this tutorial we’ll be looking at how you can implement a very simple WebSockets based Angular application.
 You may also be interested in my tutorial: Creating a Realtime App with Angular and Socket.io
 Video Tutorial  Browser Compatibility At this point in time I think it would be a good idea to let you know that websocket browser compatibility is not 100% and some older browsers may not support WebSockets.</description>
    </item>
    
    <item>
      <title>Creating a Realtime App with Angular and Socket.io Tutorial</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-socket-io-tutorial/</link>
      <pubDate>Tue, 10 Jan 2017 15:26:02 +0100</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-socket-io-tutorial/</guid>
      <description>The full source code for this tutorial can be found here: elliotforbes/angular-socket-io-example
 In this tutorial we are going to be looking at how we can build a realtime application using both Angular 4 and the Socket.io library. I&amp;rsquo;ve covered in the past how you can utilize raw websockets and convert them into observables using the RxJS library in a previous tutorial which can be found here: Angular Websockets Tutorial</description>
    </item>
    
    <item>
      <title>Angular Cookies Tutorial</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-cookies-tutorial/</link>
      <pubDate>Sun, 14 Feb 2016 16:11:58 +0530</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-cookies-tutorial/</guid>
      <description>This tutorial was built using Angular 2.2.
 Cookies are small packages of information that are typically stored by your browser and websites tend to use cookies for multiple things. Cookies persist across multiple requests and browser sessions should you set them to and they can be a great method for authentication in some web apps.
 Check out my AngularJS 1.* tutorial on storing information in cookies</description>
    </item>
    
    <item>
      <title>Angular Multiple Environment Configuration Tutorial</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-environment-configuration-tutorial/</link>
      <pubDate>Sun, 14 Feb 2016 16:11:58 +0530</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-environment-configuration-tutorial/</guid>
      <description>This Tutorial is part of the Angular Fundamentals course which can be found here: Angular Fundamentals
 If you are developing serious applications there is a very good chance that you will have more than one environment. You’ll have at least one testing environment to harmlessly break things in and a polished production environment that is supposed to remain as stable as possible.
Angular, or more specifically the angular-cli provides a very good mechanism for having multiple differing configuration files and for building these files easily into your finished build artefacts.</description>
    </item>
    
    <item>
      <title>Angular Observables Tutorial using RxJS</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-observables-tutorial/</link>
      <pubDate>Sun, 14 Feb 2016 16:11:58 +0530</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-observables-tutorial/</guid>
      <description>The Observable Design pattern is an incredibly powerful paradigm that we can utilize in a wide array of different applications. In this tutorial we’ll be covering how you can implement your own observables in Angular.
RxJS RxJS or reactive extensions is a set of libraries that are designed to help implement asynchronous and event-based programs and it’s necessary if you are wanting to perform Http requests or work with streams of information in Angular applications.</description>
    </item>
    
    <item>
      <title>Angular Routing Tutorial</title>
      <link>https://cotutorial.github.io/typescript/angular/angular-routing-tutorial/</link>
      <pubDate>Sun, 14 Feb 2016 16:11:58 +0530</pubDate>
      
      <guid>https://cotutorial.github.io/typescript/angular/angular-routing-tutorial/</guid>
      <description>This tutorial was built using Angular 2.2. Some of the code samples may not work if you are using previous versions
 Routing is practically essential in all larger Angular applications, it provides us with the ability to show different sections of html within a master template and basically create a full-blown multi-page application.
Routing in Angular 2+ has changed dramatically from the original AngularJS days where you would have to utilize the \$routeProvider and typically define routes in a separate file to that of your module file.</description>
    </item>
    
    <item>
      <title>Migrating to Hugo</title>
      <link>https://cotutorial.github.io/blog/migrating-to-hugo/</link>
      <pubDate>Sun, 14 Feb 2016 16:11:58 +0530</pubDate>
      
      <guid>https://cotutorial.github.io/blog/migrating-to-hugo/</guid>
      <description>If you&amp;rsquo;ve frequented this site in the past you should hopefully have noticed a huge change to the way the site looks and hopefully the speed at which the site serves content. Over the past 2 weeks I&amp;rsquo;ve been working with a static site tool, similar to that of Jekyll, called Hugo.
Reasons for the Migration Ease The first and biggest reason I&amp;rsquo;m moving to a github based site is due to the ease with which I can make changes.</description>
    </item>
    
    <item>
      <title>Removing Duplicate Entries from ng-repeat in AngularJS</title>
      <link>https://cotutorial.github.io/javascript/angularjs/removing-duplicates-from-ng-repeat/</link>
      <pubDate>Sun, 14 Feb 2016 16:11:58 +0530</pubDate>
      
      <guid>https://cotutorial.github.io/javascript/angularjs/removing-duplicates-from-ng-repeat/</guid>
      <description>This tutorial was built using Angular 1.6. Earlier or later versions of the code may not work as intended.
 This tutorial will show you how you can filter out duplicates when using the ng-repeat directive in AngularJS. We&amp;rsquo;ll be passing in an array of JSON Objects and filtering based on multiple different things within each object.
Implementing our Test Controller We’ll start off with a very simple angular controller that will have a list of item names, some of which are duplicates.</description>
    </item>
    
    <item>
      <title>The Top Books for Learning to Program in Python</title>
      <link>https://cotutorial.github.io/python/best-books-for-python/</link>
      <pubDate>Sun, 14 Feb 2016 16:11:58 +0530</pubDate>
      
      <guid>https://cotutorial.github.io/python/best-books-for-python/</guid>
      <description>Python is one of the most popular programming languages on the planet. It’s widely regarded as one of the best languages to learn first if you are wanting to get into computer programming.
Dive Into Python Amazon: Dive Into Python Dive into Python is a perfect hands-on guide for experienced programmers to come to grips with the Python programming language. It&amp;rsquo;s succinct in the way it delivers its content and is an excellent reference book that&amp;rsquo;s definitely handy to have close at hand when programming.</description>
    </item>
    
  </channel>
</rss>